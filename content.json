{"meta":{"title":"’’Sun--(*^▽^*)","subtitle":"","description":null,"author":"Chen jia","url":"http://jiugework.gitee.io"},"pages":[{"title":"关于我","date":"2019-07-11T08:35:59.193Z","updated":"2019-07-11T08:35:59.193Z","comments":true,"path":"about/index.html","permalink":"http://jiugework.gitee.io/about/index.html","excerpt":"","text":""},{"title":"gallery","date":"2019-07-10T14:26:50.234Z","updated":"2019-07-10T14:26:50.234Z","comments":true,"path":"gallery/index.html","permalink":"http://jiugework.gitee.io/gallery/index.html","excerpt":"","text":""},{"title":"timeline","date":"2019-07-10T14:03:53.000Z","updated":"2019-07-10T14:15:20.503Z","comments":true,"path":"timeline/index.html","permalink":"http://jiugework.gitee.io/timeline/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"csscsscss/css1 copy","date":"2019-07-16T09:21:38.166Z","updated":"2019-07-16T09:21:38.166Z","comments":true,"path":"2019/07/16/csscsscss/css1 copy/","link":"","permalink":"http://jiugework.gitee.io/2019/07/16/csscsscss/css1 copy/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"常用CSS样式","slug":"csscsscss/css1","date":"2019-07-16T09:21:34.109Z","updated":"2019-07-16T09:34:05.772Z","comments":true,"path":"2019/07/16/csscsscss/css1/","link":"","permalink":"http://jiugework.gitee.io/2019/07/16/csscsscss/css1/","excerpt":"","text":"CSS超出部分显示省略号12345678910111213141516171819202122232425/* 单行 */.overflow&#123; overflow: hidden; text-overflow:ellipsis; white-space: nowrap;&#125;/* 多行 */.more_overflow&#123;display: -webkit-box;text-overflow: ellipsis;-webkit-box-orient: vertical;-webkit-line-clamp: 2; /* 显示行数 */overflow: hidden;&#125;## css元素垂直居中```css.verticalcenter&#123; position: relative; top: 50%; -webkit-transform: translateY(-50%); -o-transform: translateY(-50%); transform: translateY(-50%);&#125; banner自适应屏幕代码123456789101112div &#123; width:100%; position:relative; overflow:hidden; height:200px;&#125;img &#123; width:3000px;/*图片宽度*/ position:absolute; left:50%; margin-left:-1500px;/*图片宽度的一半*/ &#125; `","categories":[{"name":"Css","slug":"Css","permalink":"http://jiugework.gitee.io/categories/Css/"}],"tags":[{"name":"常用CSS","slug":"常用CSS","permalink":"http://jiugework.gitee.io/tags/常用CSS/"}]},{"title":"字符串常用操作","slug":"js/jsMM","date":"2019-07-11T09:02:07.077Z","updated":"2019-07-16T09:12:57.638Z","comments":true,"path":"2019/07/11/js/jsMM/","link":"","permalink":"http://jiugework.gitee.io/2019/07/11/js/jsMM/","excerpt":"","text":"判断开头结尾 startsWidth判断以什么开头 endsWidth判断以什么结尾 1let str='https://www.4399.com'; // alert(str.startsWith('a')) //判断是否以'a'开头，返回bool值 endsWidth同理 字符串截取 slice substring substr 1234567891011121314151617let str = 'abcdef';str = str.slice(0);//返回整个字符串 abcdefstr = str.substring(0);//返回整个字符串 abcdefstr = str.substr(0);//返回整个字符串 abcdef// 使用一个参数str = str.slice(2);//截取第二个之后所有的字符 cdefstr = str.substring(2);//截取第二个之后所有的字符 cdefstr = str.substr(2);//截取第二个之后所有的字符 cdef// 使用两个参数str = str.slice(2,4);//截取第二个到第四个之间的字符 cdstr = str.substring(2,4);//截取第二个到第四个之间的字符 cdstr = str.substr(2,4);//截取从第3个开始往后数4位之间的字符 cdef// 使用两个负数str = str.slice(1,-3);//截取第二个到第四个之间的字符 bcstr = str.substring(1,-3);//截取第二个到第四个之间的字符 a #负数转换为0str = str.substr(1,-3);//不能为负数，若强行传递负数，会被当成0处理 ' ' #负数转换为0 字符串和数组相互转换 split join 123456789// 字符串转数组let str = \"abc,abcd,aaa\";t = str.split(\",\");// 在每个逗号(,)处进行分解 [\"abc\", \"abcd\", \"aaa\"]var str = \"helloworld\";t1 = str.split(''); //[\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\", \"r\", \"l\", \"d\"]// 数组转字符串var a, b;a = new Array(0,1,2,3,4);b = a.join(\"-\"); //\"0-1-2-3-4\"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"String","slug":"String","permalink":"http://jiugework.gitee.io/tags/String/"},{"name":"字符串","slug":"字符串","permalink":"http://jiugework.gitee.io/tags/字符串/"}]},{"title":"st","slug":"st","date":"2019-07-05T07:57:42.000Z","updated":"2019-07-10T14:11:57.242Z","comments":true,"path":"2019/07/05/st/","link":"","permalink":"http://jiugework.gitee.io/2019/07/05/st/","excerpt":"","text":"所说的非官方个高考将开始对不合格一片特兹123.js&#123; hright:100;&#125;","categories":[{"name":"Css","slug":"Css","permalink":"http://jiugework.gitee.io/categories/Css/"}],"tags":[{"name":"青川","slug":"青川","permalink":"http://jiugework.gitee.io/tags/青川/"}]},{"title":"Vue","slug":"模板","date":"2018-12-05T07:57:42.000Z","updated":"2019-07-11T08:48:57.791Z","comments":true,"path":"2018/12/05/模板/","link":"","permalink":"http://jiugework.gitee.io/2018/12/05/模板/","excerpt":"","text":"w","categories":[{"name":"Vue","slug":"Vue","permalink":"http://jiugework.gitee.io/categories/Vue/"}],"tags":[{"name":"games","slug":"games","permalink":"http://jiugework.gitee.io/tags/games/"},{"name":"Vue","slug":"Vue","permalink":"http://jiugework.gitee.io/tags/Vue/"}]},{"title":"数据交互","slug":"data/数据交互","date":"2018-07-11T08:25:28.000Z","updated":"2019-07-11T09:56:39.965Z","comments":true,"path":"2018/07/11/data/数据交互/","link":"","permalink":"http://jiugework.gitee.io/2018/07/11/data/数据交互/","excerpt":"","text":"http协议 无状态 连接过程：连接-接受-发送请求 消息分成两部分，请求头&lt;=32K、请求体&lt;=2G form 最重要 action-提交到的位置 method–GET/POST/PUT/DELETE/HEAD GET: 把数据放在url传输 数据量很小、缓存。获取东西 POST: 把数据放在请求体里面 数据量大、不会缓存。发送东西，大量发送。 PUT:发送东西，大量发送。 DELETE:删除。 HEAD:让服务器只发送头回来就行(不需要内容) name 名字 enctype 上传文件需要设置的 ajax 官方、不能跨域 单向 ajax好: 用户体检好，性能高原理 ajax-jsonp 民间、能跨域 不推荐 破坏了http自身的设计websocket 双向-数据实时性 html5 IE9+ 用的非常广 基于http 跨域 原生麻烦socket.io: 兼容的？ 二进制数据 怎么用 聊天室 视频点播socket.io 安装npm i socket.io -D websocket聊天室 用户注册、登陆 发言 离线消息 数据 用户信息库 消息数据库 数据库 关系形数据库—— MySQL、Oracle 优点 : 强大 缺点 : 性能低 文件形数据库—— SQLite 优点 : 简单 缺点 : 支撑不了庞大的应用、没法储存特别多的数据 文档形数据库—— MongoDB 优点 : 直接存储对象本身 缺点 : 不够严谨、性能偏低 空间形数据库—— 坐标、位置 .. GIS 数据库类型: 数字 整数 thinyint(-128~127或者0~255)、int(21亿或43亿); 浮点数 float（保留到小数点8位） 、 double（308） 字符串 小字符串 varchar（255） 大字符串 text（2G） 主键: 唯一 性能高","categories":[],"tags":[{"name":"请求数据","slug":"请求数据","permalink":"http://jiugework.gitee.io/tags/请求数据/"},{"name":"ajax","slug":"ajax","permalink":"http://jiugework.gitee.io/tags/ajax/"}]},{"title":"数据遍历","slug":"js/js1 copy 2","date":"2018-07-08T09:27:42.000Z","updated":"2019-07-11T10:13:16.891Z","comments":true,"path":"2018/07/08/js/js1 copy 2/","link":"","permalink":"http://jiugework.gitee.io/2018/07/08/js/js1 copy 2/","excerpt":"","text":"map 映射 一个对一个 123456789101112 [12,58,60,60,99,8] [\"不及格\",\"不及格\",\"及格\",\"及格\",\"及格\",\"不及格\"];// 1.使arr中数字乘以2，输出结果let arr = [12, 5, 8];let result = arr.map(item =&gt; item * 2)console.log(result);//(3) [24, 10, 16]// ////////////////////// 2.分数大于等于60的输出及格,小于60的输出不及格let mark = [15, 88, 76, 60, 55];let markResult = mark.map(item=&gt; item &gt;= 60 ? \"及格\" : \"不及格\")console.log(markResult);//[\"不及格\", \"及格\", \"及格\", \"及格\", \"不及格\"] reduce 汇总 一堆出来一个1234567891011121314151617// 1.算个总数 [10,20,30] =&gt; 60;// 2.算个平均数 [10,20,30] =&gt; 20; let arr = [12, 541, 5461, 115, 656]; let arrRes = arr.reduce((tmp, item, index) =&gt; tmp + item)console.log(arrRes);//6785//2.算个平均数let avgRes = arr.reduce((tmp, item, index) =&gt; &#123; if (index != arr.length - 1) &#123; return tmp + item &#125; else &#123; return (tmp + item) / arr.length; &#125;&#125;)console.log(avgRes);//1357 filter 过滤器 保留一部分 12345678910111213 // 1.算出能被3整除的数let arr = [12, 541, 5461, 115, 656, 99, 30];let result = arr.filter(item =&gt; item%3==0)console.log(result); //(3) [12, 99, 30]// 2.价格大于10000的数据let arrz=[ &#123;title:'男鞋',price:650&#125;, &#123;title:'女鞋',price:15000&#125;, &#123;title:'男装',price:100&#125;, &#123;title:'女装',price:10000&#125;]let pres = arrz.filter(item=&gt;item.price&gt;=10000);console.log(pres);// &#123;title:'女鞋',price:15000&#125;, &#123;title:'女装',price:10000&#125; fofEach 循环(迭代) 12let arr = [12, 541, 5461, 115, 656, 99, 30]; arr.forEach(item=&gt; console.log(item)) 数组遍历普通for循环，经常用的数组遍历12345var arr = [1, 3, 45, 7, 'dd'];for (let i = 0; i &lt; arr.length; i++) &#123; console.log(arr[i]);&#125;// 打印结果 1 3 45 7 dd 优化版for循环:使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显 12345var arr = [1, 3, 45, 7, 'dd'];for(var j= 0, len = arr.length; j&lt;len; j++)&#123; console.log(arr[j]); &#125;// 打印结果 1 3 45 7 dd forEach， ES5推出的,数组自带的循环，主要功能是遍历数组。 forEach这种方法也有一个小缺陷：你不能使用break语句中断循环，也不能使用return语句返回到外层函数。 12345678910var arr = [1, 3, 45, 7, 'dd'];arr.forEach(function(value,i)&#123; console.log(i+'--'+value);&#125;)// 打印结果// 0--1// 1--3 // 2--45 // 3--7 // 4--dd map遍历 map即是 “映射”的意思 用法与 forEach 相似12345678910 var arr = [1, 3, 45, 7, 'dd'];arr.map(function(value,i)&#123; console.log(i+'--'+value);&#125;)// 打印结果// 0--1// 1--3 // 2--45 // 3--7 // 4--dd map遍历支持使用return语句，支持return返回值 1234567var arr = [1, 3, 45, 7, 'dd'];var b= arr.map(function(value,i)&#123; console.log(i+'--'+value); return value;&#125;)console.log(b);// b返回 (5) [1, 3, 45, 7, \"dd\"] for-of遍历 是ES6新增功能12345var arr = [1, 3, 45, 7, 'dd'];for( let i of arr)&#123; console.log(i);&#125;// 打印结果: 1 3 45 7 dd for-of这个方法避开了for-in循环的所有缺陷 与forEach()不同的是，它可以正确响应break、continue和return语句 for-of循环不仅支持数组，还支持大多数类数组对象 for-of循环也支持字符串遍历","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/tags/JavaScript/"},{"name":"遍历","slug":"遍历","permalink":"http://jiugework.gitee.io/tags/遍历/"},{"name":"循环","slug":"循环","permalink":"http://jiugework.gitee.io/tags/循环/"}]},{"title":"解构赋值","slug":"js/8451","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:55:59.502Z","comments":true,"path":"2018/07/05/js/8451/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/8451/","excerpt":"","text":"结构赋值 左右两边结构必须一样; 右边必须是个东西; 声明和赋值不能分开(必须在一句话里说完);12345678 // 数组let [aq,bq,cq]=[1,2,3]; console.log(aq);//1 console.log(bq);//2 console.log(cq);//3 // 对象 let &#123;w,z,y&#125; = &#123;w:12,z:66,y:15&#125;; console.log(w,z,y);// 12 66 15","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://jiugework.gitee.io/tags/ES6/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/tags/JavaScript/"}]},{"title":"Git常用操作","slug":"GIt操作","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-18T08:39:59.351Z","comments":true,"path":"2018/07/05/GIt操作/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/GIt操作/","excerpt":"","text":"初始化git config --global user.name &quot;你的账号&quot; git config --global user.email &quot;你的邮箱&quot; 在文件中初始化Git（创建Git仓库）git init 提交仓库 创建文件 git touch a1.html 文件提交到暂存区 git add a1.html 文件提交描述 git commit -m &#39;描述&#39; 查看文件状态 git status 提交到仓库 git push Git克隆操作 git clone 仓库地址 新仓库添加本地文件 新建码云/github仓库 本地新建文件夹 新建的文件夹，点击鼠标右键，选择git bash here git init 复制项目地址 然后git remote add origin 地址 继续输入git pull origin master 命令，将码云上的仓库pull到本地文件夹 使用git add -A （. 表示所有的）或者 git add + 文件名 // 将文件保存到缓存区 使用git commit -m‘新添加的文件内容描述’ //添加文件描述 使用git push origin master ，将本地仓库推送到远程仓库 ok了","categories":[{"name":"Git","slug":"Git","permalink":"http://jiugework.gitee.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://jiugework.gitee.io/tags/Git/"}]},{"title":"模块化","slug":"js/js1 copy 6","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:53:42.647Z","comments":true,"path":"2018/07/05/js/js1 copy 6/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/js1 copy 6/","excerpt":"","text":"模块化 模块-组件-元件 模块： 12345678910// - 定义: model.js define(function (require,exports,module) &#123; exports.a = 12; exports.b=5;&#125;); // - 调用: xx.htmlseajs.use(['xxxx.js','xxx.js',...],function(model1,model2,...)&#123;&#125;) 民间的–sea.js 、require.js CMD、AMD规范 区别： html-&gt;js use js-&gt; js require node.js模块化 没有define exports、require、module 引用自定义模块 1) 放到node_modules里, 2)前面加上./ 引入: let mod = require(‘./aaa.js’) 输出: exports.xx = xxx; module.exports={x,x,x,y} ES6模块化 import export 引入:impo mod from = ‘./xx.js’ 输出:expor{x,x,x}","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://jiugework.gitee.io/tags/ES6/"},{"name":"模块化","slug":"模块化","permalink":"http://jiugework.gitee.io/tags/模块化/"}]},{"title":"generator","slug":"js/js1 copy 7","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:53:42.647Z","comments":true,"path":"2018/07/05/js/js1 copy 7/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/js1 copy 7/","excerpt":"","text":"generatorgenerator-生成器 普通函数- 一路到底 generator函数- 中间可以停 走走停停 12345678910 function *show() &#123; alert('a'); yield; alert('b') &#125; show(); let gentObj = show(); gentObj.next(); //a gentObj.next();//bconsole.log(gentObj) generator-yield是什么 可以传参、可以返回 …..本质：无感觉处理异步操作","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"generator","slug":"generator","permalink":"http://jiugework.gitee.io/tags/generator/"}]},{"title":"变量let与常量const","slug":"js/模板","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:59:43.757Z","comments":true,"path":"2018/07/05/js/模板/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/模板/","excerpt":"","text":"变量let与常量const ES5 var 问题 可以重复声明 无法限制修改 没有块级作用域 ES6 变量 let 不能重复声明 可以重新定义 有块级作用域 ES6 常量 const 不能重复声明 不可以重新定义 有块级作用域","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"变量","slug":"变量","permalink":"http://jiugework.gitee.io/tags/变量/"}]},{"title":"箭头函数","slug":"js/js1","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:53:42.648Z","comments":true,"path":"2018/07/05/js/js1/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/js1/","excerpt":"","text":"之前的函数是这样写的 123function 名字()&#123; // code&#125; 而ES6是↓ 箭头函数 如果只有一个参数，()可以省略 如果只有一个return {}可以省略 1234567891011121314151617()=&gt;&#123; &#125;;window.onload= ()=&gt; alert('vb');let show=function()&#123; console.log(\"666\");&#125;;let show=()=&gt;&#123; console.log(\"666\");&#125;;let add = function(a,b)&#123; alert(a+b);&#125;let add = (a,b)=&gt;&#123; alert(a+b);&#125;add(1,6) 函数-有参数 参数扩展/展开 收集参数 收集剩余的参数 …args必须是最后一个123456789function arg(a,b,...args) &#123; console.log(a); console.log(b); console.log(...args);&#125;arg(1,2,5,7,9,2,10); // 1// 2// 5 7 9 2 10 展开参数 12345678910111213141516171819202122232425 let array = [1,55,5]function zhan(a,b,c) &#123; console.log(a); console.log(b); console.log(c);&#125;zhan(...array) //1//55//5//////////////////////////////////let arr1=[1,2,5];let arr2=[10,22,52];let arr3 = [...arr1,...arr2];console.log(arr3);// (6) [1, 2, 5, 10, 22, 52]////////////////////////////////// function a(...args)&#123; fadd(...args) &#125; function fadd(a,b) &#123; console.log(a+b); &#125; a(1,6)//7 默认参数 123456function m(a,b=1,c=10) &#123; console.log(a,b,c); &#125; m(1) //1 1 10 m(1,2)//1 2 10 m(1,2,5)// 1 2 5","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://jiugework.gitee.io/tags/ES6/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/tags/JavaScript/"}]},{"title":"Promise","slug":"js/js1 copy 5","date":"2018-07-05T10:57:42.000Z","updated":"2019-07-11T09:53:42.647Z","comments":true,"path":"2018/07/05/js/js1 copy 5/","link":"","permalink":"http://jiugework.gitee.io/2018/07/05/js/js1 copy 5/","excerpt":"","text":"异步: 操作直接没啥关系,同时进行多个操作，代码复杂。 同步: 同时只能做一件事 代码简单。 本质：等待异步操作结束 当状态改变的时候—调用之前挂起的then队列 then的时候直接执行对应的函数，并且参数给人家。 Promise 用法Promise.all 一个都不能错Promise.race 只要有一个对 一个 12345678910111213141516171819202122232425262728293031323334353637383940 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=\"js/jquery-3.0.0.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; let p = new Promise(function (resolve, reject) &#123; //异步代码 //resolve 成功 //reject 失败 $.ajax(&#123; url: \"data/tt.txt\", dataType: \"json\", success: function (data) &#123; resolve(data) &#125;, error(err) &#123; reject(err) &#125; &#125;); &#125;) p.then(function (data) &#123; alert('成功' + data) // 调用成功 &#125;, function (err) &#123; console.log(err); alert('失败') //失败了 &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 多个 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=\"js/jquery-3.0.0.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; function createPromise(url) &#123; return new Promise(function (resolve, reject) &#123; //异步代码 //resolve 成功 //reject 失败 $.ajax(&#123; url, dataType: \"json\", success: function (data) &#123; resolve(data) &#125;, error(err) &#123; reject(err) &#125; &#125;); &#125;) &#125; Promise.all([ createPromise('data/tt.txt'), createPromise('data/jj.txt') ]).then(function (arr) &#123; // 全部成功 alert('成功'); let [arr1, arr2] = arr; console.log(arr); console.log(arr1); console.log(arr2); &#125;, function (err) &#123; //失败一个或多个 alert('失败'); console.log(err); &#125;) &lt;/script&gt; &lt;script&gt; Promise.all([ $.ajax(&#123; url: 'data/tt.txt', dataType: \"json\" &#125;), $.ajax(&#123; url: 'data/jj.txt', dataType: \"json\" &#125;) ]) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; jq中的promise 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=\"js/jquery-3.0.0.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; Promise.all([ $.ajax(&#123;url:'data/tt.txt',dataType: \"json\"&#125;), $.ajax(&#123;url:'data/jj.txt',dataType: \"json\"&#125;) ]).then(function (arr) &#123; let [arr1,arr2] = arr; alert('成功'); console.log(arr); console.log(arr1); console.log(arr2); &#125;,function () &#123; alert('失败') &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://jiugework.gitee.io/categories/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://jiugework.gitee.io/tags/ES6/"}]}]}