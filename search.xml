<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node函数特点</title>
      <link href="/2019/10/05/node/Node%E5%87%BD%E6%95%B0/"/>
      <url>/2019/10/05/node/Node%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>#模板</p><ul><li><p>Node中任何一个模块(js文件)都被一个外层函数所包裹</p></li><li><p><code>function (exports, require, module, filename, dirname)</code> {}</p></li><li><p><strong>exports</strong>:用于暴露模块</p></li><li><p><strong>require</strong>:用于引入模块</p></li><li><p><strong>module</strong>:用于暴露模块</p></li><li><p><strong>filename</strong>: 当前文件所在的路径(绝对)</p></li><li><p><strong>dirname</strong>: 当前文件所在文件夹的路径(绝对) </p></li></ul><p>  为什么要有这个外层函数(这个外层函数有什么作用?) </p><p>   1,隐藏内部实现。</p><p>   2.支持CommonJs的模块化T Node函数</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mongoose的增删改查</title>
      <link href="/2019/08/31/node/mongoose%E7%9A%84CRUD/"/>
      <url>/2019/08/31/node/mongoose%E7%9A%84CRUD/</url>
      
        <content type="html"><![CDATA[<h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ul><li>模型对象.create(文档对象，回调函数)</li><li><p>模型对象.create(文档对象)</p><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4></li><li><p>模型对象.find(查询条件[,投影])不管有没有数据，都返回一个数组</p></li><li><p>模型对象.findOne(查询条件[,投影])找到了返回一个对象，没找到返回null</p><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4></li><li><p>模型对象.updateOne(查询条件,要更新的内容[,配置对象])</p></li><li><p>模型对象.updateMany(查询条件,要更新的内容[,配置对象])<br> 备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateOne或updateMany</p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4></li><li><p>模型对象.deleteOne(查询条件)</p></li><li>模型对象.deleteMany(查询条件)<br>  备注：没有delete方法，会报错！</li></ul><p>备注： 以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GET请求与POST请求</title>
      <link href="/2019/08/31/node/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/08/31/node/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="GET请求与POST请求"><a href="#GET请求与POST请求" class="headerlink" title="GET请求与POST请求"></a>GET请求与POST请求</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>HTTP请求，最初设定了八种方法（也称为“动作”）。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。<br>八种方法分别为：OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT<br>这八种方法最终经过“岁月沉淀”后，常用的只有两种，即：GET和POST</p></blockquote><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>含义：从指定的资源获取数据（一种“索取”的感觉）。</li><li>什么时候使用GET请求较为合适？<ul><li>单纯获取数据的时。</li><li>请求中不包含敏感数据时。</li></ul></li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>含义：向指定的资源提交要被处理的数据（一种“交差”的感觉）。</li><li>什么时候使用POST请求较为合适？<ul><li>传送相对敏感数据时。</li><li>请求的结果有持续性的副作用，例如：传递的数据要作为数据源写入数据库时。<br>备注：使用了POST不代表的绝对的安全。</li></ul></li></ul><h3 id="常见的GET请求："><a href="#常见的GET请求：" class="headerlink" title="常见的GET请求："></a>常见的GET请求：</h3><ul><li>浏览器地址栏输入网址时（浏览器请求网页时时GET请求，且不可更改）</li><li>可以请求外部资源的html标签，例如：<img> <a> <link> <script></li><li>发送Ajax时明确指出了使用GET请求</li><li>form表单提交时没有指明方式，默认使用GET</li></ul><h3 id="常见的POST请求："><a href="#常见的POST请求：" class="headerlink" title="常见的POST请求："></a>常见的POST请求：</h3><ul><li>发送Ajax时明确指出了使用POST方式</li><li>使用第三方发送Ajax请求库时明确指出用POST时</li><li>form表单提交时明确指出使用POST方式</li></ul><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p><img src="https://img.jiuge.site/imgbox/20190831/RDV6MlMfYWfB.png?imageslim" alt="mark"></p></script></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GET </tag>
            
            <tag> POST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2019/08/30/node/MongoDB/"/>
      <url>/2019/08/30/node/MongoDB/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB原生CRUD（增删改查）命令总结"><a href="#MongoDB原生CRUD（增删改查）命令总结" class="headerlink" title="MongoDB原生CRUD（增删改查）命令总结"></a>MongoDB原生CRUD（增删改查）命令总结</h2><p>-C creat：</p><ul><li>db.集合名.insert(文档对象)</li><li>db.集合名.insertOne(文档对象)</li><li>db.集合名.insertMany([文档对象，文档对象])</li></ul><p>-R read：</p><ul><li><p>db.集合名.find(查询条件[,投影])</p><ul><li>举例:db.students.find({age:18}),查找年龄为18的所有信息</li><li><p>举例:db.students.find({age:18,name:’jack’}),查找年龄为18且名字为jack的学生</p><p>常用操作符：</p><ul><li>&lt; , &lt;= , &gt; , &gt;= , !==   对应为： $lt $lte $gt $gte $ne<br> 举例：db.集合名.find({age:{$gte:20}}),年龄是大于等于20的</li><li>逻辑或：使用$in 或 $or<br>  查找年龄为18或20的学生<br>  举例：db.students.find({age:{$in:[18,20]}})<br>  举例：db.students.find({$or:[{age:18},{age:20}]})</li><li>逻辑非：$nin</li><li>正则匹配：<br>  举例：db.students.find({name:/^T/})</li><li>$where能写函数：<br>  db.students.find({$where:function(){<pre><code>return this.name === &apos;zhangsan&apos; &amp;&amp; this.age === 18</code></pre>  }})</li></ul><p>投影：过滤掉不想要的数据，只保留想要展示的数据<br> 举例：db.students.find({},{_id:0,name:0}),过滤掉id和name<br> 举例：db.students.find({},{age:1}),只保留age</p><p>补充：db.集合名.findOne(查询条件[,投影])，默认只要找到一个</p></li></ul></li></ul><p>-U update：</p><ul><li><p>db.集合名.update(查询条件,要更新的内容[,配置对象])</p><p>  //如下会将更新内容替换掉整个文档对象，但_id不受影响</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{age:19})</code></pre><p>  //使用$set修改指定内容，其他数据不变，不过只能匹配一个zhangsan</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}})</code></pre><p>  //修改多个文档对象，匹配多个zhangsan,把所有zhangsan的年龄都替换为19</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}},{multi:true})</code></pre><p>   补充：db.集合名.updateOne(查询条件,要更新的内容[,配置对象])</p><pre><code>db.集合名.updateMany(查询条件,要更新的内容[,配置对象])</code></pre></li></ul><p>-D delete</p><ul><li>db.集合名.remove(查询条件)<pre><code>//删除所有年龄小于等于19的学生举例：db.students.remove({age:{$lte:19}})</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>包管理工具</title>
      <link href="/2019/08/26/node/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/08/26/node/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><strong>移除</strong></p><p><code>npm remove 包名字</code> 在node_module中删除xxxx包,并且删除该包在package.json中的声助</p><p><strong>其他命令</strong></p><ul><li>npm aduit fix :检测项目依赖中的一些问题,并且尝试着修复。</li><li>npm view  包名字 versions: 查npm仓库中xxx包的所有版本信息</li><li>npm view 包名字 version: 查npm仓库中xxxx包的最新版本</li><li>npm ls 包名字 查看我们所安装xxx包的版本</li></ul><p><strong>关于版本号的说明</strong></p><ul><li><code>&quot;^3.x.x&quot;</code> :<strong>锁定大版本</strong>以后安装包的时候,保证包是3.对x版本,x默认取最新的。</li><li>“~3.1.x”：<strong>锁定小版本</strong>,以后安装包的时候,保证包是3.1.x版本,x默认取最新的。</li><li>“3.1.1”：<strong>锁定完整版本</strong>,以后安装包的时候,保证包必须是3.1.1版本。</li></ul><h2 id="cnpm的简介与使用"><a href="#cnpm的简介与使用" class="headerlink" title="cnpm的简介与使用"></a>cnpm的简介与使用</h2><h3 id="1-国内使用npm存在的问题"><a href="#1-国内使用npm存在的问题" class="headerlink" title="1.国内使用npm存在的问题"></a>1.国内使用npm存在的问题</h3><ul><li>安装npm后，每次我们安装包时，我们的电脑都要和npm服务器进行对话，去npm仓库获取包。</li><li>npm默认的仓库地址为：<a href="http://registry.npmjs.org" target="_blank" rel="noopener">http://registry.npmjs.org</a> </li><li>查看当前npm仓库地址命令：   <code>npm config get registry</code>  提示如下图：</li></ul><p><img src="https://s2.ax1x.com/2019/01/08/FqtKhR.png" alt="Alt text"><br>因为npm的远程服务器在国外，所以有时候难免出现访问过慢，甚至无法访问的情况。<br>为了解决这个问题，我们有以下几个解决办法</p><h3 id="2-使用淘宝的cpm代替npm"><a href="#2-使用淘宝的cpm代替npm" class="headerlink" title="2.使用淘宝的cpm代替npm"></a>2.使用淘宝的cpm代替npm</h3><blockquote><p>淘宝为我们搭建了一个国内的npm服务器，它目前是每隔10分钟将国外npm仓库的所有内容“搬运”回国内的服务器上，这样我们直接访问淘宝的国内服务器就可以了，它的地址是：<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><h4 id="第一种：直接安装cnpm"><a href="#第一种：直接安装cnpm" class="headerlink" title="第一种：直接安装cnpm"></a>第一种：直接安装cnpm</h4><p>安装淘宝提供的cnpm，并更改服务器地址为淘宝的国内地址，<br>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，以后安装直接采用<code>cpm</code>替代<code>npm</code>，<br>例如原生npm命令为：<code>npm install uniq --save</code>，cnpm命令为：<code>cnpm install uniq --save</code></p><h4 id="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"><a href="#第二种：替换npm仓库地址为淘宝镜像地址（推荐）" class="headerlink" title="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"></a>第二种：替换npm仓库地址为淘宝镜像地址（推荐）</h4><p>命令：npm config set registry <a href="https://registry.npm.taobao.org`，" target="_blank" rel="noopener">https://registry.npm.taobao.org`，</a><br>查看是否更改成功：<code>npm config get registry</code>，以后安装时，依然用npm命令，但是实际是从淘宝国内服务器下载的</p><h2 id="yarn的简介与使用"><a href="#yarn的简介与使用" class="headerlink" title="yarn的简介与使用"></a>yarn的简介与使用</h2><blockquote><p>Yarn发布于2016年10月，截至当前2019年1月，gitHub上的Start数量为：34.3k，已经超过npm很多了，<br>yarn使用本地缓存，无需互联网连接就能安装本地已经缓存的依赖项，安装方法：<code>npm install -g yarn</code></p></blockquote><h4 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h4><p>由于yarn的全局安装位置与npm不同，所以要配置yarn的全局安装路径到环境变量中，否则全局安装的包不起作用。<br>具体操作如下：</p><blockquote><p>安装yarn后执行 <code>yarn global dir</code>命令,获取yarn全局安装位置。<br>讲该位置配置到电脑环境变量中</p></blockquote><h3 id="yarn命令与npm命令的对应关系如下："><a href="#yarn命令与npm命令的对应关系如下：" class="headerlink" title="yarn命令与npm命令的对应关系如下："></a>yarn命令与npm命令的对应关系如下：</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目:"></a>初始化项目:</h4><pre><code>yarn init -ynpm init -y</code></pre><h4 id="下载项目的所有声明的依赖"><a href="#下载项目的所有声明的依赖" class="headerlink" title="下载项目的所有声明的依赖:"></a>下载项目的所有声明的依赖:</h4><pre><code>yarnnpm install</code></pre><h4 id="下载指定的运行时依赖包"><a href="#下载指定的运行时依赖包" class="headerlink" title="下载指定的运行时依赖包:"></a>下载指定的运行时依赖包:</h4><pre><code>yarn add webpack@3.2.1npm install webpack@3.2.1 -S</code></pre><h4 id="下载指定的开发时依赖"><a href="#下载指定的开发时依赖" class="headerlink" title="下载指定的开发时依赖:"></a>下载指定的开发时依赖:</h4><pre><code>yarn add webpack@3.2.1 -Dnpm install webpack@3.2.1 -D</code></pre><h4 id="全局下载指定包"><a href="#全局下载指定包" class="headerlink" title="全局下载指定包:"></a>全局下载指定包:</h4><pre><code>yarn global add webpacknpm install webpack -g</code></pre><h4 id="删除依赖包"><a href="#删除依赖包" class="headerlink" title="删除依赖包:"></a>删除依赖包:</h4><pre><code>yarn remove webpacknpm remove webpack -Syarn global remove webpacknpm remove webpack -g</code></pre><h4 id="运行项目中配置的script"><a href="#运行项目中配置的script" class="headerlink" title="运行项目中配置的script:"></a>运行项目中配置的script:</h4><pre><code>yarn run xxxnpm run xxx</code></pre><h4 id="查看某个包的信息"><a href="#查看某个包的信息" class="headerlink" title="查看某个包的信息:"></a>查看某个包的信息:</h4><pre><code>yarn info xxxnpm info xxx</code></pre><h4 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像:"></a>设置淘宝镜像:</h4><pre><code>yarn config set registry https://registry.npm.taobao.orgnpm config set registry https://registry.npm.taobao.org</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2019/08/25/node/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/08/25/node/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/08/09/work/%E5%91%A8%E6%8A%A5/"/>
      <url>/2019/08/09/work/%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="周报"><a href="#周报" class="headerlink" title="周报"></a>周报</h2><h3 id="2019-08-19—-2019-08-23"><a href="#2019-08-19—-2019-08-23" class="headerlink" title="2019-08-19—-2019-08-23"></a>2019-08-19—-2019-08-23</h3><h5 id="教师端"><a href="#教师端" class="headerlink" title="教师端"></a>教师端</h5><ol><li>性别选择问题渲染</li><li>校区选择,判断一个校区时候直接进入。</li><li>配置修改小程序后台配置老师帮appid,上传到体验版</li><li>修改课程详情接口<h4 id="教务端"><a href="#教务端" class="headerlink" title="教务端"></a>教务端</h4></li><li>个人中心资料页面，资料修改头像上传</li><li>校区切换</li><li>获取消息</li><li>首页页面修改</li></ol><hr><h3 id="2019年8月26"><a href="#2019年8月26" class="headerlink" title="2019年8月26"></a>2019年8月26</h3><h4 id="教务端-1"><a href="#教务端-1" class="headerlink" title="教务端"></a>教务端</h4><ol><li>课程详情页面。获取详情内容</li><li>课堂播报tab静态页面，课堂播报接口。</li><li>课堂播报详情、点赞、评论功能。</li><li>课程打卡状态处理，打卡页面重写，打卡详情重写。</li><li>打卡详情接口、学生选择列表静态</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Call</title>
      <link href="/2019/07/28/js/Call/"/>
      <url>/2019/07/28/js/Call/</url>
      
        <content type="html"><![CDATA[<h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><strong>用法</strong></p><ol><li>调用函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> dr.call() <span class="comment">//play</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Call可以改变函数this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o)</span><br></pre></td></tr></table></figure><p>此时这个函数的this就指向了o这个对象</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line">   <span class="built_in">console</span>.log(x+y);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// play</span></span><br><span class="line"><span class="comment">// &#123;name: "哈哈哈"&#125;</span></span><br><span class="line"><span class="comment">//  3</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      <span class="comment">//把子的this传入到父</span></span><br><span class="line">      <span class="comment">// this指向实例对象</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br></pre></td></tr></table></figure><ul><li><p>继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son. prototype = Father.prototype; <span class="comment">//这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Call </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2019/07/28/js/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/28/js/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h5 id="创建对象的三中方式"><a href="#创建对象的三中方式" class="headerlink" title="创建对象的三中方式"></a>创建对象的三中方式</h5><ol><li>利用new object()创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>利用 对象字面量创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>通过构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    <span class="keyword">this</span>.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);<span class="comment">//实例化</span></span><br></pre></td></tr></table></figure><h5 id="new在执行会做四件事"><a href="#new在执行会做四件事" class="headerlink" title="new在执行会做四件事"></a>new在执行会做四件事</h5></li><li><p>在内存创建一个空对象</p></li><li>让this指向这个对象</li><li>执行构造函数里面的代码，给这个新对象添加属性以及方法</li><li>返回这个新对象 ）</li></ol><h5 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h5><ul><li><p><strong>实例成员</strong>就是构造函数内部通过this添加的成员，<figure class="highlight plain"><figcaption><span>```sex```   sing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例成员**只能通过实例化的对象来访问</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">         console.log(zxy.name)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>静态成员</strong> 在构造函数本身上添加的的成员就是静态成员</p><ul><li>例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star.age=<span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员</strong>只能通过构造函数来访问</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.sex)<span class="comment">//能访问</span></span><br><span class="line"><span class="built_in">console</span>.log(zxy.sex)<span class="comment">//不能访问</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="prototype构造函数原型"><a href="#prototype构造函数原型" class="headerlink" title="prototype构造函数原型"></a>prototype构造函数原型</h5><blockquote><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。JavaScript规定,<strong>每一个构造函数都有一个prototype属性</strong>,指向另一个对象。注意这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有。<strong>我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.sex=sex;</span><br><span class="line">      <span class="comment">// this.sing=function()&#123;</span></span><br><span class="line">        <span class="comment">//   console.log("唱歌")</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">Star.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);</span><br><span class="line"> <span class="keyword">var</span> cj= <span class="keyword">new</span> Star(<span class="string">'cj'</span>,<span class="string">'男'</span>);</span><br><span class="line">zxy.sing===cj.sing   <span class="comment">//true</span></span><br><span class="line">zxy.sing() <span class="comment">//唱歌</span></span><br></pre></td></tr></table></figure><ol><li><p>原型是什么?</p><p> 一个对象,我们也称为prototype为原型对象</p></li><li><p>原型的作用是什么?</p><p>  共享方法。</p></li></ol><p>一般情况下,我们的公共属性定义到构造函数里面,公共的方法我们放到原型对象身上</p><h5 id="对象原型proto"><a href="#对象原型proto" class="headerlink" title="对象原型proto"></a>对象原型proto</h5><p><strong>对象都会有一个属性_proto</strong>_指向构造函数的prototype原型对象,之所以我们对象可以使用构造函数 prototype原型对象的属性和方法,就是因为对象有proto原型的存在。</p><ul><li><p>proto对象原型和 原型对象prototype是等价的*</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(cj.__proto__===Star.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>方法的查找规则:</p><p>首先先看ldh对象身上是否有sing方法,如果有就执行这个对象上的sing </p><p>如果么有sing这个方法,因为有一proto的存在,就去构造函数原型对象prototype身上去查找 sing这个方法</p><h5 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h5><p><strong>对象原型(proto )</strong>和<strong>构造函数( prototype)</strong>原型对象里面都有一个属性constructor属性, constructor我们称为构造函数，因为它指回构造函数本身。</p><p>作用 </p><p>constructor主要用于记录该对象引用于哪个构造函数,它可以让原型对象重新指向原来的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.proto_);</span><br><span class="line"><span class="built_in">console</span>.log(star.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(ldh. proto_.constructor);</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">star.prototype =&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>: star ,</span><br><span class="line">    sing: function()&#123;</span><br><span class="line">        <span class="built_in">console</span>. log(<span class="string">' 我 歌'</span>);&#125;,</span><br><span class="line">    movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span><span class="number">.1</span>og(<span class="string">'我会演电影);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><h5 id="JavaScript的成员查找机制-规则"><a href="#JavaScript的成员查找机制-规则" class="headerlink" title="JavaScript的成员查找机制(规则)"></a>JavaScript的成员查找机制(规则)</h5><ol><li>当访问一个对象的属性(包括方法)时,首先查找这个<strong>对象自身</strong>有没有该属性。</li><li>如果没有就查找它的原型(也就是proto指向的<strong>prototype原型对象</strong>)。</li><li>如果还没有就查找原型对象的原型(<strong>Object的原型对象</strong>)。</li><li>依此类推一直找到Object为止(<strong>null</strong> )。</li><li>proto对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线。</li></ol><p><img src="/assets/img/原型链.jpg" alt></p><h5 id="给Array添加自定义方法"><a href="#给Array添加自定义方法" class="headerlink" title="给Array添加自定义方法"></a>给Array添加自定义方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.xx=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxx"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> list.xx();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class类</title>
      <link href="/2019/07/28/js/Class/"/>
      <url>/2019/07/28/js/Class/</url>
      
        <content type="html"><![CDATA[<p><strong>类的本质</strong></p><ol><li>class本质还是function</li><li>类的所有方法都定义在类的prototype属性上</li><li>类创建的实例,里面也有proto-指向类的prototype原型对象</li><li>所以ES6的类它的绝大部分功能, ES5都可以做到,新的class写法只是让对象原型的写法更加清晰、更像面向对编程的语法而已。</li><li>所以ES6的类其实就是语法糖.</li><li>语法糖语法糖就是一种便捷写法.简单理解,有两种方法可以实现同样的功能,但是一种写法更加清晰、方便那么这个方法就是语法糖</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue样式绑定方式</title>
      <link href="/2019/07/22/Vue/%E6%A0%B7%E5%BC%8F/"/>
      <url>/2019/07/22/Vue/%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><ul><li>直接传递一个数组 这里的class需要用v-bind绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    .active&#123;</span><br><span class="line">      letter-spacing: 0.5em;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><ul><li>通过三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',flag?'thin':'']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ul><li>把样式放到对象里把key为样式名，把value值绑定到一个bool值上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',&#123;'thin':flag&#125;]"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><ul><li>传入一个对象本质跟第三种方法差不多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:flag,active:true,active:true&#125;"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active',flag?'thin':'']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">'classObj'</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      classObj:&#123;<span class="attr">red</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li><p>直接在元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-weight&apos;:200 &#125;&quot;&gt;变色&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>在data中引用到<code>:style</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :style="&#123;color:'red','font-weight':200 &#125;"&gt;变色&lt;/h1&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript"> <span class="keyword">let</span> vm =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el:<span class="string">'#app'</span>,</span></span><br><span class="line">     data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line"><span class="javascript">        color:<span class="string">'red'</span>,<span class="string">'font-weight'</span>:<span class="number">200</span> </span></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">      </span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三种绑定一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1,styleObj2 ]"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line">        color:'red','font-weight':200 </span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj2:&#123;</span><br><span class="line">        'font-size':'60px'</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令</title>
      <link href="/2019/07/21/Vue/Vue%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/07/21/Vue/Vue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="V-for"><a href="#V-for" class="headerlink" title="V-for"></a>V-for</h4><blockquote><p>组件中使用v-for需要绑定key</p></blockquote><ul><li><p>in后面可以放 数组，对象数组，对象，数字</p></li><li><p>循环普通数组</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;(item,i) in list &quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li><p>迭代数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;count in 10&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>可以渲染出带有标签的文本</li></ul><h4 id="v-if跟v-show"><a href="#v-if跟v-show" class="headerlink" title="v-if跟v-show"></a>v-if跟v-show</h4><ul><li>show控制显示隐藏需要频繁切换建议使用</li><li>if控制是否渲染页面是否存在这个节点</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul><li>缩写 是“:”</li><li>Vue的属性绑定机制</li><li>v-bind只能实现数据的单项绑定，只能从M绑定到V，无法实现数据的双向绑定</li></ul><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li>Vue提供的事件绑定机制</li><li>缩写是“@” </li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>只能在表单元素中使用</p></blockquote><ul><li><p>实现双向数据绑定</p></li><li><p>使用v-model可以实现表单元素和model中数据的双向数据绑定</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" v-model:value="msg" &gt;</span></span><br></pre></td></tr></table></figure><p>​    或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"msg"</span> &gt;</span><br></pre></td></tr></table></figure><ul><li><p>案例</p></li><li><p>正式开发中尽量少用eval()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span> <span class="attr">bu</span>&gt;</span></span><br><span class="line">    =</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span> @<span class="attr">focus</span>=<span class="string">"comp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      n1: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      n2: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      opt: <span class="string">'-'</span>,</span></span><br><span class="line"><span class="javascript">      result: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      list: [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      comp() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> result=<span class="keyword">this</span>.n1+<span class="keyword">this</span>.opt+<span class="keyword">this</span>.n2</span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.result= <span class="built_in">eval</span>(result)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// switch (this.opt) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '+':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) + Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '-':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) - Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '/':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) / Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '*':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) * Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   default:</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li>.stop阻止冒泡（ 里–》外）</li><li>.prevent阻止默认事件（）</li><li>.capture添加事件监听器时使用事件捕获模式（外–&gt;里）</li><li>.self只当事件在该元素（比如不是子元素）触发是触发回调(自己触发自己，)<ul><li>只会阻止自己冒泡，并不会阻止其他的冒泡</li></ul></li><li>.once事件只触发一次</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中常用的方法</title>
      <link href="/2019/07/19/js/%E6%95%B0%E7%BB%84/"/>
      <url>/2019/07/19/js/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发中数组的使用场景非常多, 这里就简单整理总结一些常用的方法;从改变原有数据的方法、不改变原有数组的方法以及数据遍历的方法三方面总结。</p></blockquote><h2 id="改变原有数组的方法"><a href="#改变原有数组的方法" class="headerlink" title="改变原有数组的方法"></a>改变原有数组的方法</h2><h3>splice() 添加/删除数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> item = a.splice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="comment">// 从0开始截取到第三个位置</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [4,5,6,7]</span></span><br><span class="line"><span class="keyword">let</span> item1 = a.splice(<span class="number">0</span>,<span class="number">3</span>,<span class="string">'添加'</span>); <span class="comment">// [4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ['添加',7]</span></span><br><span class="line"><span class="comment">// 从数组下标0开始，删除3个元素，并添加元素'添加'</span></span><br></pre></td></tr></table></figure><p></p><h3>sort() 数组排序</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">8</span>];</span><br><span class="line"> <span class="comment">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a-b;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [1,3,4,4,8,10,20,25];</span></span><br><span class="line"> <span class="comment">// 降序</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> b-a;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [25,20,10,8,4,4,3,1];</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>pop() 删除一个数组中的最后的一个元素</h3><p></p><p></p><h3>shift() 删除数组的第一个元素</h3><p></p><p></p><h3>push() 向数组的末尾添加元素</h3><p></p><p></p><h3>unshift()向数组开头添加元素</h3><p></p><p></p><h3>reverse()</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  a =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  a.pop();  <span class="comment">// 3, 返回被删除的元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [1,2]</span></span><br><span class="line">  a.shift(); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [2]</span></span><br><span class="line">  a.push(<span class="string">"末尾添加"</span>);  <span class="comment">// 2 ,返回数组长度</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) ; [<span class="number">2</span>,<span class="string">"末尾添加"</span>]</span><br><span class="line">  a.unshift(<span class="string">"开头添加"</span>); <span class="comment">// 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//["开头添加", 2, "末尾添加"]</span></span><br><span class="line">  a.reverse();   <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>copyWithin() 指定位置的成员复制到其他位置</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'zhang'</span>, <span class="string">'wang'</span>, <span class="string">'zhou'</span>, <span class="string">'wu'</span>, <span class="string">'zheng'</span>];</span><br><span class="line"> <span class="comment">// 1位置开始被替换, 2位置开始读取要替换的  5位置前面停止替换</span></span><br><span class="line"> a.copyWithin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"> <span class="comment">// ["zhang", "zhou", "wu", "zheng", "zheng"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6: fill() 填充数组</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>以上是9种会改变原数组的方法, 接下来是6种常用的不会改变原数组的方法</p></blockquote><h2 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h2><p></p><h3>join() 数组转字符串</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a= [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line"> <span class="keyword">let</span> str2=a.join(<span class="string">'+'</span>); <span class="comment">// 'hello+world'</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>cancat 合并两个或多个数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">  <span class="comment">//连接两个数组</span></span><br><span class="line">  <span class="keyword">let</span> newVal=a.concat(b); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6扩展运算符…合并数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> <span class="keyword">let</span> b = [ <span class="number">4</span>,...a, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"> <span class="built_in">console</span>.log(a,b);</span><br><span class="line"> <span class="comment">//[2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>indexOf() 查找数组是否存在某个元素，返回下标</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'啦啦'</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="literal">NaN</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦'</span>));  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦啦'</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES7 includes() 查找数组是否包含某个元素 返回布尔</h3><p></p><p></p><h3>indexOf方法不能识别NaN</h3><p></p><p></p><h3>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'OB'</span>,<span class="string">'Koro1'</span>,<span class="number">1</span>,<span class="literal">NaN</span>];</span><br><span class="line"> a.includes(<span class="literal">NaN</span>); <span class="comment">// true 识别NaN</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">100</span>); <span class="comment">// false 超过数组长度 不搜索</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">-3</span>);  <span class="comment">// true 从倒数第三个元素开始搜索</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>slice() 浅拷贝数组的元素</h3><p></p><blockquote><p>字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [&#123;<span class="attr">name</span>: <span class="string">'OBKoro1'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'zhangsan'</span>&#125;];</span><br><span class="line"> <span class="keyword">let</span> b = a.slice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(b, a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"OBKoro1"&#125;]  [&#123;"name":"OBKoro1"&#125;]</span></span><br><span class="line"> a[<span class="number">0</span>].name=<span class="string">'改变原数组'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(b,a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"改变原数组"&#125;] [&#123;"name":"改变原数组"&#125;]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用CSS样式</title>
      <link href="/2019/07/16/css/css1/"/>
      <url>/2019/07/16/css/css1/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS超出部分显示省略号"><a href="#CSS超出部分显示省略号" class="headerlink" title="CSS超出部分显示省略号"></a>CSS超出部分显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单行 */</span></span><br><span class="line"><span class="selector-class">.overflow</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行 */</span></span><br><span class="line"><span class="selector-class">.more_overflow</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line"><span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>; <span class="comment">/* 显示行数 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## <span class="selector-tag">css</span>元素垂直居中</span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.verticalcenter</span>&#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="banner自适应屏幕代码"><a href="#banner自适应屏幕代码" class="headerlink" title="banner自适应屏幕代码"></a>banner自适应屏幕代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;    </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">3000px</span>;<span class="comment">/*图片宽度*/</span>           </span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">1500px</span>;<span class="comment">/*图片宽度的一半*/</span>       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串常用操作</title>
      <link href="/2019/07/11/js/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/07/11/js/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="判断开头结尾"><a href="#判断开头结尾" class="headerlink" title="判断开头结尾"></a>判断开头结尾</h3><ul><li><b>startsWidth</b>判断以什么开头  </li><li><p><b>endsWidth</b>判断以什么结尾 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'https://www.4399.com'</span>; <span class="comment">//   alert(str.startsWith('a'))  //判断是否以'a'开头，返回bool值 endsWidth同理</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="判断包含"><a href="#判断包含" class="headerlink" title="判断包含"></a>判断包含</h3><ul><li><b>includes</b>判断是够包含某个字符串 返回bool值</li><li><b>indexOf</b>判断是否包含并且返回下标，不存在返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'123456'</span>;</span><br><span class="line">str.includes(<span class="string">'456'</span>) <span class="comment">//true</span></span><br><span class="line">str.includes(<span class="string">'46'</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">str.indexOf(<span class="string">"1"</span>) <span class="comment">//0 //存在</span></span><br><span class="line">str.indexOf(<span class="string">"45"</span>) <span class="comment">//3 //存在</span></span><br><span class="line">str.indexOf(<span class="string">"46"</span>) <span class="comment">//-1 //不存在</span></span><br></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><ul><li><b>slice</b></li><li><b>substring</b></li><li><b>substr</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'abcdef'</span>;</span><br><span class="line">str = str.slice(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line">str = str.substring(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line">str = str.substr(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line"><span class="comment">// 使用一个参数</span></span><br><span class="line">str = str.slice(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line">str = str.substring(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line">str = str.substr(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line"><span class="comment">// 使用两个参数</span></span><br><span class="line">str = str.slice(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取第二个到第四个之间的字符 cd</span></span><br><span class="line">str = str.substring(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取第二个到第四个之间的字符 cd 前下标</span></span><br><span class="line">str = str.substr(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取从第3个开始往后数4位之间的字符 cdef</span></span><br><span class="line"><span class="comment">// 使用两个负数</span></span><br><span class="line">str = str.slice(<span class="number">1</span>,<span class="number">-3</span>);<span class="comment">//截取第二个到倒数第三个</span></span><br><span class="line">str = str.substr(<span class="number">1</span>,<span class="number">-3</span>);<span class="comment">//不能为负数，若强行传递负数，会被当成0处理 ' ' #负数转换为0</span></span><br></pre></td></tr></table></figure><h3 id="字符串和数组相互转换"><a href="#字符串和数组相互转换" class="headerlink" title="字符串和数组相互转换"></a>字符串和数组相互转换</h3><ul><li><b>split</b></li><li><b>join</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"abc,abcd,aaa"</span>;</span><br><span class="line">t = str.split(<span class="string">","</span>);<span class="comment">// 在每个逗号(,)处进行分解  ["abc", "abcd", "aaa"]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"helloworld"</span>;</span><br><span class="line">t1 = str.split(<span class="string">''</span>);  <span class="comment">//["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]</span></span><br><span class="line"><span class="comment">//  数组转字符串</span></span><br><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">b = a.join(<span class="string">"-"</span>);      <span class="comment">//"0-1-2-3-4"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件</title>
      <link href="/2019/07/08/Vue/%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/07/08/Vue/%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="定义vue组件"><a href="#定义vue组件" class="headerlink" title="定义vue组件"></a>定义vue组件</h3><p>什么是组件:组件的出现,就是为了拆分Vue实例的代码量的,能够让我们以不同的组件,来划分不同的功能模块,将来我们需要什么样的功能,就可以去调用对应的组件即可组件化和模块化的不同:</p><ul><li>模块化:是从代码逻辑的角度进行划分的;方便代码分层开发,保证每个功能模块的职能单一</li><li>组件化:是从U1界面的角度进行组件的重用</li></ul><p><strong>全局</strong></p><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;!-- 驼峰通过 - 来连接--&gt;</span><br><span class="line">    &lt;my-comm&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-comm</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(<span class="string">'myComm'</span>, &#123;</span><br><span class="line">    template:<span class="string">`&lt;div&gt;这是一个组件&lt;/div&gt;`</span></span><br><span class="line">      <span class="comment">//一定要写个html标签包裹</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;mycomm1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">mycomm1</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  &lt;template id="tmp1"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;外部组件&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  Vue.component('mycomm1', &#123;</span></span><br><span class="line"><span class="regexp">    template:'#tmp1'</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  let vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>私有</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">      login:&#123;</span><br><span class="line">        template:&apos;&lt;h1&gt;私有的&lt;/h1&gt;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;login&gt;<span class="xml"><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  &lt;template  id="tmp1"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;私有&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  let vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: '#app',</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    components:&#123;</span></span><br><span class="line"><span class="regexp">      login:&#123;</span></span><br><span class="line"><span class="regexp">        template:'#tmp1'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件中的methods与data"><a href="#组件中的methods与data" class="headerlink" title="组件中的methods与data"></a>组件中的methods与data</h3><ol><li>组件可以有自己的data数据</li><li>组件的data和实例的data有点不一样,实例中的data可以为一个对象,但是组件中的data必须是一个方法</li><li>组件中的data除了必须为一个方法之外,这个方法内部,还必须返回一个对象才行跟data一样 </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;my-comm &gt;&lt;/my-comm&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomm1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomm1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'myComm'</span>, &#123;</span><br><span class="line">   template: <span class="string">`&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">   data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       msg: <span class="string">'ddd'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;my-comm&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-comm</span>&gt;</span></span></span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;my-comm&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-comm</span>&gt;</span></span></span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;my-comm&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-comm</span>&gt;</span></span></span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;template id="tmp1"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;外部组件:&#123;&#123;num&#125;&#125;&lt;/</span>h1&gt;</span><br><span class="line">      &lt;button @click=<span class="string">"add"</span>&gt;点击加<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    num: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  Vue.component(<span class="string">'myComm'</span>, &#123;</span><br><span class="line">    template: <span class="string">'#tmp1'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// return obj</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add()&#123;</span><br><span class="line">        <span class="keyword">this</span>.num++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: <span class="string">'hahah '</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script</span></span><br></pre></td></tr></table></figure><h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;button @click=<span class="string">"temp='my-comm1'"</span>&gt;登陆&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">     &lt;button @click="temp='my-comm2'"&gt;注册&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">     &lt;transition enter-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">"animated zoomIn"</span>  leave-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">"animated zoomOut"</span> :duration=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      enter:200,leave:500</span></span><br><span class="line"><span class="string">    &#125;"</span>&gt;</span><br><span class="line">     &lt;component :is=<span class="string">"temp"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id=<span class="string">"tmp1"</span>&gt;</span><br><span class="line">      &lt;h1&gt;登陆&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">  &lt;template id=<span class="string">"tmp2"</span>&gt;</span><br><span class="line">      &lt;h1&gt;注册&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  Vue.component('myComm1', &#123;</span></span><br><span class="line"><span class="regexp">    template: '#tmp1',</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  Vue.component('myComm2', &#123;</span></span><br><span class="line"><span class="regexp">    template: '#tmp2',</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  let vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: '#app',</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">      msg: 'hahah ',</span></span><br><span class="line"><span class="regexp">      temp:'my-comm1'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件化 </tag>
            
            <tag> Vue组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义指令</title>
      <link href="/2019/07/05/Vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/07/05/Vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>使用vue.dizective ()定义全局的指令 v-focus</li><li>参数1 :指令的名称,注意,在定义的时候,指令的名称前面,不需要加v-前缀 </li><li>但是:在调用的时候,必须在指令名称前加上v-前缀来进行调用 </li><li>参数2:是一个对象,这个对象身上,有一些指令相关的函数,这些函数可以在特定的阶段,执行相关的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"blue"</span> <span class="attr">v-bold</span> <span class="attr">v-fz</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"></span><br><span class="line">    inserted(el) &#123;</span><br><span class="line">      el.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  Vue.directive(<span class="string">'color'</span>, &#123;</span></span><br><span class="line">    bind(el, binding) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(binding);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(el.style.color = binding.value);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    inserted(el) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">//操作</span></span></span><br><span class="line">      el.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      blue: <span class="string">'blue'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">'bold'</span>: &#123;</span></span><br><span class="line">        bind(el, binding) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(binding, <span class="string">'私有的'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(el.style.fontWeight = <span class="string">"bold"</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="string">'fz'</span>:<span class="function">(<span class="params">el,binding</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//等同于把代码写到了 bind和update里面去</span></span></span><br><span class="line"><span class="javascript">el.style.fontSize=<span class="built_in">parseInt</span>(binding.value)+<span class="string">'px'</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
            <tag> 自定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配Rem</title>
      <link href="/2019/07/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E6%A8%A1%E6%9D%BF%20/"/>
      <url>/2019/07/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E6%A8%A1%E6%9D%BF%20/</url>
      
        <content type="html"><![CDATA[<h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageFontSize;</span><br><span class="line"><span class="keyword">var</span> clientWidth;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">    <span class="comment">// 手机旋转事件,大部分手机浏览器都支持 onorientationchange 如果不支持，可以使用原始的 resize</span></span><br><span class="line">    resizeEvt = <span class="string">"orientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>;</span><br><span class="line">  recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//clientWidth: 获取对象可见内容的宽度，不包括滚动条，不包括边框</span></span><br><span class="line">    clientWidth = docEl.clientWidth;</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">1440</span>) &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">1920</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth &gt; <span class="number">750</span>) &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">1440</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">750</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.style.fontSize = pageFontSize + <span class="string">"px"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  <span class="comment">//判断是否支持监听事件 ，不支持则停止</span></span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//注册翻转事件</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cli</title>
      <link href="/2019/07/05/Vue/cli/"/>
      <url>/2019/07/05/Vue/cli/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听</title>
      <link href="/2019/07/05/Vue/%E7%9B%91%E5%90%AC/"/>
      <url>/2019/07/05/Vue/%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="监听文本框数据改变"><a href="#监听文本框数据改变" class="headerlink" title="监听文本框数据改变"></a>监听文本框数据改变</h3><p>通过<code>@keyup</code>监听键盘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;one&quot; @keyup=&quot;getAll&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;two&quot; @keyup=&quot;getAll&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;all&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        one: &apos;&apos;,</span><br><span class="line">        two: &apos;&apos;,</span><br><span class="line">        all: &apos;&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getAll() &#123;</span><br><span class="line">          this.all = this.one + &apos;-&apos; + this.two</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"two"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        one: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        two: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        all: <span class="string">''</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line"><span class="javascript">        one: <span class="function"><span class="keyword">function</span> (<span class="params">newVal,oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(oldVal);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.all = newVal + <span class="string">'-'</span> + <span class="keyword">this</span>.two</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">       </span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监视路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">       <span class="string">'$route.path'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(newVal + <span class="string">'------'</span> + oldVal);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><h3 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h3><ul><li>计算属性,在引用的时候,一定不要加()去调用,直接把它当作普通属性去使用就好了;</li><li>只要计算属性,这个function内部,所用到的<strong>任何data中的数据</strong>发送了变化,就会立即重新计算这个计算属性的值</li><li>计算属性的求值结果,会被<strong>缓存</strong>起来,方便下次直接使用;如果计算属性方法中,所以来的任何数据,都没有发生过变化,则,不会重新对计算属性求值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"two"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"me"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        one: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        two: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        me:<span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="javascript">        all: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.me);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>  <span class="keyword">this</span>.one+<span class="string">'-'</span>+<span class="keyword">this</span>.two</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对比</strong></p><ol><li>computed属性的结果会被缓存,除非依赖的响应式属性变化才会重新计算。主要当作属性来使用;</li><li>methods方法表示一个具体的操,,主要书写业务逻辑;</li><li>watch一个对象,键是需要观察的表达式,值是对应回调函数。主要用来监听某些特定数据的变化,从而进行某些具体的业务逻辑操作;可以看作是computed和methods的结合体;</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监听 </tag>
            
            <tag> watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>export default和export</title>
      <link href="/2019/07/05/node/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/07/05/node/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><blockquote><p>ES6中导入模块,使用 import模块名称from ,模块标识符, import ,表示路径</p><p>在ES6中,使用export default和export向外露成员</p></blockquote><ul><li>ES6中导入模块,使用 import模块名称from ,模块标识符, import ,表示路径</li><li>在ES6中,使用<code>export default</code>和<code>export</code>向外露成员</li><li>在一个模块中,可以同时使用export default和export向外暴露成员</li></ul><p><strong>export default</strong></p><p>在一个模块中, <code>export detault</code>只允许向外暴露1次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  name:<span class="string">'dsd'</span>,</span><br><span class="line">  sd:<span class="string">'s'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1  <span class="keyword">from</span> <span class="string">'./aa.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(m1);</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><strong>export</strong>  </p><p>使用<code>export</code>向外暴露的成员只能通过<code>{}</code>来接收这种形式叫做 <strong>按需导出</strong></p><p><code>export</code>可以暴露多个成员，同时,如果某些成员,我们在import的时候,不需要,则可以不在<code>{}</code>定义</p><p>注意:使用<code>export</code>导出的成员,必须严格按照导出时候的名称,来使用 {} 按需接收</p><p>使用<code>export</code> 导出的成员,<strong>如果就想换个名称来接收</strong>,可以使用<code>as</code>来起名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  name:<span class="string">'dsd'</span>,</span><br><span class="line">  sd:<span class="string">'s'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b =&#123;</span><br><span class="line">  <span class="string">'zzzzzzz'</span>:<span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b1 =&#123;</span><br><span class="line">  <span class="string">'zzzzzzz'</span>:<span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1,&#123;b,b1 <span class="keyword">as</span> bs&#125;  <span class="keyword">from</span> <span class="string">'./aa.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(m1);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(bs);</span><br><span class="line"><span class="comment">//&#123;name: "dsd", sd: "s"&#125;</span></span><br><span class="line"><span class="comment">//&#123;zzzzzzz: 12&#125;</span></span><br><span class="line"><span class="comment">//&#123;zzzzzzz: 12&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> export </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断JS数据类型的四种方法</title>
      <link href="/2019/07/05/js/%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/07/05/js/%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> 判断数据类型 </tag>
            
            <tag> 检测类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/2019/07/05/Vue/%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/07/05/Vue/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ul><li><strong>后端路由</strong>:对于普通的网站,所有的超链接都是URL地址,所有的URL地址都对应服务器上对应的资源;</li><li><strong>前端路由</strong>:对于单页面应用程序来说,主要通过URL中的hash(#号)来实现不同页面之间的切换,同时, hash有一个特点: HTTP请求中不会包含hash相关的内容;所以,单页面程序中的页面跳转主要用hash实现</li><li>在单页面应用程序中,这种通过hash改变来切换页面的方式,称作前端路由(区别于后端路由) ;</li></ul><p><strong>基本使用</strong></p><ol><li>组件一定要在路由之前。不然页面会没有东西</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot; &gt;登陆&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link  to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">        var login = &#123;</span><br><span class="line">      template: &apos;&lt;div&gt;登陆组件&lt;/div&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var register = &#123;</span><br><span class="line">      template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    let routerObj= new VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123; path:&apos;/login&apos;,component:login, &#125;,</span><br><span class="line">    &#123; path:&apos;/register&apos;,component:register, &#125;,</span><br><span class="line">  ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    let vm = new Vue(&#123;</span><br><span class="line"> </span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      router:routerObj,</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">redirect</span>:<span class="string">'/login'</span>&#125;,</span><br></pre></td></tr></table></figure><h3 id="路由选中样式"><a href="#路由选中样式" class="headerlink" title="路由选中样式"></a>路由选中样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router-link-active //默认</span><br><span class="line">//自定义</span><br><span class="line">let routerObj = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">       ...</span><br><span class="line">      ],</span><br><span class="line">      linkActiveClass: 'myC'</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="路由定义参数"><a href="#路由定义参数" class="headerlink" title="路由定义参数"></a>路由定义参数</h3><p><strong>方式1</strong></p><ul><li>通过<code>$route.query</code>能拿到路由参数</li><li>具体的是在<code>query</code>里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login?id='10'"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>登陆组件&#123;&#123;$route.query.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line">      created() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.query.id);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/login'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login, &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register, &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">     </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      router: routerObj,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式2</strong></p><ul><li>通过<code>$route.query</code>能拿到路由参数</li><li>具体的在<code>params</code>对象里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/12"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>登陆组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line">      created() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.params.id);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/login'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/login/:id'</span>, <span class="attr">component</span>: login, &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register, &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">     </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      router: routerObj,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/login/12"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#home'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>登陆组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line">      created() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.params.id);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          path: <span class="string">'/home'</span>, <span class="attr">component</span>: home,</span></span><br><span class="line">          children: [</span><br><span class="line"><span class="javascript">            &#123; <span class="attr">path</span>: <span class="string">'login/:id'</span>, <span class="attr">component</span>: login, &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">component</span>: register, &#125;,</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      router: routerObj,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2019/07/05/Webpack/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/07/05/Webpack/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>#模板</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2019/07/05/js/1bbbbb/"/>
      <url>/2019/07/05/js/1bbbbb/</url>
      
        <content type="html"><![CDATA[<p>#模板</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配Rem</title>
      <link href="/2019/07/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF/REM/"/>
      <url>/2019/07/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF/REM/</url>
      
        <content type="html"><![CDATA[<h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageFontSize;</span><br><span class="line"><span class="keyword">var</span> clientWidth;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">    <span class="comment">// 手机旋转事件,大部分手机浏览器都支持 onorientationchange 如果不支持，可以使用原始的 resize</span></span><br><span class="line">    resizeEvt = <span class="string">"orientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>;</span><br><span class="line">  recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//clientWidth: 获取对象可见内容的宽度，不包括滚动条，不包括边框</span></span><br><span class="line">    clientWidth = docEl.clientWidth;</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">1440</span>) &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">1920</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth &gt; <span class="number">750</span>) &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">1440</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pageFontSize = <span class="number">100</span> * (clientWidth / <span class="number">750</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.style.fontSize = pageFontSize + <span class="string">"px"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  <span class="comment">//判断是否支持监听事件 ，不支持则停止</span></span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//注册翻转事件</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref传值与获取Dom</title>
      <link href="/2019/07/05/Vue/ref/"/>
      <url>/2019/07/05/Vue/ref/</url>
      
        <content type="html"><![CDATA[<h3 id="ref寻找dom元素"><a href="#ref寻找dom元素" class="headerlink" title="ref寻找dom元素"></a>ref寻找dom元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"zz"</span> &gt;</span>获取元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"zz1"</span> &gt;</span>获取元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      created()&#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getElement()&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.zz.innerText);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用ref获取子组件方法以及数据"><a href="#利用ref获取子组件方法以及数据" class="headerlink" title="利用ref获取子组件方法以及数据"></a>利用ref获取子组件方法以及数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"zz"</span> &gt;</span>获取子组件方法和data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">"son"</span> &gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> login = &#123;</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          msg:<span class="string">'x么恶魔'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show()&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"调用了"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="xml">      template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        dd:<span class="string">'我是父组件的值'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      created()&#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getElement()&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(this.$refs.zz.innerText);</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.son.msg=<span class="keyword">this</span>.dd);<span class="comment">//修改值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.son.show();</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        login</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ref </tag>
            
            <tag> 组件通讯 </tag>
            
            <tag> 子组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2019/07/05/Webpack/%E6%A8%A1%E6%9D%BF%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2019/07/05/Webpack/%E6%A8%A1%E6%9D%BF%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>#模板</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2019/07/05/Vue/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/07/05/Vue/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>#模板</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2019/07/05/node/Node.js%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/07/05/node/Node.js%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="Node-js有什么特点"><a href="#Node-js有什么特点" class="headerlink" title="Node.js有什么特点"></a>Node.js有什么特点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>异步非阻塞的I/O (I/O线程池)</strong> （文件/数据库）的读写</li><li><strong>特别适用于I/O密集型应用</strong></li><li><p><strong>事件循环机制</strong> </p></li><li><p><strong>单线程</strong> - 一个人多干活</p></li><li><strong>跨平台</strong></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>回调函数嵌套太多、太深(俗称回调地狱)</li><li>单线程,处理不好<strong>CPU密集型任务</strong> </li></ul><p><img src="https://img.jiuge.site/imgbox/20190825/lFWIl0woIA6y.png?imageslim" alt="mark"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>Web服务API</li><li>服务器渲染页面,提升速度</li><li>后端的Web服务,例如跨域、服务器端的请求。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node特点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论案例</title>
      <link href="/2019/07/05/Vue/%E8%AF%84%E8%AE%BA%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/07/05/Vue/%E8%AF%84%E8%AE%BA%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>#模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules//axios/dist/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/animate.css/animate.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .commitBox &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commit</span> @<span class="attr">func</span>=<span class="string">'getList'</span>&gt;</span><span class="tag">&lt;/<span class="name">commit</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">v-for</span>=<span class="string">"(item,i) in list"</span> <span class="attr">::key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span> 评论人 &#123;&#123;item.user&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.content&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"commitBox"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>评论人:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>评论内容:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>发表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> commit = &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        content: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        user: <span class="string">''</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    template: <span class="string">'#cn'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!(<span class="keyword">this</span>.content &amp;&amp; <span class="keyword">this</span>.user)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list =<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'list'</span>)||<span class="string">'[]'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> obj = &#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="attr">user</span>: <span class="keyword">this</span>.user, <span class="attr">content</span>: <span class="keyword">this</span>.content &#125;;</span></span><br><span class="line">        list.unshift(obj);</span><br><span class="line"><span class="javascript">        localStorage.setItem(<span class="string">'list'</span>,<span class="built_in">JSON</span>.stringify(list));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(list);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.content = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.user = <span class="string">''</span>;</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'func'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="attr">user</span>: <span class="string">'简单爱'</span>, <span class="attr">content</span>: <span class="string">'内容'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="attr">user</span>: <span class="string">'将小白'</span>, <span class="attr">content</span>: <span class="string">'内容'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="attr">user</span>: <span class="string">'礼拜'</span>, <span class="attr">content</span>: <span class="string">'内容'</span> &#125;,</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.getList();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getList()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = localStorage.getItem(<span class="string">'list'</span>)||[];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.list = <span class="built_in">JSON</span>.parse(list);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      commit</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子组件传值</title>
      <link href="/2019/01/05/Vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/01/05/Vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ol><li>组件中的所有pzops中的数据,都是通过父组件传递给子组件的 </li><li>props中的数据,都是只读的,无法重新赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;son :parentdata=<span class="string">'message'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span> </span><br><span class="line">    &lt;!-- parentdata作为子组件的接收值，</span><br><span class="line">      message为父组件数组作为传给子组件的值</span><br><span class="line">    简单来讲 把父组件message的值传给子组件son，son通过 props[<span class="string">'parentdata'</span>]接收</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">'hahah '</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      son:&#123;</span><br><span class="line">        props:[<span class="string">'parentdata'</span>],<span class="comment">//只可读不可写</span></span><br><span class="line">        template:<span class="string">`&lt;div&gt;&#123;&#123;parentdata&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父组件传递方法给子组件"><a href="#父组件传递方法给子组件" class="headerlink" title="父组件传递方法给子组件"></a>父组件传递方法给子组件</h3><ul><li><p>父组件可以取到子组件的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;temp1 @func=<span class="string">'console'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">temp1</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;template id="temp1"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      这是子组件</span></span><br><span class="line"><span class="regexp">      &lt;button @click="dd(data)"&gt;点击打印&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">let temp1=&#123;</span></span><br><span class="line"><span class="regexp">  template:'#temp1',</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      data:&#123;</span></span><br><span class="line"><span class="regexp">        age:188888,</span></span><br><span class="line"><span class="regexp">        name:'zz'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    dd(e)&#123;</span></span><br><span class="line"><span class="regexp">      this.$emit('func',this.data)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  let vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: '#app',</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">    console(data)&#123;</span></span><br><span class="line"><span class="regexp">      console.log("打印了父组件的方法"+data.age);</span></span><br><span class="line"><span class="regexp">      this.obj=data;</span></span><br><span class="line"><span class="regexp">      console.log(this.obj);</span></span><br><span class="line"><span class="regexp">      console.log(vm);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    components:&#123;</span></span><br><span class="line"><span class="regexp">      temp1,</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数进阶</title>
      <link href="/2018/07/27/js/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/07/27/js/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h4><p><strong>函数定义方式</strong></p><ul><li><p>函数声明方式function关键字(命名函数)</p></li><li><p>函数表达式(匿名函数)</p></li><li><p>Function里面参数都必须是字符串格式</p></li><li><p>第三种方式执行效率低,也不方便书写,因此较少使用</p></li><li><p>所有函数都是Function的实例(对象)</p></li><li><p>函数属于对象</p></li><li><p>new Function（’par1’,’par2’…’par..‘,’函数体’）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'console.log(a+b)'</span>)</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>函数调用方式</strong></p><ol><li>普通函数</li><li>对象的方法</li><li>构造函数</li><li>绑定事件函数</li><li>定时器函数</li><li>立即执行函数</li></ol><h4 id="函数this的指向"><a href="#函数this的指向" class="headerlink" title="函数this的指向"></a>函数this的指向</h4><blockquote><p>这些this的指向,是当我们调用函数的时候确定的。调用方式的不同决定了this的指向不同一般指向我们的调用者</p><table><thead><tr><th>调用方式</th><th style="text-align:left">this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td style="text-align:left">window</td></tr><tr><td>构造函数调用</td><td style="text-align:left">实例对象原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td style="text-align:left">该方法属于所属对象</td></tr><tr><td>事件绑定方法</td><td style="text-align:left">事件绑定对象</td></tr><tr><td>定时器函数</td><td style="text-align:left">window</td></tr><tr><td>立即执行函数</td><td style="text-align:left">window</td></tr></tbody></table></blockquote><p> JavaScript为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部this的指向问题,常用的有bind.call, apply三种方法。</p><ol><li><p><strong>call方法</strong></p><ul><li>改变this指向</li><li>调用函数 </li></ul><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">  Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">       <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure></li><li><p><strong>apply</strong></p><p>apply方法调用一个函数。简单理解为调用函数的方式,但是它可以改变函数的this指向。</p><p><code>fun.apply(thisArg,[argArray])</code></p><ul><li>thisArg :在fun函数运行时指定的this值 </li><li>argsArray :传递的值,必须包含在<strong>数组</strong>里面</li><li>返回值就是函数的返回值,因为它就是调用函数</li></ul><ol><li>也是调用函数第二个可以改变函数内部的this指向</li><li>但是他的参数必须是数组(伪数组)</li><li>apply的主要应用比如说我们可以利用apply借助于数学内置对象求最大值 </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>,<span class="number">5</span>,<span class="number">48884</span>,<span class="number">4</span>,<span class="number">4545</span>,];</span><br><span class="line">   <span class="keyword">let</span> res= <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,list);</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">//48884</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>bind</strong></p><p>bind()方法<strong>不会调用函数</strong>。但是能改变函数内部this指向</p><p><code>fun.bind(thisArg,arg1,arg2...)</code></p><ul><li>thisArg :在fun函数运行时指定的this值 </li><li>arg1 , arg2:传递的其他参数</li><li>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">'进阶'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newFn = fn.bind(o);</span><br><span class="line">    fn(); <span class="comment">//指向 --&gt;window</span></span><br><span class="line">    newFn(); <span class="comment">//指向o</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"> <span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">'进阶'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newFn = fn.bind(o,<span class="string">'哈哈'</span>,<span class="string">'嘻嘻'</span>);</span><br><span class="line">    fn(); <span class="comment">//指向 --&gt;window</span></span><br><span class="line">    newFn(); <span class="comment">//指向o</span></span><br></pre></td></tr></table></figure><ol><li>返回的是原函数改变this之后产生的新函数</li><li>如果有的函数我们<strong>不需要立即调用</strong> 但是又想改变这个函数内部的this指向此时用bind</li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  btn =<span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>)[<span class="number">0</span>]</span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.disabled=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.value=<span class="string">'禁用'</span></span><br><span class="line">  <span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//   this.disabled=false</span></span><br><span class="line">  <span class="comment">// &#125;,3000)</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.disabled=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="string">'点击'</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>),<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.扩展</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"点击1"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"点击2"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"点击3"</span>&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">'禁用'</span>+(i+<span class="number">1</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.disabled = <span class="literal">false</span></span><br><span class="line">          <span class="keyword">this</span>.value = <span class="string">'点击'</span>+(i+<span class="number">1</span>)</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>), <span class="number">3000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><strong>相同点</strong>：</p><ol><li>都可以改变函数内部this指向</li></ol><p><strong>区别点</strong>:</p><ol><li>call和apply会调用函数,并且改变函数内部this指向</li><li>call和apply传递的参数不一样,call传递参数arg1, arg2.形式apply<strong>必须数组</strong>形式[arg] </li><li>bind不会调用函数,可以改变函数内部this指向</li></ol><p><strong>主要应用场景</strong>:</p><ol><li>call常做继承.</li><li>apply经常跟数组有关系.比如借助于数学对象实现数组最大值最小值</li><li>bind不调用函数,但是还想改变this指向,比如改变定时器内部的this指向</li></ol><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>JavaScript除了提供正常模式外,还提供了严格模式(strictmode ) , ES5的严格模式是采用具有限制性 Javascript变体的一种方式,即在严格的条件下运行IS代码。</p><ol><li>消除了Javascript语法的一些不合理、不严谨之处,减少了一些怪异行为。</li><li>消除代码运行的一些不安全之处,保证代码运行的安全。</li><li>提高编译器效率,增加运行速度。</li><li>禁用了在ECMAScript的未来版本中可能会定义的一些语法,为未来新版本的Javascript做好铺垫。比如一些保留字如: class, enum, export, extends, import, super 不能做变量名</li></ol><p><strong>this指向问题</strong></p><ol><li>以前在全局作用域函数中的this指向window对象。</li><li>严格模式下全局作用域中函数中的this是undefined.</li><li>以前构造函数时不加new也可以调用,当普通函数, this指向全局对象</li><li>严格模式下,如果构造函数不加new调用, thi指向undefined给他赋值会报错</li><li>new实例化的构造函数指向创建的对象实例。</li><li>定时器this还是指向window</li><li>事件.对象指向调用者</li></ol><p><strong>函数变化</strong></p><ol><li>函数不能有重名的<strong>参数</strong>。</li><li>函数必须声明在顶层新版本的JavaScript会引入”块级作用域” (ES6中已引入)。为了与新版本接轨,不允许在非函数的代码块内声明函数。</li></ol><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote><p><strong>高阶函数</strong>是对其他函数进行操作的函数,它<strong>接收函数作为参数</strong>或<strong>将函数作为返回值输出。</strong></p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"最后调用"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">    callback &amp;&amp; callback()</span><br><span class="line">  &#125;</span><br><span class="line">  fn(<span class="number">1</span>, <span class="number">2</span>, fn1);</span><br></pre></td></tr></table></figure><ul><li>此时fn就是一个高阶函数</li><li>函数也是一种数据类型,同样可以作为参数,传递给另外一个参数使用。最典型的就是作为回调函数。</li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>闭包(closure )指有权访问另一个函数作用域中变量的函数—– JavaScript高级程序设计。</p></blockquote><p>简单理解就是,一个作用域可以访问另外一个函数内部的局部变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line">     <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(num);</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">var</span> f=  fn();</span><br><span class="line">  f()</span><br><span class="line"><span class="comment">//类似于</span></span><br><span class="line">f= <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(num);</span><br><span class="line">     &#125;;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p><strong>闭包的作用</strong>：延伸了变量的作用范围</p><p><strong>闭包案例</strong></p><ol><li>循环注册点击事件</li></ol><p>注意这里for里面是用var声明的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lis= <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">   (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     lis[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(i);</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>循环setTimeout 3秒之后打印出li元素的所有内容</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> lis= <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(lis[a].innerHTML);</span><br><span class="line"> &#125;,<span class="number">3000</span>)</span><br><span class="line">  &#125;)(i);</span><br><span class="line"> </span><br><span class="line"> &#125;<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure><p><strong>闭包总结</strong></p><ol><li>什么是闭包</li></ol><p>​    闭包是一个函数(一个作用域可以访问另外一个函数的局部变量)</p><ol start="2"><li>闭包的作用是是嗯嘛</li></ol><p>延伸变量的作用范围</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><strong>什么是递归?</strong></p><ul><li><p>如果<strong>一个函数在内部可以调用其本身</strong>,那么这个函数就是<strong>递归函数</strong>。</p></li><li><p>简单理解:函数内部自己调用自己这个函数就是递归函数</p></li><li><p>递归函数的作用和循环效果一样</p></li><li><p>由于递归很容易发生”栈溢出”错误(stackoverflow ) ,所以必<strong>须要加退出条件return</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     num++;</span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line">     <span class="keyword">if</span> (num &gt;= <span class="number">10</span>) <span class="keyword">return</span> num</span><br><span class="line">     fn()</span><br><span class="line">   &#125;</span><br><span class="line">   fn();</span><br></pre></td></tr></table></figure><ol><li>利用递归求阶乘</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> n * fn(n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    f = fn(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(f);</span><br></pre></td></tr></table></figure><ol start="2"><li>利用递归函数求斐波那契数列(兔子序列)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>)</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log( fb(<span class="number">6</span>));<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><p><strong>浅拷贝</strong></p><ol><li>浅拷贝<strong>只是拷贝最外面一层</strong>,更深层次对象级别的只拷贝引用.</li><li>浅拷贝只是拷贝最外面一层，更深的只是拷贝的地址</li><li>Object.assign(target….sources) es6新增方法可以浅贝</li></ol><p><strong>深拷贝</strong></p><ol><li>深拷贝拷贝多层每一级别的数据都会拷贝</li><li>深拷贝会复制一个空间/地址</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> od = &#123;</span><br><span class="line">  name:<span class="string">'18'</span>,</span><br><span class="line">  sex:&#123;</span><br><span class="line">    sex:<span class="number">88888</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ne=&#123;&#125;</span><br><span class="line"><span class="comment">//封装</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">newobj, oldobj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = oldobj[k];</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          deepCopy(newobj[k], item)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">          newobj[k] = &#123;&#125;;</span><br><span class="line">          deepCopy(newobj[k], item)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          newobj[k]=item</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">deepCopy(ne,od);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(od);</span><br><span class="line"><span class="built_in">console</span>.log(ne);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据交互</title>
      <link href="/2018/07/11/data/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
      <url>/2018/07/11/data/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><ul><li>无状态</li><li>连接过程：连接-接受-发送请求</li><li>消息分成两部分，请求头&lt;=32K、请求体&lt;=2G</li></ul><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><ul><li>最重要</li></ul><ol><li>action-提交到的位置</li><li>method–GET/POST/PUT/DELETE/HEAD<ul><li>GET:  把数据放在url传输     数据量很小、缓存。获取东西</li><li>POST: 把数据放在请求体里面  数据量大、不会缓存。发送东西，大量发送。</li><li>PUT:发送东西，大量发送。</li><li>DELETE:删除。</li><li>HEAD:让服务器只发送头回来就行(不需要内容)</li></ul></li><li>name 名字</li><li>enctype 上传文件需要设置的</li></ol><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul><li>官方、不能跨域</li><li>单向</li><li>ajax好:<ol><li>用户体检好，性能高<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li></ol><ul><li>ajax-<h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2></li></ul></li><li>民间、能跨域 不推荐</li><li>破坏了http自身的设计<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2></li><li>双向-数据实时性</li><li>html5 IE9+ </li><li>用的非常广</li><li>基于http</li><li>跨域</li><li>原生麻烦<h4 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io:"></a>socket.io:</h4></li></ul><ol><li>兼容的？</li><li>二进制数据</li></ol><ul><li>怎么用</li><li>聊天室</li><li>视频点播<h4 id="socket-io-1"><a href="#socket-io-1" class="headerlink" title="socket.io"></a>socket.io</h4></li><li><p>安装<code>npm i socket.io  -D</code></p><h4 id="websocket聊天室"><a href="#websocket聊天室" class="headerlink" title="websocket聊天室"></a>websocket聊天室</h4><ol><li>用户注册、登陆</li><li>发言 </li><li>离线消息</li></ol><ul><li>数据<ul><li>用户信息库</li><li>消息数据库</li></ul></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li>关系形数据库—— MySQL、Oracle</li></ol><ul><li>优点 : 强大</li><li>缺点 : 性能低</li></ul><ol start="2"><li>文件形数据库—— SQLite</li></ol><ul><li>优点 : 简单</li><li>缺点 : 支撑不了庞大的应用、没法储存特别多的数据</li></ul><ol start="3"><li>文档形数据库—— MongoDB</li></ol><ul><li>优点 : 直接存储对象本身</li><li>缺点 : 不够严谨、性能偏低</li></ul><ol start="4"><li>空间形数据库—— 坐标、位置 .. GIS</li></ol><h4 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h4><p>类型:</p></li><li>数字 <ul><li>整数 thinyint(-128~127或者0~255)、int(21亿或43亿);</li><li>浮点数 float（保留到小数点8位） 、 double（308）</li></ul></li><li><p>字符串</p><ul><li>小字符串 varchar（255）</li><li>大字符串 text（2G）</li></ul><p>主键:</p></li><li><p>唯一</p></li><li>性能高</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 请求数据 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据遍历</title>
      <link href="/2018/07/08/js/%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
      <url>/2018/07/08/js/%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="map-映射-一个对一个"><a href="#map-映射-一个对一个" class="headerlink" title="map      映射    一个对一个"></a>map      映射    一个对一个</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="number">12</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">60</span>,<span class="number">99</span>,<span class="number">8</span>]</span><br><span class="line"> [<span class="string">"不及格"</span>,<span class="string">"不及格"</span>,<span class="string">"及格"</span>,<span class="string">"及格"</span>,<span class="string">"及格"</span>,<span class="string">"不及格"</span>];</span><br><span class="line"><span class="comment">// 1.使arr中数字乘以2，输出结果</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//(3) [24, 10, 16]</span></span><br><span class="line"><span class="comment">// ////////////////////</span></span><br><span class="line"><span class="comment">// 2.分数大于等于60的输出及格,小于60的输出不及格</span></span><br><span class="line"><span class="keyword">let</span> mark = [<span class="number">15</span>, <span class="number">88</span>, <span class="number">76</span>, <span class="number">60</span>, <span class="number">55</span>];</span><br><span class="line"><span class="keyword">let</span> markResult = mark.map(<span class="function"><span class="params">item</span>=&gt;</span> item &gt;= <span class="number">60</span> ? <span class="string">"及格"</span> : <span class="string">"不及格"</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(markResult);<span class="comment">//["不及格", "及格", "及格", "及格", "不及格"]</span></span><br></pre></td></tr></table></figure><h2 id="reduce-汇总-一堆出来一个"><a href="#reduce-汇总-一堆出来一个" class="headerlink" title="reduce   汇总  一堆出来一个"></a>reduce   汇总  一堆出来一个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.算个总数</span></span><br><span class="line">  [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]  =&gt; <span class="number">60</span>;</span><br><span class="line"><span class="comment">//  2.算个平均数</span></span><br><span class="line">  [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]  =&gt; <span class="number">20</span>;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>];</span><br><span class="line"> <span class="keyword">let</span> arrRes = arr.reduce(<span class="function">(<span class="params">tmp, item, index</span>) =&gt;</span> tmp + item)</span><br><span class="line"><span class="built_in">console</span>.log(arrRes);<span class="comment">//6785</span></span><br><span class="line"><span class="comment">//2.算个平均数</span></span><br><span class="line"><span class="keyword">let</span> avgRes = arr.reduce(<span class="function">(<span class="params">tmp, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index != arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tmp + item</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tmp + item) / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(avgRes);<span class="comment">//1357</span></span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p><code>array.filter(function(currentValue,index,arr){})</code></p><ul><li>filter方法创建一个新的数组,新数组中的元素是通过检查指定数组中符合条件的所有元素,<strong>主要用于筛造数组</strong></li><li><strong>注意它直接返回一个新数组</strong></li><li>不会收到return的影响</li><li>currentValue:数组当前项的值</li><li>index数组当前项的索</li><li>arr:数组对象本身</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.算出能被3整除的数</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//(3) [12, 99, 30]</span></span><br><span class="line"><span class="comment">// 2.价格大于10000的数据</span></span><br><span class="line"><span class="keyword">let</span> arrz=[</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'男鞋'</span>,<span class="attr">price</span>:<span class="number">650</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'女鞋'</span>,<span class="attr">price</span>:<span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'男装'</span>,<span class="attr">price</span>:<span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'女装'</span>,<span class="attr">price</span>:<span class="number">10000</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pres = arrz.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.price&gt;=<span class="number">10000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pres);<span class="comment">// &#123;title:'女鞋',price:15000&#125;, &#123;title:'女装',price:10000&#125;</span></span><br></pre></td></tr></table></figure><h5 id="fofEach-循环-迭代"><a href="#fofEach-循环-迭代" class="headerlink" title="fofEach  循环(迭代)"></a>fofEach  循环(迭代)</h5><ul><li>orEach这种方法也有一个小缺陷：你不能使用break语句中断循环，也不能使用return语句返回到外层函数。</li></ul><p><code>forEach(function(value,索引，数组本身){})</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line"> arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span> <span class="built_in">console</span>.log(item))</span><br></pre></td></tr></table></figure><h5 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h5><p><code>array.some(function(currentValue,index,arr))</code></p><ul><li>some方法用于检测数组中的元素是否满足指定条件,通俗点查找数组中是否有满足条件的元素</li><li>注意它返回值是布尔值,<strong>如果查找到这个元素,就返回true,如果查找不到就返回false</strong>.</li><li>如果找到第一个满足条件的元素,则终止循环不在继续查找</li><li>currentValue:数组当前项的值 </li><li>index:数组当前项的索引 </li><li>arr :数组对象本身</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line">     <span class="keyword">let</span> res=  arr.some(<span class="function"><span class="params">item</span>=&gt;</span>item==<span class="number">12</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(res); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">111</span>,<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> res = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"找到来"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">//找到了记得return 不然他会找把整个数组找完</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"寻找"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><h2 id="普通for循环，经常用的数组遍历"><a href="#普通for循环，经常用的数组遍历" class="headerlink" title="普通for循环，经常用的数组遍历"></a>普通for循环，经常用的数组遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><ul><li>优化版for循环:使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j= <span class="number">0</span>, len = arr.length; j&lt;len; j++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 打印结果 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><h2 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h2><ul><li><p>map即是 “映射”的意思 用法与 forEach 相似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,i</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="string">'--'</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// 0--1</span></span><br><span class="line"><span class="comment">// 1--3 </span></span><br><span class="line"><span class="comment">// 2--45 </span></span><br><span class="line"><span class="comment">// 3--7 </span></span><br><span class="line"><span class="comment">// 4--dd</span></span><br></pre></td></tr></table></figure><ul><li>map遍历支持使用return语句，支持return返回值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">var</span> b= arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,i</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="string">'--'</span>+value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// b返回 (5) [1, 3, 45, 7, "dd"]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="for-of遍历-是ES6新增功能"><a href="#for-of遍历-是ES6新增功能" class="headerlink" title="for-of遍历 是ES6新增功能"></a>for-of遍历 是ES6新增功能</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果: 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><ul><li>for-of这个方法避开了for-in循环的所有缺陷</li><li>与forEach()不同的是，它可以正确响应break、continue和return语句</li><li>for-of循环不仅支持数组，还支持大多数类数组对象</li><li>for-of循环也支持字符串遍历</li></ul><p> <img src="/assets/img/dd.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5中新增的方法</title>
      <link href="/2018/07/08/js/%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/07/08/js/%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><p><strong>Object.defineProperty（）</strong>定义对象中新属性或修改原有的属性。</p><p><code>Object.defineProperty（obj,prop,des）</code></p><ul><li>obj:必需。目标对象</li><li>prop :必需。需定义或修改的属性的名</li><li>descriptor :必需。目标属性所拥有的特性<ul><li>Object.defineProperty()第三个参数descriptor说明:以对象形式(}书写</li><li>value:设置属性的值默认为undefinedwritable:值是否可以重写truel false默认为false</li><li>enumerable:目标属性是否可以被枚举。true | false默认为false</li><li>configurable:目标属性是否可以被删除或是否可以再次修改特性true | false默认为false</li></ul></li></ul><p><strong>Object.keys()</strong>用于获取对象自身所有的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'小米'</span>,</span><br><span class="line">    age:<span class="number">9</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="built_in">Object</span>.keys(obj));<span class="comment">//["name", "age"]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5新增方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量let与常量const</title>
      <link href="/2018/07/05/js/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
      <url>/2018/07/05/js/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="变量let与常量const"><a href="#变量let与常量const" class="headerlink" title="变量let与常量const"></a>变量let与常量const</h4><ul><li>ES5 var 问题<ul><li>可以重复声明</li><li>无法限制修改</li><li>没有块级作用域</li></ul></li><li>ES6 变量 let<ul><li>不能重复声明</li><li>可以重新定义</li><li>有块级作用域</li></ul></li><li>ES6 常量 const<ul><li>不能重复声明</li><li>不可以重新定义</li><li>有块级作用域</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2018/07/05/js/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/05/js/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><p>之前的函数是这样写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 名字(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//  code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而ES6是↓</p></li><li><p>箭头函数</p><ul><li>如果只有一个参数，()可以省略</li><li>如果只有一个return {}可以省略 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload= <span class="function"><span class="params">()</span>=&gt;</span> alert(<span class="string">'vb'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数-有参数"><a href="#函数-有参数" class="headerlink" title="函数-有参数"></a>函数-有参数</h4><ul><li>参数扩展/展开</li></ul><ol><li><p>收集参数</p><ul><li>收集剩余的参数</li><li>…args必须是最后一个<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arg</span>(<span class="params">a,b,...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(...args);</span><br><span class="line">&#125;</span><br><span class="line">arg(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">10</span>); </span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 5 7 9 2 10</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>展开参数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">55</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zhan</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">zhan(...array) </span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//55</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=[<span class="number">10</span>,<span class="number">22</span>,<span class="number">52</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="comment">// (6) [1, 2, 5, 10, 22, 52]</span></span><br><span class="line"><span class="comment">//////////////////////////////////</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  fadd(...args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fadd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">  a(<span class="number">1</span>,<span class="number">6</span>)<span class="comment">//7</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>默认参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">a,b=<span class="number">1</span>,c=<span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,c); </span><br><span class="line"> &#125;</span><br><span class="line"> m(<span class="number">1</span>)  <span class="comment">//1 1 10</span></span><br><span class="line"> m(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//1 2 10</span></span><br><span class="line"> m(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">// 1 2 5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用操作</title>
      <link href="/2018/07/05/GIt%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/07/05/GIt%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>git config --global user.name &quot;你的账号&quot;</code></p><p><code>git config --global user.email &quot;你的邮箱&quot;</code></p><p> 在文件中初始化Git（创建Git仓库）<code>git init</code></p><h3 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h3><ol><li>创建文件 <code>git touch a1.html</code> </li><li>文件提交到暂存区 <code>git add a1.html</code></li><li>文件提交描述 <code>git commit -m &#39;描述&#39;</code></li><li>查看文件状态 <code>git status</code></li><li>提交到仓库 <code>git push</code></li></ol><h3 id="Git克隆操作"><a href="#Git克隆操作" class="headerlink" title="Git克隆操作"></a>Git克隆操作</h3><p> <code>git clone 仓库地址</code></p><h3 id="新仓库添加本地文件"><a href="#新仓库添加本地文件" class="headerlink" title="新仓库添加本地文件"></a>新仓库添加本地文件</h3><ul><li>新建<b>码云/github</b>仓库</li><li>本地新建文件夹</li><li>新建的文件夹，点击鼠标右键，选择git bash here <code>git init</code></li><li>复制项目地址</li><li>然后<code>git remote add origin 地址</code></li><li>继续输入<code>git pull origin master</code> 命令，将码云上的仓库pull到本地文件夹</li><li>使用<code>git add -A  （. 表示所有的）或者 git add + 文件名</code>            // 将文件保存到缓存区</li><li>使用<code>git commit -m</code>‘新添加的文件内容描述’     //添加文件描述</li><li>使用<code>git push origin master</code> ，将本地仓库推送到远程仓库</li><li>ok了</li></ul><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ul><li><p>找到<code>gitee/github</code>分支-新建分支或者<code>git checkout -b 新分支名</code></p></li><li><p>本地<code>git pull</code>拉取最新代码</p></li><li><p>查看分支<code>git branch</code></p></li><li><p>切换本地分支<code>git checkout 分支名</code></p></li><li><p>切换分支<code>git checkout 分支名字</code></p></li><li><p>合并线上分支到master </p><ol><li>切换到master <code>git checkout master</code></li><li>合并<code>git merge origin/分支名</code></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="/2018/07/05/js/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2018/07/05/js/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>模块-组件-元件</li><li>模块：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  - 定义: model.js</span></span><br><span class="line">     define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</span><br><span class="line">    exports.a = <span class="number">12</span>;</span><br><span class="line">     exports.b=<span class="number">5</span>;</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//   - 调用:  xx.html</span></span><br><span class="line">seajs.use([<span class="string">'xxxx.js'</span>,<span class="string">'xxx.js'</span>,...],<span class="function"><span class="keyword">function</span>(<span class="params">model1,model2,...</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>民间的–sea.js 、require.js</li></ol><ul><li>CMD、AMD规范</li><li><p>区别：</p><p>html-&gt;js   use</p><p>js-&gt;  js   require</p></li></ul><ol start="2"><li><p>node.js模块化</p><ol><li>没有define</li><li>exports、require、module</li><li>引用自定义模块 1) 放到node_modules里,   2)前面加上./</li></ol><ul><li>引入: let mod = require(‘./aaa.js’)</li><li>输出: exports.xx = xxx; module.exports={x,x,x,y}</li></ul></li><li><p>ES6模块化</p><ul><li>import</li><li>export</li></ul><ul><li>引入:impo mod from = ‘./xx.js’</li><li>输出:expor{x,x,x}</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2018/07/05/js/Promise/"/>
      <url>/2018/07/05/js/Promise/</url>
      
        <content type="html"><![CDATA[<ul><li>异步: 操作直接没啥关系,同时进行多个操作，代码复杂。</li><li>同步: 同时只能做一件事 代码简单。</li><li>本质：等待异步操作结束<ul><li>当状态改变的时候—调用之前挂起的then队列</li><li>then的时候直接执行对应的函数，并且参数给人家。</li></ul></li></ul><h4 id="Promise-用法"><a href="#Promise-用法" class="headerlink" title="Promise 用法"></a>Promise 用法</h4><h5 id="Promise-all-一个都不能错"><a href="#Promise-all-一个都不能错" class="headerlink" title="Promise.all  一个都不能错"></a>Promise.all  一个都不能错</h5><h5 id="Promise-race-只要有一个对"><a href="#Promise-race-只要有一个对" class="headerlink" title="Promise.race 只要有一个对"></a>Promise.race 只要有一个对</h5><ol><li><p>一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//异步代码</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//resolve 成功</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//reject 失败</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">"data/tt.txt"</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                    resolve(data)</span><br><span class="line">                &#125;,</span><br><span class="line">                error(err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        p.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'成功'</span> + data)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用成功</span></span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(err);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'失败'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//失败了</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>多个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">createPromise</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//异步代码</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//resolve 成功</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//reject 失败</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line">                    url,</span><br><span class="line"><span class="javascript">                    dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                        resolve(data)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error(err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">            createPromise(<span class="string">'data/tt.txt'</span>),</span></span><br><span class="line"><span class="javascript">            createPromise(<span class="string">'data/jj.txt'</span>)</span></span><br><span class="line"><span class="javascript">        ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 全部成功</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> [arr1, arr2] = arr;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr1);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//失败一个或多个</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'失败'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(err);</span></span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123; <span class="attr">url</span>: <span class="string">'data/tt.txt'</span>, <span class="attr">dataType</span>: <span class="string">"json"</span> &#125;),</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123; <span class="attr">url</span>: <span class="string">'data/jj.txt'</span>, <span class="attr">dataType</span>: <span class="string">"json"</span> &#125;)</span></span><br><span class="line">        ])</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>jq中的promise</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;<span class="attr">url</span>:<span class="string">'data/tt.txt'</span>,<span class="attr">dataType</span>: <span class="string">"json"</span>&#125;),</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;<span class="attr">url</span>:<span class="string">'data/jj.txt'</span>,<span class="attr">dataType</span>: <span class="string">"json"</span>&#125;)</span></span><br><span class="line"><span class="javascript">    ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> [arr1,arr2] = arr;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr1);</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'失败'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解构赋值</title>
      <link href="/2018/07/05/js/%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2018/07/05/js/%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h4><ol><li>左右两边结构必须一样;</li><li>右边必须是个东西;</li><li>声明和赋值不能分开(必须在一句话里说完);<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> [aq,bq,cq]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(aq);<span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(bq);<span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(cq);<span class="comment">//3</span></span><br><span class="line"> <span class="comment">// 对象</span></span><br><span class="line"> <span class="keyword">let</span> &#123;w,z,y&#125; = &#123;<span class="attr">w</span>:<span class="number">12</span>,<span class="attr">z</span>:<span class="number">66</span>,<span class="attr">y</span>:<span class="number">15</span>&#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(w,z,y);<span class="comment">// 12 66 15</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>generator</title>
      <link href="/2018/07/05/js/generator/"/>
      <url>/2018/07/05/js/generator/</url>
      
        <content type="html"><![CDATA[<h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><h3 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator-生成器"></a>generator-生成器</h3><ul><li>普通函数- 一路到底</li><li><p>generator函数- 中间可以停 走走停停</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'a'</span>);</span><br><span class="line">     <span class="keyword">yield</span>;</span><br><span class="line">     alert(<span class="string">'b'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> show();</span><br><span class="line"> <span class="keyword">let</span> gentObj = show();</span><br><span class="line"> gentObj.next(); <span class="comment">//a</span></span><br><span class="line"> gentObj.next();<span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(gentObj)</span><br></pre></td></tr></table></figure></li><li><p>generator-yield是什么</p><ul><li>可以传参、可以返回</li><li>…..<br>本质：无感觉处理异步操作</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue过滤器</title>
      <link href="/2018/07/05/Vue/Vue%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2018/07/05/Vue/Vue%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;&#123; message | formatTime(&apos;YMD&apos;)&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;&#123; message | formatTime(&apos;YMDHMS&apos;)&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;&#123; message | formatTime(&apos;HMS&apos;)&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;&#123; message | formatTime(&apos;YM&apos;)&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   //实现vue中的过滤器功能  先定义过滤器 在使用        value是过滤器前面的值，type是过滤器中定义的字段</span><br><span class="line">     //这个过滤器是全局的  局部是vm的实例下filters：&#123;xx</span><br><span class="line">     ：fn（x,y）&#123;&#125;&#125;</span><br><span class="line">   Vue.filter(&quot;formatTime&quot;, function (value, type) &#123;</span><br><span class="line">     var dataTime = &quot;&quot;;</span><br><span class="line">     var data = new Date();</span><br><span class="line">     data.setTime(value);</span><br><span class="line">     var year = data.getFullYear();</span><br><span class="line">     var month = data.getMonth() + 1</span><br><span class="line">     var day = data.getDate();</span><br><span class="line">     var hour = data.getHours();</span><br><span class="line">     var minute = data.getMinutes();</span><br><span class="line">     var second = data.getSeconds();</span><br><span class="line">     [year,month, day,  hour, minute,second,]=[year,month, day,  hour, minute,second].map(item=&gt;item&gt;10?item:&apos;0&apos;+item)</span><br><span class="line">     if (type == &quot;YMD&quot;) &#123;</span><br><span class="line">       dataTime = year + &quot;-&quot; + month + &quot;-&quot; + day;</span><br><span class="line">     &#125; else if (type == &quot;YMDHMS&quot;) &#123;</span><br><span class="line">       dataTime = year + &quot;-&quot; + month + &quot;-&quot; + day + &quot; &quot; + hour + &quot;:&quot; + minute + &quot;:&quot; + second;</span><br><span class="line">     &#125; else if (type == &quot;HMS&quot;) &#123;</span><br><span class="line">       dataTime = hour + &quot;:&quot; + minute + &quot;:&quot; + second;</span><br><span class="line">     &#125; else if (type == &quot;YM&quot;) &#123;</span><br><span class="line">       dataTime = year + &quot;-&quot; + month;</span><br><span class="line">     &#125;</span><br><span class="line">     return dataTime;//将格式化后的字符串输出到前端显示</span><br><span class="line">   &#125;);</span><br><span class="line">   var app = new Vue(&#123;</span><br><span class="line">     el: &apos;#app&apos;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       message: &apos;1501068985877&apos;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命名视图</title>
      <link href="/2018/07/05/Vue/%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE/"/>
      <url>/2018/07/05/Vue/%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules//axios/dist/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue-router/dist/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/animate.css/animate.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border: 5px solid #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 80px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border: 5px solid #333;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:220px;</span><br><span class="line">    top: 80px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border: 5px solid #333;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> &gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left1"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"right1"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">      top</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">      left</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      right</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> top1 = &#123; <span class="attr">template</span>: <span class="string">'#top'</span>, &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> left1 = &#123; <span class="attr">template</span>: <span class="string">'#left'</span>, &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> right1 = &#123; <span class="attr">template</span>: <span class="string">'#right'</span>, &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          path: <span class="string">'/'</span>, <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:top1,</span></span><br><span class="line">           </span><br><span class="line">            left1,</span><br><span class="line">            right1,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// &#123; path: '/left', component: left1, name: left1 &#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#123; path: '/right', component: right1, name: right1 &#125;,</span></span></span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'ds'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命名视图 </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Number</title>
      <link href="/2018/07/05/js/number/"/>
      <url>/2018/07/05/js/number/</url>
      
        <content type="html"><![CDATA[<h3 id="保留2位小数"><a href="#保留2位小数" class="headerlink" title="保留2位小数"></a>保留2位小数</h3><ul><li><p>四舍五入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;</span><br><span class="line">num = num.toFixed(<span class="number">2</span>);  <span class="comment">// 输出结果为 2.45</span></span><br></pre></td></tr></table></figure></li><li><p>不四舍五入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">15.7784514000</span> * <span class="number">100</span>) / <span class="number">100</span>   <span class="comment">// 输出结果为 15.77</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Number </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
