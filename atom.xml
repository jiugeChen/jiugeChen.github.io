<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>’’Sun--(*^▽^*)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiugework.gitee.io/"/>
  <updated>2019-07-28T01:29:38.951Z</updated>
  <id>http://jiugework.gitee.io/</id>
  
  <author>
    <name>Chen jia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Class类</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Class/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Class/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:29:38.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类的本质</strong></p><ol><li>class本质还是function</li><li>类的所有方法都定义在类的prototype属性上</li><li>类创建的实例,里面也有proto-指向类的prototype原型对象</li><li>所以ES6的类它的绝大部分功能, ES5都可以做到,新的class写法只是让对象原型的写法更加清晰、更像面向对编程的语法而已。</li><li>所以ES6的类其实就是语法糖.</li><li>语法糖语法糖就是一种便捷写法.简单理解,有两种方法可以实现同样的功能,但是一种写法更加清晰、方便那么这个方法就是语法糖</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;类的本质&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;class本质还是function&lt;/li&gt;
&lt;li&gt;类的所有方法都定义在类的prototype属性上&lt;/li&gt;
&lt;li&gt;类创建的实例,里面也有proto-指向类的prototype原型对象&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Class" scheme="http://jiugework.gitee.io/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/面向对象/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:27:37.856Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建对象的三中方式"><a href="#创建对象的三中方式" class="headerlink" title="创建对象的三中方式"></a>创建对象的三中方式</h5><ol><li>利用new object()创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>利用 对象字面量创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>通过构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    <span class="keyword">this</span>.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);<span class="comment">//实例化</span></span><br></pre></td></tr></table></figure><h5 id="new在执行会做四件事"><a href="#new在执行会做四件事" class="headerlink" title="new在执行会做四件事"></a>new在执行会做四件事</h5></li><li><p>在内存创建一个空对象</p></li><li>让this指向这个对象</li><li>执行构造函数里面的代码，给这个新对象添加属性以及方法</li><li>返回这个新对象 ）</li></ol><h5 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h5><ul><li><p><strong>实例成员</strong>就是构造函数内部通过this添加的成员，<figure class="highlight plain"><figcaption><span>```sex```   sing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例成员**只能通过实例化的对象来访问</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">         console.log(zxy.name)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>静态成员</strong> 在构造函数本身上添加的的成员就是静态成员</p><ul><li>例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star.age=<span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员</strong>只能通过构造函数来访问</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.sex)<span class="comment">//能访问</span></span><br><span class="line"><span class="built_in">console</span>.log(zxy.sex)<span class="comment">//不能访问</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="prototype构造函数原型"><a href="#prototype构造函数原型" class="headerlink" title="prototype构造函数原型"></a>prototype构造函数原型</h5><blockquote><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。JavaScript规定,<strong>每一个构造函数都有一个prototype属性</strong>,指向另一个对象。注意这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有。<strong>我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.sex=sex;</span><br><span class="line">      <span class="comment">// this.sing=function()&#123;</span></span><br><span class="line">        <span class="comment">//   console.log("唱歌")</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">Star.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);</span><br><span class="line"> <span class="keyword">var</span> cj= <span class="keyword">new</span> Star(<span class="string">'cj'</span>,<span class="string">'男'</span>);</span><br><span class="line">zxy.sing===cj.sing   <span class="comment">//true</span></span><br><span class="line">zxy.sing() <span class="comment">//唱歌</span></span><br></pre></td></tr></table></figure><ol><li><p>原型是什么?</p><p> 一个对象,我们也称为prototype为原型对象</p></li><li><p>原型的作用是什么?</p><p>  共享方法。</p></li></ol><p>一般情况下,我们的公共属性定义到构造函数里面,公共的方法我们放到原型对象身上</p><h5 id="对象原型proto"><a href="#对象原型proto" class="headerlink" title="对象原型proto"></a>对象原型proto</h5><p><strong>对象都会有一个属性_proto</strong>_指向构造函数的prototype原型对象,之所以我们对象可以使用构造函数 prototype原型对象的属性和方法,就是因为对象有proto原型的存在。</p><ul><li><p>proto对象原型和 原型对象prototype是等价的*</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(cj.__proto__===Star.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>方法的查找规则:</p><p>首先先看ldh对象身上是否有sing方法,如果有就执行这个对象上的sing </p><p>如果么有sing这个方法,因为有一proto的存在,就去构造函数原型对象prototype身上去查找 sing这个方法</p><h5 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h5><p><strong>对象原型(proto )</strong>和<strong>构造函数( prototype)</strong>原型对象里面都有一个属性constructor属性, constructor我们称为构造函数，因为它指回构造函数本身。</p><p>作用 </p><p>constructor主要用于记录该对象引用于哪个构造函数,它可以让原型对象重新指向原来的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.proto_);</span><br><span class="line"><span class="built_in">console</span>.log(star.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(ldh. proto_.constructor);</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">star.prototype =&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>: star ,</span><br><span class="line">    sing: function()&#123;</span><br><span class="line">        <span class="built_in">console</span>. log(<span class="string">' 我 歌'</span>);&#125;,</span><br><span class="line">    movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span><span class="number">.1</span>og(<span class="string">'我会演电影);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><h5 id="JavaScript的成员查找机制-规则"><a href="#JavaScript的成员查找机制-规则" class="headerlink" title="JavaScript的成员查找机制(规则)"></a>JavaScript的成员查找机制(规则)</h5><ol><li>当访问一个对象的属性(包括方法)时,首先查找这个<strong>对象自身</strong>有没有该属性。</li><li>如果没有就查找它的原型(也就是proto指向的<strong>prototype原型对象</strong>)。</li><li>如果还没有就查找原型对象的原型(<strong>Object的原型对象</strong>)。</li><li>依此类推一直找到Object为止(<strong>null</strong> )。</li><li>proto对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线。</li></ol><h5 id="给Array添加自定义方法"><a href="#给Array添加自定义方法" class="headerlink" title="给Array添加自定义方法"></a>给Array添加自定义方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.xx=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxx"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> list.xx();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建对象的三中方式&quot;&gt;&lt;a href=&quot;#创建对象的三中方式&quot; class=&quot;headerlink&quot; title=&quot;创建对象的三中方式&quot;&gt;&lt;/a&gt;创建对象的三中方式&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;利用new object()创建对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figur
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="面向对象" scheme="http://jiugework.gitee.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Call</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Call/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Call/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:28:50.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><strong>用法</strong></p><ol><li>调用函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> dr.call() <span class="comment">//play</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Call可以改变函数this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o)</span><br></pre></td></tr></table></figure><p>此时这个函数的this就指向了o这个对象</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line">   <span class="built_in">console</span>.log(x+y);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// play</span></span><br><span class="line"><span class="comment">// &#123;name: "哈哈哈"&#125;</span></span><br><span class="line"><span class="comment">//  3</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      <span class="comment">//把子的this传入到父</span></span><br><span class="line">      <span class="comment">// this指向实例对象</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br></pre></td></tr></table></figure><ul><li><p>继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son. prototype = Father.prototype; <span class="comment">//这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Call&quot;&gt;&lt;a href=&quot;#Call&quot; class=&quot;headerlink&quot; title=&quot;Call&quot;&gt;&lt;/a&gt;Call&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Call" scheme="http://jiugework.gitee.io/tags/Call/"/>
    
  </entry>
  
  <entry>
    <title>Vue样式绑定方式</title>
    <link href="http://jiugework.gitee.io/2019/07/22/Vue/%E6%A0%B7%E5%BC%8F/"/>
    <id>http://jiugework.gitee.io/2019/07/22/Vue/样式/</id>
    <published>2019-07-22T12:33:15.236Z</published>
    <updated>2019-07-22T14:11:44.995Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><ul><li>直接传递一个数组 这里的class需要用v-bind绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    .active&#123;</span><br><span class="line">      letter-spacing: 0.5em;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><ul><li>通过三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',flag?'thin':'']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  let vm = new Vue(&#123;</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: &#123;</span><br><span class="line">      flag:true</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ul><li>把样式放到对象里把key为样式名，把value值绑定到一个bool值上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',&#123;'thin':flag&#125;]"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><ul><li>传入一个对象本质跟第三种方法差不多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:flag,active:true,active:true&#125;"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active',flag?'thin':'']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">'classObj'</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  let vm = new Vue(&#123;</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: &#123;</span><br><span class="line">      flag:true,</span><br><span class="line">      classObj:&#123;red:true,active:true,active:true&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li><p>直接在元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-weight&apos;:200 &#125;&quot;&gt;变色&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>在data中引用到<code>:style</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :style="&#123;color:'red','font-weight':200 &#125;"&gt;变色&lt;/h1&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> let vm =  new Vue(&#123;</span><br><span class="line">     el:'#app',</span><br><span class="line">     data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line">        color:'red','font-weight':200 </span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">      </span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三种绑定一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1,styleObj2 ]"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line">        color:'red','font-weight':200 </span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj2:&#123;</span><br><span class="line">        'font-size':'60px'</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直接传递一个数组 这里的class需要用v-bind绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="Vue样式" scheme="http://jiugework.gitee.io/tags/Vue%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue指令</title>
    <link href="http://jiugework.gitee.io/2019/07/21/Vue/Vue%E6%8C%87%E4%BB%A4/"/>
    <id>http://jiugework.gitee.io/2019/07/21/Vue/Vue指令/</id>
    <published>2019-07-21T15:09:49.263Z</published>
    <updated>2019-07-22T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="V-for"><a href="#V-for" class="headerlink" title="V-for"></a>V-for</h4><blockquote><p>组件中使用v-for需要绑定key</p></blockquote><ul><li><p>in后面可以放 数组，对象数组，对象，数字</p></li><li><p>循环普通数组</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;(item,i) in list &quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li><p>迭代数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;count in 10&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>可以渲染出带有标签的文本</li></ul><h4 id="v-if跟v-show"><a href="#v-if跟v-show" class="headerlink" title="v-if跟v-show"></a>v-if跟v-show</h4><ul><li>show控制显示隐藏需要频繁切换建议使用</li><li>if控制是否渲染页面是否存在这个节点</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul><li>缩写 是“:”</li><li>Vue的属性绑定机制</li><li>v-bind只能实现数据的单项绑定，只能从M绑定到V，无法实现数据的双向绑定</li></ul><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li>Vue提供的事件绑定机制</li><li>缩写是“@” </li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>只能在表单元素中使用</p></blockquote><ul><li><p>实现双向数据绑定</p></li><li><p>使用v-model可以实现表单元素和model中数据的双向数据绑定</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" v-model:value="msg" &gt;</span></span><br></pre></td></tr></table></figure><p>​    或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"msg"</span> &gt;</span><br></pre></td></tr></table></figure><ul><li><p>案例</p></li><li><p>正式开发中尽量少用eval()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span> <span class="attr">bu</span>&gt;</span></span><br><span class="line">    =</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span> @<span class="attr">focus</span>=<span class="string">"comp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      n1: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      n2: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      opt: <span class="string">'-'</span>,</span></span><br><span class="line"><span class="javascript">      result: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      list: [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      comp() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> result=<span class="keyword">this</span>.n1+<span class="keyword">this</span>.opt+<span class="keyword">this</span>.n2</span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.result= <span class="built_in">eval</span>(result)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// switch (this.opt) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '+':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) + Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '-':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) - Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '/':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) / Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '*':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) * Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   default:</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li>.stop阻止冒泡（ 里–》外）</li><li>.prevent阻止默认事件（）</li><li>.capture添加事件监听器时使用事件捕获模式（外–&gt;里）</li><li>.self只当事件在该元素（比如不是子元素）触发是触发回调(自己触发自己，)<ul><li>只会阻止自己冒泡，并不会阻止其他的冒泡</li></ul></li><li>.once事件只触发一次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;v-cloak&quot;&gt;&lt;a href=&quot;#v-cloak&quot; class=&quot;headerlink&quot; title=&quot;v-cloak&quot;&gt;&lt;/a&gt;v-cloak&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以解决插值表达式闪烁问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;V-for&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="指令" scheme="http://jiugework.gitee.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数组中常用的方法</title>
    <link href="http://jiugework.gitee.io/2019/07/19/js/%E6%95%B0%E7%BB%84/"/>
    <id>http://jiugework.gitee.io/2019/07/19/js/数组/</id>
    <published>2019-07-19T13:15:26.048Z</published>
    <updated>2019-07-27T07:41:11.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发中数组的使用场景非常多, 这里就简单整理总结一些常用的方法;从改变原有数据的方法、不改变原有数组的方法以及数据遍历的方法三方面总结。</p></blockquote><h2 id="改变原有数组的方法"><a href="#改变原有数组的方法" class="headerlink" title="改变原有数组的方法"></a>改变原有数组的方法</h2><h3>splice() 添加/删除数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> item = a.splice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="comment">// 从0开始截取到第三个位置</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [4,5,6,7]</span></span><br><span class="line"><span class="keyword">let</span> item1 = a.splice(<span class="number">0</span>,<span class="number">3</span>,<span class="string">'添加'</span>); <span class="comment">// [4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ['添加',7]</span></span><br><span class="line"><span class="comment">// 从数组下标0开始，删除3个元素，并添加元素'添加'</span></span><br></pre></td></tr></table></figure><p></p><h3>sort() 数组排序</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">8</span>];</span><br><span class="line"> <span class="comment">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a-b;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [1,3,4,4,8,10,20,25];</span></span><br><span class="line"> <span class="comment">// 降序</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> b-a;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [25,20,10,8,4,4,3,1];</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>pop() 删除一个数组中的最后的一个元素</h3><p></p><p></p><h3>shift() 删除数组的第一个元素</h3><p></p><p></p><h3>push() 向数组的末尾添加元素</h3><p></p><p></p><h3>unshift()向数组开头添加元素</h3><p></p><p></p><h3>reverse()</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  a =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  a.pop();  <span class="comment">// 3, 返回被删除的元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [1,2]</span></span><br><span class="line">  a.shift(); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [2]</span></span><br><span class="line">  a.push(<span class="string">"末尾添加"</span>);  <span class="comment">// 2 ,返回数组长度</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) ; [<span class="number">2</span>,<span class="string">"末尾添加"</span>]</span><br><span class="line">  a.unshift(<span class="string">"开头添加"</span>); <span class="comment">// 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//["开头添加", 2, "末尾添加"]</span></span><br><span class="line">  a.reverse();   <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>copyWithin() 指定位置的成员复制到其他位置</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'zhang'</span>, <span class="string">'wang'</span>, <span class="string">'zhou'</span>, <span class="string">'wu'</span>, <span class="string">'zheng'</span>];</span><br><span class="line"> <span class="comment">// 1位置开始被替换, 2位置开始读取要替换的  5位置前面停止替换</span></span><br><span class="line"> a.copyWithin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"> <span class="comment">// ["zhang", "zhou", "wu", "zheng", "zheng"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6: fill() 填充数组</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>以上是9种会改变原数组的方法, 接下来是6种常用的不会改变原数组的方法</p></blockquote><h2 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h2><p></p><h3>join() 数组转字符串</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a= [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line"> <span class="keyword">let</span> str2=a.join(<span class="string">'+'</span>); <span class="comment">// 'hello+world'</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>cancat 合并两个或多个数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">  <span class="comment">//连接两个数组</span></span><br><span class="line">  <span class="keyword">let</span> newVal=a.concat(b); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6扩展运算符…合并数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> <span class="keyword">let</span> b = [ <span class="number">4</span>,...a, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"> <span class="built_in">console</span>.log(a,b);</span><br><span class="line"> <span class="comment">//[2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>indexOf() 查找数组是否存在某个元素，返回下标</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'啦啦'</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="literal">NaN</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦'</span>));  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦啦'</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES7 includes() 查找数组是否包含某个元素 返回布尔</h3><p></p><p></p><h3>indexOf方法不能识别NaN</h3><p></p><p></p><h3>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'OB'</span>,<span class="string">'Koro1'</span>,<span class="number">1</span>,<span class="literal">NaN</span>];</span><br><span class="line"> a.includes(<span class="literal">NaN</span>); <span class="comment">// true 识别NaN</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">100</span>); <span class="comment">// false 超过数组长度 不搜索</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">-3</span>);  <span class="comment">// true 从倒数第三个元素开始搜索</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>slice() 浅拷贝数组的元素</h3><p></p><blockquote><p>字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [&#123;<span class="attr">name</span>: <span class="string">'OBKoro1'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'zhangsan'</span>&#125;];</span><br><span class="line"> <span class="keyword">let</span> b = a.slice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(b, a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"OBKoro1"&#125;]  [&#123;"name":"OBKoro1"&#125;]</span></span><br><span class="line"> a[<span class="number">0</span>].name=<span class="string">'改变原数组'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(b,a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"改变原数组"&#125;] [&#123;"name":"改变原数组"&#125;]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发中数组的使用场景非常多, 这里就简单整理总结一些常用的方法;从改变原有数据的方法、不改变原有数组的方法以及数据遍历的方法三方面总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;改变原有数组的方法&quot;&gt;&lt;a href=&quot;#改变原有数组的方
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="数组" scheme="http://jiugework.gitee.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Array" scheme="http://jiugework.gitee.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>常用CSS样式</title>
    <link href="http://jiugework.gitee.io/2019/07/16/css/css1/"/>
    <id>http://jiugework.gitee.io/2019/07/16/css/css1/</id>
    <published>2019-07-16T09:21:34.109Z</published>
    <updated>2019-07-16T09:34:05.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS超出部分显示省略号"><a href="#CSS超出部分显示省略号" class="headerlink" title="CSS超出部分显示省略号"></a>CSS超出部分显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单行 */</span></span><br><span class="line"><span class="selector-class">.overflow</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行 */</span></span><br><span class="line"><span class="selector-class">.more_overflow</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line"><span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>; <span class="comment">/* 显示行数 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## <span class="selector-tag">css</span>元素垂直居中</span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.verticalcenter</span>&#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="banner自适应屏幕代码"><a href="#banner自适应屏幕代码" class="headerlink" title="banner自适应屏幕代码"></a>banner自适应屏幕代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;    </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">3000px</span>;<span class="comment">/*图片宽度*/</span>           </span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">1500px</span>;<span class="comment">/*图片宽度的一半*/</span>       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS超出部分显示省略号&quot;&gt;&lt;a href=&quot;#CSS超出部分显示省略号&quot; class=&quot;headerlink&quot; title=&quot;CSS超出部分显示省略号&quot;&gt;&lt;/a&gt;CSS超出部分显示省略号&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="Css" scheme="http://jiugework.gitee.io/categories/Css/"/>
    
    
      <category term="常用CSS" scheme="http://jiugework.gitee.io/tags/%E5%B8%B8%E7%94%A8CSS/"/>
    
  </entry>
  
  <entry>
    <title>字符串常用操作</title>
    <link href="http://jiugework.gitee.io/2019/07/11/js/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://jiugework.gitee.io/2019/07/11/js/字符串常用操作/</id>
    <published>2019-07-11T09:02:07.077Z</published>
    <updated>2019-07-28T01:41:33.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断开头结尾"><a href="#判断开头结尾" class="headerlink" title="判断开头结尾"></a>判断开头结尾</h3><ul><li><b>startsWidth</b>判断以什么开头  </li><li><p><b>endsWidth</b>判断以什么结尾 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">'https://www.4399.com'</span>; <span class="comment">//   alert(str.startsWith('a'))  //判断是否以'a'开头，返回bool值 endsWidth同理</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="判断包含"><a href="#判断包含" class="headerlink" title="判断包含"></a>判断包含</h3><ul><li><b>includes</b>判断是够包含某个字符串 返回bool值</li><li><b>indexOf</b>判断是否包含并且返回下标，不存在返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'123456'</span>;</span><br><span class="line">str.includes(<span class="string">'456'</span>) <span class="comment">//true</span></span><br><span class="line">str.includes(<span class="string">'46'</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">str.indexOf(<span class="string">"1"</span>) <span class="comment">//0 //存在</span></span><br><span class="line">str.indexOf(<span class="string">"45"</span>) <span class="comment">//3 //存在</span></span><br><span class="line">str.indexOf(<span class="string">"46"</span>) <span class="comment">//-1 //不存在</span></span><br></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><ul><li><b>slice</b></li><li><b>substring</b></li><li><b>substr</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'abcdef'</span>;</span><br><span class="line">str = str.slice(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line">str = str.substring(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line">str = str.substr(<span class="number">0</span>);<span class="comment">//返回整个字符串 abcdef</span></span><br><span class="line"><span class="comment">// 使用一个参数</span></span><br><span class="line">str = str.slice(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line">str = str.substring(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line">str = str.substr(<span class="number">2</span>);<span class="comment">//截取第二个之后所有的字符 cdef</span></span><br><span class="line"><span class="comment">// 使用两个参数</span></span><br><span class="line">str = str.slice(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取第二个到第四个之间的字符 cd</span></span><br><span class="line">str = str.substring(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取第二个到第四个之间的字符 cd 前下标</span></span><br><span class="line">str = str.substr(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//截取从第3个开始往后数4位之间的字符 cdef</span></span><br><span class="line"><span class="comment">// 使用两个负数</span></span><br><span class="line">str = str.slice(<span class="number">1</span>,<span class="number">-3</span>);<span class="comment">//截取第二个到倒数第三个</span></span><br><span class="line">str = str.substr(<span class="number">1</span>,<span class="number">-3</span>);<span class="comment">//不能为负数，若强行传递负数，会被当成0处理 ' ' #负数转换为0</span></span><br></pre></td></tr></table></figure><h3 id="字符串和数组相互转换"><a href="#字符串和数组相互转换" class="headerlink" title="字符串和数组相互转换"></a>字符串和数组相互转换</h3><ul><li><b>split</b></li><li><b>join</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"abc,abcd,aaa"</span>;</span><br><span class="line">t = str.split(<span class="string">","</span>);<span class="comment">// 在每个逗号(,)处进行分解  ["abc", "abcd", "aaa"]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"helloworld"</span>;</span><br><span class="line">t1 = str.split(<span class="string">''</span>);  <span class="comment">//["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]</span></span><br><span class="line"><span class="comment">//  数组转字符串</span></span><br><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">b = a.join(<span class="string">"-"</span>);      <span class="comment">//"0-1-2-3-4"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;判断开头结尾&quot;&gt;&lt;a href=&quot;#判断开头结尾&quot; class=&quot;headerlink&quot; title=&quot;判断开头结尾&quot;&gt;&lt;/a&gt;判断开头结尾&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;b&gt;startsWidth&lt;/b&gt;判断以什么开头  &lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;endsW
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="String" scheme="http://jiugework.gitee.io/tags/String/"/>
    
      <category term="字符串" scheme="http://jiugework.gitee.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://jiugework.gitee.io/2019/07/05/js/1bbbbb/"/>
    <id>http://jiugework.gitee.io/2019/07/05/js/1bbbbb/</id>
    <published>2019-07-05T10:57:42.000Z</published>
    <updated>2019-07-28T01:39:49.318Z</updated>
    
    <content type="html"><![CDATA[<p>#模板</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#模板&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="generator" scheme="http://jiugework.gitee.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>函数进阶</title>
    <link href="http://jiugework.gitee.io/2018/07/27/js/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <id>http://jiugework.gitee.io/2018/07/27/js/函数进阶/</id>
    <published>2018-07-27T14:42:09.000Z</published>
    <updated>2019-07-27T15:11:51.036Z</updated>
    
    <content type="html"><![CDATA[<h4 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h4><p><strong>函数定义方式</strong></p><ul><li><p>函数声明方式function关键字(命名函数)</p></li><li><p>函数表达式(匿名函数)</p></li><li><p>Function里面参数都必须是字符串格式</p></li><li><p>第三种方式执行效率低,也不方便书写,因此较少使用</p></li><li><p>所有函数都是Function的实例(对象)</p></li><li><p>函数属于对象</p></li><li><p>new Function（’par1’,’par2’…’par..‘,’函数体’）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'console.log(a+b)'</span>)</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>函数调用方式</strong></p><ol><li>普通函数</li><li>对象的方法</li><li>构造函数</li><li>绑定事件函数</li><li>定时器函数</li><li>立即执行函数</li></ol><h4 id="函数this的指向"><a href="#函数this的指向" class="headerlink" title="函数this的指向"></a>函数this的指向</h4><blockquote><p>这些this的指向,是当我们调用函数的时候确定的。调用方式的不同决定了this的指向不同一般指向我们的调用者</p><table><thead><tr><th>调用方式</th><th style="text-align:left">this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td style="text-align:left">window</td></tr><tr><td>构造函数调用</td><td style="text-align:left">实例对象原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td style="text-align:left">该方法属于所属对象</td></tr><tr><td>事件绑定方法</td><td style="text-align:left">事件绑定对象</td></tr><tr><td>定时器函数</td><td style="text-align:left">window</td></tr><tr><td>立即执行函数</td><td style="text-align:left">window</td></tr></tbody></table></blockquote><p> JavaScript为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部this的指向问题,常用的有bind.call, apply三种方法。</p><ol><li><p><strong>call方法</strong></p><ul><li>改变this指向</li><li>调用函数 </li></ul><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">  Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">       <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure></li><li><p><strong>apply</strong></p><p>apply方法调用一个函数。简单理解为调用函数的方式,但是它可以改变函数的this指向。</p><p><code>fun.apply(thisArg,[argArray])</code></p><ul><li>thisArg :在fun函数运行时指定的this值 </li><li>argsArray :传递的值,必须包含在<strong>数组</strong>里面</li><li>返回值就是函数的返回值,因为它就是调用函数</li></ul><ol><li>也是调用函数第二个可以改变函数内部的this指向</li><li>但是他的参数必须是数组(伪数组)</li><li>apply的主要应用比如说我们可以利用apply借助于数学内置对象求最大值 </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>,<span class="number">5</span>,<span class="number">48884</span>,<span class="number">4</span>,<span class="number">4545</span>,];</span><br><span class="line">   <span class="keyword">let</span> res= <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,list);</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">//48884</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>bind</strong></p><p> bind()方法<strong>不会调用函数</strong>。但是能改变函数内部this指向</p><p><code>fun.bind(thisArg,arg1,arg2...)</code></p><ul><li>thisArg :在fun函数运行时指定的this值 </li><li>arg1 , arg2:传递的其他参数</li><li>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">'进阶'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newFn = fn.bind(o);</span><br><span class="line">    fn(); <span class="comment">//指向 --&gt;window</span></span><br><span class="line">    newFn(); <span class="comment">//指向o</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"> <span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">'进阶'</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newFn = fn.bind(o,<span class="string">'哈哈'</span>,<span class="string">'嘻嘻'</span>);</span><br><span class="line">    fn(); <span class="comment">//指向 --&gt;window</span></span><br><span class="line">    newFn(); <span class="comment">//指向o</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;函数的定义和调用&quot;&gt;&lt;a href=&quot;#函数的定义和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的定义和调用&quot;&gt;&lt;/a&gt;函数的定义和调用&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;函数定义方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数声明方式
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="函数进阶" scheme="http://jiugework.gitee.io/tags/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据交互</title>
    <link href="http://jiugework.gitee.io/2018/07/11/data/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    <id>http://jiugework.gitee.io/2018/07/11/data/数据交互/</id>
    <published>2018-07-11T08:25:28.000Z</published>
    <updated>2019-07-11T09:56:39.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><ul><li>无状态</li><li>连接过程：连接-接受-发送请求</li><li>消息分成两部分，请求头&lt;=32K、请求体&lt;=2G</li></ul><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><ul><li>最重要</li></ul><ol><li>action-提交到的位置</li><li>method–GET/POST/PUT/DELETE/HEAD<ul><li>GET:  把数据放在url传输     数据量很小、缓存。获取东西</li><li>POST: 把数据放在请求体里面  数据量大、不会缓存。发送东西，大量发送。</li><li>PUT:发送东西，大量发送。</li><li>DELETE:删除。</li><li>HEAD:让服务器只发送头回来就行(不需要内容)</li></ul></li><li>name 名字</li><li>enctype 上传文件需要设置的</li></ol><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul><li>官方、不能跨域</li><li>单向</li><li>ajax好:<ol><li>用户体检好，性能高<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li></ol><ul><li>ajax-<h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2></li></ul></li><li>民间、能跨域 不推荐</li><li>破坏了http自身的设计<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2></li><li>双向-数据实时性</li><li>html5 IE9+ </li><li>用的非常广</li><li>基于http</li><li>跨域</li><li>原生麻烦<h4 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io:"></a>socket.io:</h4></li></ul><ol><li>兼容的？</li><li>二进制数据</li></ol><ul><li>怎么用</li><li>聊天室</li><li>视频点播<h4 id="socket-io-1"><a href="#socket-io-1" class="headerlink" title="socket.io"></a>socket.io</h4></li><li><p>安装<code>npm i socket.io  -D</code></p><h4 id="websocket聊天室"><a href="#websocket聊天室" class="headerlink" title="websocket聊天室"></a>websocket聊天室</h4><ol><li>用户注册、登陆</li><li>发言 </li><li>离线消息</li></ol><ul><li>数据<ul><li>用户信息库</li><li>消息数据库</li></ul></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li>关系形数据库—— MySQL、Oracle</li></ol><ul><li>优点 : 强大</li><li>缺点 : 性能低</li></ul><ol start="2"><li>文件形数据库—— SQLite</li></ol><ul><li>优点 : 简单</li><li>缺点 : 支撑不了庞大的应用、没法储存特别多的数据</li></ul><ol start="3"><li>文档形数据库—— MongoDB</li></ol><ul><li>优点 : 直接存储对象本身</li><li>缺点 : 不够严谨、性能偏低</li></ul><ol start="4"><li>空间形数据库—— 坐标、位置 .. GIS</li></ol><h4 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h4><p>类型:</p></li><li>数字 <ul><li>整数 thinyint(-128~127或者0~255)、int(21亿或43亿);</li><li>浮点数 float（保留到小数点8位） 、 double（308）</li></ul></li><li><p>字符串</p><ul><li>小字符串 varchar（255）</li><li>大字符串 text（2G）</li></ul><p>主键:</p></li><li><p>唯一</p></li><li>性能高</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;http协议&quot;&gt;&lt;a href=&quot;#http协议&quot; class=&quot;headerlink&quot; title=&quot;http协议&quot;&gt;&lt;/a&gt;http协议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无状态&lt;/li&gt;
&lt;li&gt;连接过程：连接-接受-发送请求&lt;/li&gt;
&lt;li&gt;消息分成两部分，请求
      
    
    </summary>
    
    
      <category term="请求数据" scheme="http://jiugework.gitee.io/tags/%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    
      <category term="ajax" scheme="http://jiugework.gitee.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>ES5中新增的方法</title>
    <link href="http://jiugework.gitee.io/2018/07/08/js/%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jiugework.gitee.io/2018/07/08/js/对象/</id>
    <published>2018-07-08T09:27:42.000Z</published>
    <updated>2019-07-27T08:30:25.299Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><p><strong>Object.defineProperty（）</strong>定义对象中新属性或修改原有的属性。</p><p><code>Object.defineProperty（obj,prop,des）</code></p><ul><li>obj:必需。目标对象</li><li>prop :必需。需定义或修改的属性的名</li><li>descriptor :必需。目标属性所拥有的特性<ul><li>Object.defineProperty()第三个参数descriptor说明:以对象形式(}书写</li><li>value:设置属性的值默认为undefinedwritable:值是否可以重写truel false默认为false</li><li>enumerable:目标属性是否可以被枚举。true | false默认为false</li><li>configurable:目标属性是否可以被删除或是否可以再次修改特性true | false默认为false</li></ul></li></ul><p><strong>Object.keys()</strong>用于获取对象自身所有的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'小米'</span>,</span><br><span class="line">    age:<span class="number">9</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="built_in">Object</span>.keys(obj));<span class="comment">//["name", "age"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;对象方法&quot;&gt;&lt;a href=&quot;#对象方法&quot; class=&quot;headerlink&quot; title=&quot;对象方法&quot;&gt;&lt;/a&gt;对象方法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Object.defineProperty（）&lt;/strong&gt;定义对象
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES5新增方法" scheme="http://jiugework.gitee.io/tags/ES5%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据遍历</title>
    <link href="http://jiugework.gitee.io/2018/07/08/js/%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <id>http://jiugework.gitee.io/2018/07/08/js/遍历方法/</id>
    <published>2018-07-08T09:27:42.000Z</published>
    <updated>2019-07-27T13:49:53.891Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="map-映射-一个对一个"><a href="#map-映射-一个对一个" class="headerlink" title="map      映射    一个对一个"></a>map      映射    一个对一个</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="number">12</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">60</span>,<span class="number">99</span>,<span class="number">8</span>]</span><br><span class="line"> [<span class="string">"不及格"</span>,<span class="string">"不及格"</span>,<span class="string">"及格"</span>,<span class="string">"及格"</span>,<span class="string">"及格"</span>,<span class="string">"不及格"</span>];</span><br><span class="line"><span class="comment">// 1.使arr中数字乘以2，输出结果</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//(3) [24, 10, 16]</span></span><br><span class="line"><span class="comment">// ////////////////////</span></span><br><span class="line"><span class="comment">// 2.分数大于等于60的输出及格,小于60的输出不及格</span></span><br><span class="line"><span class="keyword">let</span> mark = [<span class="number">15</span>, <span class="number">88</span>, <span class="number">76</span>, <span class="number">60</span>, <span class="number">55</span>];</span><br><span class="line"><span class="keyword">let</span> markResult = mark.map(<span class="function"><span class="params">item</span>=&gt;</span> item &gt;= <span class="number">60</span> ? <span class="string">"及格"</span> : <span class="string">"不及格"</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(markResult);<span class="comment">//["不及格", "及格", "及格", "及格", "不及格"]</span></span><br></pre></td></tr></table></figure><h2 id="reduce-汇总-一堆出来一个"><a href="#reduce-汇总-一堆出来一个" class="headerlink" title="reduce   汇总  一堆出来一个"></a>reduce   汇总  一堆出来一个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.算个总数</span></span><br><span class="line">  [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]  =&gt; <span class="number">60</span>;</span><br><span class="line"><span class="comment">//  2.算个平均数</span></span><br><span class="line">  [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]  =&gt; <span class="number">20</span>;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>];</span><br><span class="line"> <span class="keyword">let</span> arrRes = arr.reduce(<span class="function">(<span class="params">tmp, item, index</span>) =&gt;</span> tmp + item)</span><br><span class="line"><span class="built_in">console</span>.log(arrRes);<span class="comment">//6785</span></span><br><span class="line"><span class="comment">//2.算个平均数</span></span><br><span class="line"><span class="keyword">let</span> avgRes = arr.reduce(<span class="function">(<span class="params">tmp, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index != arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tmp + item</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tmp + item) / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(avgRes);<span class="comment">//1357</span></span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p><code>array.filter(function(currentValue,index,arr){})</code></p><ul><li>filter方法创建一个新的数组,新数组中的元素是通过检查指定数组中符合条件的所有元素,<strong>主要用于筛造数组</strong></li><li><strong>注意它直接返回一个新数组</strong></li><li>不会收到return的影响</li><li>currentValue:数组当前项的值</li><li>index数组当前项的索</li><li>arr:数组对象本身</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.算出能被3整除的数</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//(3) [12, 99, 30]</span></span><br><span class="line"><span class="comment">// 2.价格大于10000的数据</span></span><br><span class="line"><span class="keyword">let</span> arrz=[</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'男鞋'</span>,<span class="attr">price</span>:<span class="number">650</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'女鞋'</span>,<span class="attr">price</span>:<span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'男装'</span>,<span class="attr">price</span>:<span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">title</span>:<span class="string">'女装'</span>,<span class="attr">price</span>:<span class="number">10000</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pres = arrz.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.price&gt;=<span class="number">10000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pres);<span class="comment">// &#123;title:'女鞋',price:15000&#125;, &#123;title:'女装',price:10000&#125;</span></span><br></pre></td></tr></table></figure><h5 id="fofEach-循环-迭代"><a href="#fofEach-循环-迭代" class="headerlink" title="fofEach  循环(迭代)"></a>fofEach  循环(迭代)</h5><ul><li>orEach这种方法也有一个小缺陷：你不能使用break语句中断循环，也不能使用return语句返回到外层函数。</li></ul><p><code>forEach(function(value,索引，数组本身){})</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line"> arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span> <span class="built_in">console</span>.log(item))</span><br></pre></td></tr></table></figure><h5 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h5><p><code>array.some(function(currentValue,index,arr))</code></p><ul><li>some方法用于检测数组中的元素是否满足指定条件,通俗点查找数组中是否有满足条件的元素</li><li>注意它返回值是布尔值,<strong>如果查找到这个元素,就返回true,如果查找不到就返回false</strong>.</li><li>如果找到第一个满足条件的元素,则终止循环不在继续查找</li><li>currentValue:数组当前项的值 </li><li>index:数组当前项的索引 </li><li>arr :数组对象本身</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">541</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line">     <span class="keyword">let</span> res=  arr.some(<span class="function"><span class="params">item</span>=&gt;</span>item==<span class="number">12</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(res); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">111</span>,<span class="number">12</span>, <span class="number">541</span>, <span class="number">5461</span>, <span class="number">115</span>, <span class="number">656</span>, <span class="number">99</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> res = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"找到来"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">//找到了记得return 不然他会找把整个数组找完</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"寻找"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><h2 id="普通for循环，经常用的数组遍历"><a href="#普通for循环，经常用的数组遍历" class="headerlink" title="普通for循环，经常用的数组遍历"></a>普通for循环，经常用的数组遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><ul><li>优化版for循环:使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j= <span class="number">0</span>, len = arr.length; j&lt;len; j++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 打印结果 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><h2 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h2><ul><li><p>map即是 “映射”的意思 用法与 forEach 相似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,i</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="string">'--'</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// 0--1</span></span><br><span class="line"><span class="comment">// 1--3 </span></span><br><span class="line"><span class="comment">// 2--45 </span></span><br><span class="line"><span class="comment">// 3--7 </span></span><br><span class="line"><span class="comment">// 4--dd</span></span><br></pre></td></tr></table></figure><ul><li>map遍历支持使用return语句，支持return返回值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">var</span> b= arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,i</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="string">'--'</span>+value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// b返回 (5) [1, 3, 45, 7, "dd"]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="for-of遍历-是ES6新增功能"><a href="#for-of遍历-是ES6新增功能" class="headerlink" title="for-of遍历 是ES6新增功能"></a>for-of遍历 是ES6新增功能</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="string">'dd'</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果: 1 3 45 7 dd</span></span><br></pre></td></tr></table></figure><ul><li>for-of这个方法避开了for-in循环的所有缺陷</li><li>与forEach()不同的是，它可以正确响应break、continue和return语句</li><li>for-of循环不仅支持数组，还支持大多数类数组对象</li><li>for-of循环也支持字符串遍历</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;map-映射-一个对一个&quot;&gt;&lt;a href=&quot;#map-映射-一个对一个&quot; class=&quot;headerlink&quot; title=&quot;map      映射    一个对一个&quot;&gt;&lt;/a&gt;map      映射    一个对一个&lt;/h2
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/tags/JavaScript/"/>
    
      <category term="遍历" scheme="http://jiugework.gitee.io/tags/%E9%81%8D%E5%8E%86/"/>
    
      <category term="循环" scheme="http://jiugework.gitee.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>generator</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/generator/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/generator/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-28T01:33:28.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><h3 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator-生成器"></a>generator-生成器</h3><ul><li>普通函数- 一路到底</li><li><p>generator函数- 中间可以停 走走停停</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'a'</span>);</span><br><span class="line">     <span class="keyword">yield</span>;</span><br><span class="line">     alert(<span class="string">'b'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> show();</span><br><span class="line"> <span class="keyword">let</span> gentObj = show();</span><br><span class="line"> gentObj.next(); <span class="comment">//a</span></span><br><span class="line"> gentObj.next();<span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(gentObj)</span><br></pre></td></tr></table></figure></li><li><p>generator-yield是什么</p><ul><li>可以传参、可以返回</li><li>…..<br>本质：无感觉处理异步操作</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;generator&quot;&gt;&lt;a href=&quot;#generator&quot; class=&quot;headerlink&quot; title=&quot;generator&quot;&gt;&lt;/a&gt;generator&lt;/h2&gt;&lt;h3 id=&quot;generator-生成器&quot;&gt;&lt;a href=&quot;#generator-生成
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="generator" scheme="http://jiugework.gitee.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作</title>
    <link href="http://jiugework.gitee.io/2018/07/05/GIt%E6%93%8D%E4%BD%9C/"/>
    <id>http://jiugework.gitee.io/2018/07/05/GIt操作/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-18T08:39:59.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>git config --global user.name &quot;你的账号&quot;</code></p><p><code>git config --global user.email &quot;你的邮箱&quot;</code></p><p> 在文件中初始化Git（创建Git仓库）<code>git init</code></p><h3 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h3><ol><li>创建文件 <code>git touch a1.html</code> </li><li>文件提交到暂存区 <code>git add a1.html</code></li><li>文件提交描述 <code>git commit -m &#39;描述&#39;</code></li><li>查看文件状态 <code>git status</code></li><li>提交到仓库 <code>git push</code></li></ol><h3 id="Git克隆操作"><a href="#Git克隆操作" class="headerlink" title="Git克隆操作"></a>Git克隆操作</h3><p> <code>git clone 仓库地址</code></p><h3 id="新仓库添加本地文件"><a href="#新仓库添加本地文件" class="headerlink" title="新仓库添加本地文件"></a>新仓库添加本地文件</h3><ul><li>新建<b>码云/github</b>仓库</li><li>本地新建文件夹</li><li>新建的文件夹，点击鼠标右键，选择git bash here <code>git init</code></li><li>复制项目地址</li><li>然后<code>git remote add origin 地址</code></li><li>继续输入<code>git pull origin master</code> 命令，将码云上的仓库pull到本地文件夹</li><li>使用<code>git add -A  （. 表示所有的）或者 git add + 文件名</code>            // 将文件保存到缓存区</li><li>使用<code>git commit -m</code>‘新添加的文件内容描述’     //添加文件描述</li><li>使用<code>git push origin master</code> ，将本地仓库推送到远程仓库</li><li>ok了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git config --global user.name &amp;quot;你的账号&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Git" scheme="http://jiugework.gitee.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jiugework.gitee.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>变量let与常量const</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/变量与常量/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-28T01:35:16.826Z</updated>
    
    <content type="html"><![CDATA[<h4 id="变量let与常量const"><a href="#变量let与常量const" class="headerlink" title="变量let与常量const"></a>变量let与常量const</h4><ul><li>ES5 var 问题<ul><li>可以重复声明</li><li>无法限制修改</li><li>没有块级作用域</li></ul></li><li>ES6 变量 let<ul><li>不能重复声明</li><li>可以重新定义</li><li>有块级作用域</li></ul></li><li>ES6 常量 const<ul><li>不能重复声明</li><li>不可以重新定义</li><li>有块级作用域</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;变量let与常量const&quot;&gt;&lt;a href=&quot;#变量let与常量const&quot; class=&quot;headerlink&quot; title=&quot;变量let与常量const&quot;&gt;&lt;/a&gt;变量let与常量const&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ES5 var 问题&lt;ul&gt;
&lt;li&gt;可
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="变量" scheme="http://jiugework.gitee.io/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/模块化/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-11T09:53:42.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>模块-组件-元件</li><li>模块：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  - 定义: model.js</span></span><br><span class="line">     define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</span><br><span class="line">    exports.a = <span class="number">12</span>;</span><br><span class="line">     exports.b=<span class="number">5</span>;</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//   - 调用:  xx.html</span></span><br><span class="line">seajs.use([<span class="string">'xxxx.js'</span>,<span class="string">'xxx.js'</span>,...],<span class="function"><span class="keyword">function</span>(<span class="params">model1,model2,...</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>民间的–sea.js 、require.js</li></ol><ul><li>CMD、AMD规范</li><li><p>区别：</p><p>html-&gt;js   use</p><p>js-&gt;  js   require</p></li></ul><ol start="2"><li><p>node.js模块化</p><ol><li>没有define</li><li>exports、require、module</li><li>引用自定义模块 1) 放到node_modules里,   2)前面加上./</li></ol><ul><li>引入: let mod = require(‘./aaa.js’)</li><li>输出: exports.xx = xxx; module.exports={x,x,x,y}</li></ul></li><li><p>ES6模块化</p><ul><li>import</li><li>export</li></ul><ul><li>引入:impo mod from = ‘./xx.js’</li><li>输出:expor{x,x,x}</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块-组件-元件&lt;/li&gt;
&lt;li&gt;模块：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://jiugework.gitee.io/tags/ES6/"/>
    
      <category term="模块化" scheme="http://jiugework.gitee.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>解构赋值</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/结构赋值/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-11T09:55:59.502Z</updated>
    
    <content type="html"><![CDATA[<h4 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h4><ol><li>左右两边结构必须一样;</li><li>右边必须是个东西;</li><li>声明和赋值不能分开(必须在一句话里说完);<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> [aq,bq,cq]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(aq);<span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(bq);<span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(cq);<span class="comment">//3</span></span><br><span class="line"> <span class="comment">// 对象</span></span><br><span class="line"> <span class="keyword">let</span> &#123;w,z,y&#125; = &#123;<span class="attr">w</span>:<span class="number">12</span>,<span class="attr">z</span>:<span class="number">66</span>,<span class="attr">y</span>:<span class="number">15</span>&#125;;</span><br><span class="line"> <span class="built_in">console</span>.log(w,z,y);<span class="comment">// 12 66 15</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;结构赋值&quot;&gt;&lt;a href=&quot;#结构赋值&quot; class=&quot;headerlink&quot; title=&quot;结构赋值&quot;&gt;&lt;/a&gt;结构赋值&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;左右两边结构必须一样;&lt;/li&gt;
&lt;li&gt;右边必须是个东西;&lt;/li&gt;
&lt;li&gt;声明和赋值不能分开(必须在一句话
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://jiugework.gitee.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/Promise/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/Promise/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-28T01:15:58.112Z</updated>
    
    <content type="html"><![CDATA[<ul><li>异步: 操作直接没啥关系,同时进行多个操作，代码复杂。</li><li>同步: 同时只能做一件事 代码简单。</li><li>本质：等待异步操作结束<ul><li>当状态改变的时候—调用之前挂起的then队列</li><li>then的时候直接执行对应的函数，并且参数给人家。</li></ul></li></ul><h4 id="Promise-用法"><a href="#Promise-用法" class="headerlink" title="Promise 用法"></a>Promise 用法</h4><h5 id="Promise-all-一个都不能错"><a href="#Promise-all-一个都不能错" class="headerlink" title="Promise.all  一个都不能错"></a>Promise.all  一个都不能错</h5><h5 id="Promise-race-只要有一个对"><a href="#Promise-race-只要有一个对" class="headerlink" title="Promise.race 只要有一个对"></a>Promise.race 只要有一个对</h5><ol><li><p>一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//异步代码</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//resolve 成功</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//reject 失败</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">"data/tt.txt"</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                    resolve(data)</span><br><span class="line">                &#125;,</span><br><span class="line">                error(err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        p.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'成功'</span> + data)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用成功</span></span></span><br><span class="line"><span class="javascript">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(err);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'失败'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//失败了</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>多个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">createPromise</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//异步代码</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//resolve 成功</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//reject 失败</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line">                    url,</span><br><span class="line"><span class="javascript">                    dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                        resolve(data)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error(err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">            createPromise(<span class="string">'data/tt.txt'</span>),</span></span><br><span class="line"><span class="javascript">            createPromise(<span class="string">'data/jj.txt'</span>)</span></span><br><span class="line"><span class="javascript">        ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 全部成功</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> [arr1, arr2] = arr;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr1);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//失败一个或多个</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'失败'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(err);</span></span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123; <span class="attr">url</span>: <span class="string">'data/tt.txt'</span>, <span class="attr">dataType</span>: <span class="string">"json"</span> &#125;),</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123; <span class="attr">url</span>: <span class="string">'data/jj.txt'</span>, <span class="attr">dataType</span>: <span class="string">"json"</span> &#125;)</span></span><br><span class="line">        ])</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>jq中的promise</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.0.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;<span class="attr">url</span>:<span class="string">'data/tt.txt'</span>,<span class="attr">dataType</span>: <span class="string">"json"</span>&#125;),</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;<span class="attr">url</span>:<span class="string">'data/jj.txt'</span>,<span class="attr">dataType</span>: <span class="string">"json"</span>&#125;)</span></span><br><span class="line"><span class="javascript">    ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> [arr1,arr2] = arr;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'成功'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr1);</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'失败'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;异步: 操作直接没啥关系,同时进行多个操作，代码复杂。&lt;/li&gt;
&lt;li&gt;同步: 同时只能做一件事 代码简单。&lt;/li&gt;
&lt;li&gt;本质：等待异步操作结束&lt;ul&gt;
&lt;li&gt;当状态改变的时候—调用之前挂起的then队列&lt;/li&gt;
&lt;li&gt;then的时候直接执行对应的
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://jiugework.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://jiugework.gitee.io/2018/07/05/js/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://jiugework.gitee.io/2018/07/05/js/箭头函数/</id>
    <published>2018-07-05T10:57:42.000Z</published>
    <updated>2019-07-11T09:53:42.648Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>之前的函数是这样写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 名字(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//  code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而ES6是↓</p></li><li><p>箭头函数</p><ul><li>如果只有一个参数，()可以省略</li><li>如果只有一个return {}可以省略 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload= <span class="function"><span class="params">()</span>=&gt;</span> alert(<span class="string">'vb'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> show=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数-有参数"><a href="#函数-有参数" class="headerlink" title="函数-有参数"></a>函数-有参数</h4><ul><li>参数扩展/展开</li></ul><ol><li><p>收集参数</p><ul><li>收集剩余的参数</li><li>…args必须是最后一个<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arg</span>(<span class="params">a,b,...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(...args);</span><br><span class="line">&#125;</span><br><span class="line">arg(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">10</span>); </span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 5 7 9 2 10</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>展开参数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">55</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zhan</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">zhan(...array) </span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//55</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=[<span class="number">10</span>,<span class="number">22</span>,<span class="number">52</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="comment">// (6) [1, 2, 5, 10, 22, 52]</span></span><br><span class="line"><span class="comment">//////////////////////////////////</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  fadd(...args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fadd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">  a(<span class="number">1</span>,<span class="number">6</span>)<span class="comment">//7</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>默认参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">a,b=<span class="number">1</span>,c=<span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,c); </span><br><span class="line"> &#125;</span><br><span class="line"> m(<span class="number">1</span>)  <span class="comment">//1 1 10</span></span><br><span class="line"> m(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//1 2 10</span></span><br><span class="line"> m(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">// 1 2 5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前的函数是这样写的&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://jiugework.gitee.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
