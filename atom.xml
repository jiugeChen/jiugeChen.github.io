<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>’’Sun--(*^▽^*)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiugework.gitee.io/"/>
  <updated>2020-01-09T02:44:24.479Z</updated>
  <id>http://jiugework.gitee.io/</id>
  
  <author>
    <name>Chen jia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>周报</title>
    <link href="http://jiugework.gitee.io/2019/09/11/work/%E5%91%A8%E6%8A%A5/"/>
    <id>http://jiugework.gitee.io/2019/09/11/work/周报/</id>
    <published>2019-09-11T09:09:30.000Z</published>
    <updated>2020-01-09T02:44:24.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="周报"><a href="#周报" class="headerlink" title="周报"></a>周报</h2><h3 id="2019-08-19—-2019-08-23"><a href="#2019-08-19—-2019-08-23" class="headerlink" title="2019-08-19—-2019-08-23"></a>2019-08-19—-2019-08-23</h3><h5 id="教师端"><a href="#教师端" class="headerlink" title="教师端"></a>教师端</h5><ol><li>性别选择问题渲染</li><li>校区选择,判断一个校区时候直接进入。</li><li>配置修改小程序后台配置老师帮appid,上传到体验版</li><li>修改课程详情接口<h4 id="教务端"><a href="#教务端" class="headerlink" title="教务端"></a>教务端</h4></li><li>个人中心资料页面，资料修改头像上传</li><li>校区切换</li><li>获取消息</li><li>首页页面修改</li></ol><hr><h3 id="2019年8月26"><a href="#2019年8月26" class="headerlink" title="2019年8月26"></a>2019年8月26</h3><h4 id="教务端-1"><a href="#教务端-1" class="headerlink" title="教务端"></a>教务端</h4><ol><li>课程详情页面。获取详情内容</li><li>课堂播报tab静态页面，课堂播报接口。</li><li>课堂播报详情、点赞、评论功能。</li><li>课程打卡状态处理，打卡页面重写，打卡详情重写。</li><li>打卡详情接口、学生选择列表静态</li></ol><hr><h3 id="2019年9月2日1"><a href="#2019年9月2日1" class="headerlink" title="2019年9月2日1"></a>2019年9月2日1</h3><h4 id="教务端-2"><a href="#教务端-2" class="headerlink" title="教务端"></a>教务端</h4><ol><li>班级考勤页面提示、打考勤记录接口对接。</li><li>拍照记录静态板块设计、获取拍照记录</li><li>拍照记录功能实现：删除、新增</li><li>教务端课程页面排课的显示<h4 id="老师端"><a href="#老师端" class="headerlink" title="老师端"></a>老师端</h4></li><li>页面缺少的静态图片补充、公司资料页面完善</li></ol><h4 id="老师端-1"><a href="#老师端-1" class="headerlink" title="老师端"></a>老师端</h4><ol><li>家委会发布通知消息字数限制、阅读消息页面优化</li><li>个人中心字体调整、发布动态字数解除限制。</li><li>老师端课程请请求根据后台接口修改</li></ol><hr><h3 id="2019年9月9日"><a href="#2019年9月9日" class="headerlink" title="2019年9月9日"></a>2019年9月9日</h3><h4 id="校长端"><a href="#校长端" class="headerlink" title="校长端"></a>校长端</h4><ol><li>新增新客源页面</li><li>我的学生静态页面</li><li>本月收入页面</li><li>个人中心修改、校区切换页面修改</li><li>部分页面优化</li></ol><hr><h4 id="老师端-2"><a href="#老师端-2" class="headerlink" title="老师端"></a>老师端</h4><ol><li>课程页面接口对接修改</li><li>课程今日作业接口修改、课堂评分、课程编辑、接口修改</li><li>课程内容编辑完成之后页面不刷新Bug修改</li><li><p>课程接口二次修改。对接</p><h4 id="教务端-3"><a href="#教务端-3" class="headerlink" title="教务端"></a>教务端</h4></li><li><p>课程页面逻辑重写、页面修改</p></li><li>首页新客源接口、已报名接口</li><li>课程接口二次修改。对接</li><li>班级考勤本地数据BUG修改</li></ol><hr><h3 id="2019年10月28日"><a href="#2019年10月28日" class="headerlink" title="2019年10月28日"></a>2019年10月28日</h3><ol><li>上传案例页面新增选择音响品牌功能</li><li>新增汽车选择列表页面以及接口</li><li>新增汽车品牌型号选择页面以及接口</li><li>我的案例上传订单号。</li><li>我的案例上传案例接口。</li><li>我的案例渲染页面修改</li><li>订单页面修改 接口、</li></ol><h3 id="2019-11-4-14-45-25"><a href="#2019-11-4-14-45-25" class="headerlink" title="2019-11-4 14:45:25"></a>2019-11-4 14:45:25</h3><p>教育项目</p><ol><li>老师帮手、教务帮手注册时需要授权二次bug修改。</li><li>获取校区时移除无校区ID的数据;</li><li>奖状页面微调、</li><li>发奖状选择学生新增最近一次发奖记录、时间、奖项；</li><li>新增查看老师发布历史奖状列表。</li><li>新增奖状详情页面奖状详情。<br>汽车音响</li><li>配置管理端小程序AppId。</li><li>首页新增下拉刷新获取数据。</li><li>消息页面系统消息页面修改以及新增系统消息图标。</li><li>配置后台合法域名、提交审核。</li><li>首页更换技师接口修改。</li></ol><h3 id="2019-11-11-15-03-33"><a href="#2019-11-11-15-03-33" class="headerlink" title="2019-11-11 15:03:33"></a>2019-11-11 15:03:33</h3><p>老师帮</p><ol><li>首页banner图优化、登陆页面修改banner图、新增小程序名字</li><li>奖状新增查看点赞、奖状canvas画图时textarea置bug。</li><li>登陆之前清除本地数据丶每次登陆需要选择校区</li><li>早安画报分享提示已经转发和长按发送图片。</li></ol><p>音响</p><ol><li>首页预约订单页面加上了客户头像和技师头像、便于区分理解。</li><li>配置后台音响圈帮手。把音响的店家的代码转移到音响帮手。</li><li>首页显示技师头像用户头像。</li></ol><h3 id="2019-11-20-09-59-09"><a href="#2019-11-20-09-59-09" class="headerlink" title="2019-11-20 09:59:09"></a>2019-11-20 09:59:09</h3><p>老师帮</p><ol><li>老师给学生评分的icon改变。模态弹框改变。</li></ol><p>音响</p><ol><li>去音响公司记录UI更改，画出更改的原型图</li><li>音响店家端首页新增今日待回访tab</li><li>客户页面新增待回访+添加客户</li><li>我的页面新增菜单 上传订单、发布动态、我的动态。</li></ol><h3 id="2019-11-27-17-41-05"><a href="#2019-11-27-17-41-05" class="headerlink" title="2019-11-27 17:41:05"></a>2019-11-27 17:41:05</h3><p>教务帮</p><ol><li>个人中心页面优化、新增我的学生栏目。</li><li>个人中心资料页面更换布局、改为左右对应式。</li><li>新增我的学生页面、功能：通过管理的班级查看学生人数、考勤记录。最后一次考勤时间</li><li>学生-考勤记录页面。</li><li>修改教育项目Web页面展示</li><li>教务帮手将学生页面提出到tab下面，修改js逻辑</li></ol><h3 id="2019-12-7-17-09-23"><a href="#2019-12-7-17-09-23" class="headerlink" title="2019-12-7 17:09:23"></a>2019-12-7 17:09:23</h3><p>音响</p><ol><li>首页banner主页图修改、改装案例、优惠活动修改、专业服务团队静态版块。<br>教育投票</li><li>设计活动列表、活动详情、作品投票、作品详情、作品排行、机构选送的设计图。<br>教育官网</li><li>新增一个入驻页面。修改页脚菜单栏目细节。</li></ol><h3 id="新年好"><a href="#新年好" class="headerlink" title="新年好"></a>新年好</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;周报&quot;&gt;&lt;a href=&quot;#周报&quot; class=&quot;headerlink&quot; title=&quot;周报&quot;&gt;&lt;/a&gt;周报&lt;/h2&gt;&lt;h3 id=&quot;2019-08-19—-2019-08-23&quot;&gt;&lt;a href=&quot;#2019-08-19—-2019-08-23&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="http://jiugework.gitee.io/2019/09/11/js/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://jiugework.gitee.io/2019/09/11/js/判断数据类型/</id>
    <published>2019-09-11T08:08:10.000Z</published>
    <updated>2019-09-11T09:09:14.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="六种"><a href="#六种" class="headerlink" title="六种"></a>六种</h4><ul><li>Boolean. 布尔值，true 和 false.</li><li>null. 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，此 null 与 Null、NULL或其他变量完全不同。</li><li>undefined. 变量未定义时的属性。</li><li>Number. 表示数字，例如： 42 或者 3.14159。</li><li>String. 表示字符串，例如：”Howdy”</li><li>Symbol ( 在 ECMAScript 6 中新添加的类型).。一种数据类型，它的实例是唯一且不可改变的。<blockquote><p>除 Object 以外的所有类型都是不可变的（值本身无法被改变）。例如，与 C 语言不同，JavaScript 中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“原始值”。</p></blockquote><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><h4 id="三大引用类型"><a href="#三大引用类型" class="headerlink" title="三大引用类型"></a>三大引用类型</h4></li><li>Object</li><li>Array</li><li>Function</li></ul><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj</span><br><span class="line"><span class="keyword">var</span> obj2 = shallowCopy(obj);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dst = &#123;&#125;;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">         <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class="line">             dst[prop] = src[prop];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br><span class="line"> </span><br><span class="line">obj.a = <span class="number">2</span></span><br><span class="line">obj.b.c = <span class="number">3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;a: 2, b: &#123;c: 3&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 2, b: &#123;c: 3&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: &#123;c: 3&#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这段代码可以说明赋值得到的对象 obj1 只是将指针改变，其引用的仍然是同一个对象，而浅拷贝得到的的 obj2 则是重新创建了新对象。但是，如果原对象obj中存在另一个对象，则不会对对象做另一次拷贝，而是只复制其变量对象的地址。这是因为浅拷贝只复制一层对象的属性，并不包括对象里面的为引用类型的数据。<br>对于数组，更长见的浅拷贝方法便是slice(0)和 concat()<br>ES6 比较常见的浅拷贝方法便是 Object.assign</p></blockquote><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p><strong>1. JSON.parse(JSON.stringify(obj))</strong><br>对于常规的对象，我们可以通过<code>JSON.stringify</code>来讲对象转成一个字符串，然后在用<code>JSON.parse</code>来为其分配另一个存储地址，这样可以解决内存地址指向同一个的问题。</p><p>但是<code>JSON.parse()</code>、<code>JSON.stringify</code>也存在一个问题，<code>JSON.parse()</code>和<code>JSON.stringify</code>能正确处理的对象只有<code>Number、String、Array</code>等能够被 json 表示的数据结构，因此函数这种不能被 json 表示的类型将不能被正确处理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target=&#123;</span><br><span class="line">  a:<span class="number">8</span>,</span><br><span class="line">  b:<span class="number">2</span>,</span><br><span class="line">  c:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"66"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'结果'</span>,<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(target)))</span><br><span class="line"><span class="comment">//结果 &#123; a: 8, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>遍历实现属性复制<br>既然浅拷贝只能实现非object第一层属性的复制，那么遇到object只需要通过递归实现浅拷贝其中内部的属性即可：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">'object'</span>) &#123;</span><br><span class="line">    target = <span class="built_in">Array</span>.isArray(source) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> source[key] !== <span class="string">'object'</span>) &#123;</span><br><span class="line">          target[key] = source[key]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          target[key] = extend(source[key])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target = source</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newobj=extend(obj);</span><br><span class="line">newobj.a=<span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"newobj"</span>,newobj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj"</span>,obj);</span><br><span class="line"><span class="comment">// newobj &#123; a: 11 &#125;</span></span><br><span class="line"><span class="comment">// obj &#123; a: 88 &#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h3&gt;&lt;h4 id=&quot;六种&quot;&gt;&lt;a href=&quot;#六种&quot; class=&quot;headerlink&quot; title=&quot;六种&quot;&gt;&lt;/a&gt;六种&lt;/h
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="基本类型" scheme="http://jiugework.gitee.io/tags/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="引用类型" scheme="http://jiugework.gitee.io/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="浅拷贝" scheme="http://jiugework.gitee.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="深拷贝" scheme="http://jiugework.gitee.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>时间处理</title>
    <link href="http://jiugework.gitee.io/2019/09/11/js/Date/"/>
    <id>http://jiugework.gitee.io/2019/09/11/js/Date/</id>
    <published>2019-09-11T07:43:30.000Z</published>
    <updated>2019-09-11T08:06:03.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><h4 id="JavaScript-获取当前时间戳："><a href="#JavaScript-获取当前时间戳：" class="headerlink" title="JavaScript 获取当前时间戳："></a>JavaScript 获取当前时间戳：</h4><ul><li><code>(new Date()).valueOf()</code>—–1568188278244</li><li><code>new Date().getTime()</code>—–1568188358973</li><li><code>Date.parse(new Date())</code>—–1568188189000<br>第一、第二种：会精确到毫秒<br>第三种：只能精确到秒，毫秒用000替代<br>以上三个输出结果可观察其区别<br>注意：获取到的时间戳除以1000就可获得Unix时间戳，就可传值给后台得到。</li></ul><h4 id="时间处理工具"><a href="#时间处理工具" class="headerlink" title="时间处理工具"></a>时间处理工具</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;*传入的时间 传入'newTime'表示格式化当前时间&#125; date </span></span><br><span class="line"><span class="comment"> * @param &#123;*输出的格式&#125; format </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> dateTools = <span class="function">(<span class="params">date, format</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  format = format.toUpperCase();</span><br><span class="line">  date=  date == <span class="string">'newTime'</span> ? <span class="keyword">new</span> <span class="built_in">Date</span>() : <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">  <span class="comment">// date = new Date(date);</span></span><br><span class="line">  <span class="keyword">let</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">let</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> day = date.getDate();</span><br><span class="line">  <span class="keyword">let</span> hour = date.getHours();</span><br><span class="line">  <span class="keyword">let</span> minute = date.getMinutes();</span><br><span class="line">  <span class="keyword">let</span> second = date.getSeconds();</span><br><span class="line">  [year, month, day, hour, minute, second] = [year, month, day, hour, minute, second].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;= <span class="number">10</span> ? item : <span class="string">'0'</span> + item</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (format == <span class="string">'YMD'</span>) &#123;</span><br><span class="line">    result = [year, month, day].join(<span class="string">'-'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format == <span class="string">'YMDHM'</span>) &#123;</span><br><span class="line">    result = [year, month, day].join(<span class="string">'-'</span>) + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format == <span class="string">'MD'</span>) &#123;</span><br><span class="line">    result = [month, day].join(<span class="string">'-'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;时间戳&quot;&gt;&lt;a href=&quot;#时间戳&quot; class=&quot;headerlink&quot; title=&quot;时间戳&quot;&gt;&lt;/a&gt;时间戳&lt;/h3&gt;&lt;h4 id=&quot;JavaScript-获取当前时间戳：&quot;&gt;&lt;a href=&quot;#JavaScript-获取当前时间戳：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Date" scheme="http://jiugework.gitee.io/categories/Date/"/>
    
    
  </entry>
  
  <entry>
    <title>http面试题</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http经典面试题/</id>
    <published>2019-09-01T14:16:02.508Z</published>
    <updated>2019-09-01T14:25:31.309Z</updated>
    
    <content type="html"><![CDATA[<p>问题：从用户输入URl按下回车，一直到用户能看到界面，期间经历了什么？</p><p> 一、DNS解析（缓存）：<br>     1.找浏览器DNS缓存解析域名<br>     2.找本机DNS缓存：ipconfig/displaydns &gt; C:/dns.txt<br>     3.找路由器DNS缓存<br>     4.找运营商DNS缓存（百分之80的DNS查找，到这一步就结束）<br>     5.递归查询，（最不愿意看到的事，查询的是全球13台DNS根服务器中的一个）</p><p> 二、进行TCP（协议）连接，三次握手（根据上一步请求回来的ip地址，去联系服务器）<br>     第一次握手：由浏览器发给服务器，我想和你说话，你能“听见”嘛？<br>     第二次握手：由服务器发给浏览器，我能听得见，你说吧！<br>     第三次握手：由浏览器发给服务器，好，那我就开始说话。</p><p> 三、发送请求（请求报文）</p><p> 四、得到响应（响应报文）</p><p> 五、浏览器开始解析html<br>       –预解析：将所有外部的资源，发请求出去<br>       –解析html，生成DOM树<br>       –解析CSS，生成CSSOM树<br>       –合并成一个render树<br>       –js是否操作了DOM或样式<br>           –有：进行重绘重排（不好，1.尽量避免；2.最小化重绘重排）<br>           –没有：null<br>       –最终展示界面</p><p>  六、断开TCP连接，四次挥手（确保数据的完整性）<br>       第一次挥手：由浏览器发给服务器，我的东西接受完了，你关闭吧。<br>       第二次挥手：由服务器发给浏览器，我还有一些东西没接收完，你等一会，我接收好了我告诉你<br>       第三次挥手：由服务器发给浏览器，我接收完了，你断开吧<br>       第四次挥手：由浏览器发给服务器，好的，那我断开了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：从用户输入URl按下回车，一直到用户能看到界面，期间经历了什么？&lt;/p&gt;
&lt;p&gt; 一、DNS解析（缓存）：&lt;br&gt;     1.找浏览器DNS缓存解析域名&lt;br&gt;     2.找本机DNS缓存：ipconfig/displaydns &amp;gt; C:/dns.txt&lt;b
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>Http状态码</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http状态码/</id>
    <published>2019-09-01T14:14:49.235Z</published>
    <updated>2019-09-01T14:23:15.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Http状态码（服务器给客户端的东西）"><a href="#Http状态码（服务器给客户端的东西）" class="headerlink" title="Http状态码（服务器给客户端的东西）"></a>Http状态码（服务器给客户端的东西）</h3><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>告诉客户端，当前服务器处理请求的结果</li></ul><h3 id="http状态码的分类"><a href="#http状态码的分类" class="headerlink" title="http状态码的分类"></a>http状态码的分类</h3><ul><li>1xx : 服务器已经收到了本次请求，但是还需要进一步的处理才可以。</li><li>2xx : 服务器已经收到了本次请求，且已经分析、处理等……..最终处理完毕！</li><li>3xx : 服务器已经接收到了请求，还需要其他的资源，或者重定向到其他位置，甚至交给其他服务器处理。</li><li>4xx ：一般指请求的参数或者地址有错误， 出现了服务器无法理解的请求（一般是前端的锅）。</li><li>5xx ：服务器内部错误（不是因为请求地址或者请求参数不当造成的），无法响应用户请求（一般是后端人员的锅）。</li></ul><h3 id="常见的几个状态码"><a href="#常见的几个状态码" class="headerlink" title="常见的几个状态码"></a>常见的几个状态码</h3><ul><li>200 ：成功（最理想状态）</li><li>301 ：重定向，被请求的旧资源永久移除了（不可以访问了），将会跳转到一个新资源，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址；</li><li>302 ：重定向，被请求的旧资源还在（仍然可以访问），但会临时跳转到一个新资源，搜索引擎会抓取新的内容而保存旧的网址。</li><li>304 ：请求资源重定向到缓存中（命中了协商缓存）。</li><li>404 ：资源未找到，一般是客户端请求了不存在的资源。</li><li>500 ：服务器收到了请求，但是服务器内部产生了错误。</li><li>502 ：连接服务器失败（服务器在处理一个请求的时候，或许需要其他的服务器配合，但是联系不上其他的服务器了）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Http状态码（服务器给客户端的东西）&quot;&gt;&lt;a href=&quot;#Http状态码（服务器给客户端的东西）&quot; class=&quot;headerlink&quot; title=&quot;Http状态码（服务器给客户端的东西）&quot;&gt;&lt;/a&gt;Http状态码（服务器给客户端的东西）&lt;/h3&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>响应报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/响应报文/</id>
    <published>2019-09-01T14:13:51.199Z</published>
    <updated>2019-09-01T14:22:17.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析响应报文（给浏览器看的）"><a href="#分析响应报文（给浏览器看的）" class="headerlink" title="分析响应报文（给浏览器看的）"></a>分析响应报文（给浏览器看的）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 27</span><br><span class="line">ETag: W/"1b-q8c2w67PUz7P4t0CNbDw9xqw6bo"</span><br><span class="line">Date: Tue, 23 Jul 2019 06:20:18 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><pre><code>&lt;h2&gt;我是美食界面&lt;/h2&gt;</code></pre><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">协议名/协议版本 状态码</span><br></pre></td></tr></table></figure><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">X-Powered-By: Express</span><br><span class="line">    -服务器所使用的框架</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">    -告诉浏览器解析文件的方式；文件编码方式</span><br><span class="line">Content-Length: 27</span><br><span class="line">    -响应体的长度</span><br><span class="line">ETag: W/"1b-NFYx6TA4AihYceTsWYDlBLJferg"</span><br><span class="line">    -协商缓存（资源唯一标识）</span><br><span class="line">Date: Tue, 23 Jul 2019 06:20:18 GMT</span><br><span class="line">    -日期</span><br><span class="line">Connection: keep-alive</span><br><span class="line">    -告诉浏览器，服务器支持长连接</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>&lt;h2&gt;我是美食界面&lt;/h2&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析响应报文（给浏览器看的）&quot;&gt;&lt;a href=&quot;#分析响应报文（给浏览器看的）&quot; class=&quot;headerlink&quot; title=&quot;分析响应报文（给浏览器看的）&quot;&gt;&lt;/a&gt;分析响应报文（给浏览器看的）&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>POST请求报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/POST%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/POST请求报文/</id>
    <published>2019-09-01T14:12:38.040Z</published>
    <updated>2019-09-01T14:24:10.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析POST请求报文-给服务器看的"><a href="#分析POST请求报文-给服务器看的" class="headerlink" title="分析POST请求报文(给服务器看的)"></a>分析POST请求报文(给服务器看的)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:3000/demo HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://localhost:63342</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">DNT: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://localhost:63342/node/day04/1.express%E6%9C%8D%E5%8A%A1%E5%99%A8/demo.html?_ijt=tjfnb0cpos62ql8umjmm9v24ve</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie: Webstorm-9af2238=09820128-3adb-43e4-8242-a6f65c9e523a</span><br><span class="line"></span><br><span class="line">name=kobe&amp;age=18</span><br></pre></td></tr></table></figure><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:3000/demo HTTP/1.1</span><br><span class="line">    -</span><br></pre></td></tr></table></figure><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:3000</span><br><span class="line">    --访问的主机名（地址，仅仅包含主机名+端口号）</span><br><span class="line">Connection: keep-alive</span><br><span class="line">    --告诉服务器，浏览器端支持长连接</span><br><span class="line">Content-Length: 16</span><br><span class="line">    --请求体的长度</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">    --用于控制强缓存</span><br><span class="line">Origin: http://localhost:63342</span><br><span class="line">    --当前所处位置（主机位置+端口位置）</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">    --告诉服务器，浏览器端支持https协议</span><br><span class="line">DNT: 1</span><br><span class="line">    --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    --标识该请求是来自于一个form表单，并且以urlencoded形式进行编码</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">    --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">    --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1</span><br><span class="line">Referer: http://localhost:63342/node/day04/1.express%E6%9C%8D%E5%8A%A1%E5%99%A8/demo.html?_ijt=tjfnb0cpos62ql8umjmm9v24ve</span><br><span class="line">    --在当前url下发出去的请求，是一个完整url，也可以做防盗链、同时也可以做广告计费</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">    --告诉服务器浏览器能支持的文件压缩格式</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">    --告诉服务器，浏览器能够接受的语言</span><br><span class="line">Cookie: Webstorm-9af2238=09820128-3adb-43e4-8242-a6f65c9e523a</span><br><span class="line">    --Webstorm帮你“种”的一个cookie</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=kobe&amp;age=18</span><br><span class="line">    --携带过去的数据，以urlencoded进行编码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析POST请求报文-给服务器看的&quot;&gt;&lt;a href=&quot;#分析POST请求报文-给服务器看的&quot; class=&quot;headerlink&quot; title=&quot;分析POST请求报文(给服务器看的)&quot;&gt;&lt;/a&gt;分析POST请求报文(给服务器看的)&lt;/h3&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>GET请求报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/GET%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/GET请求报文/</id>
    <published>2019-09-01T14:11:33.220Z</published>
    <updated>2019-09-01T14:20:37.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析GET请求报文-给服务器看的"><a href="#分析GET请求报文-给服务器看的" class="headerlink" title="分析GET请求报文(给服务器看的)"></a>分析GET请求报文(给服务器看的)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:3000/meishi HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">DNT: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">空行</span><br><span class="line">空行</span><br></pre></td></tr></table></figure><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:3000/meishi HTTP/1.1 </span><br><span class="line"> //请求类型 协议名://主机名:端口号/路由关键词 使用协议的版本</span><br></pre></td></tr></table></figure></code></pre><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:3000</span><br><span class="line">      --访问的主机名（地址，仅仅包含主机名+端口号）</span><br><span class="line">      --防盗链、广告计费</span><br><span class="line">Connection: keep-alive</span><br><span class="line">      --告诉服务器，浏览器端支持长连接</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">      --告诉服务器，浏览器端支持https协议</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">      --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。</span><br><span class="line">DNT: 1</span><br><span class="line">      --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">      --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">      --告诉服务器浏览器能支持的文件压缩格式</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">      --告诉服务器，浏览器能够接受的语言</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>GET 请求没有报文体</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析GET请求报文-给服务器看的&quot;&gt;&lt;a href=&quot;#分析GET请求报文-给服务器看的&quot; class=&quot;headerlink&quot; title=&quot;分析GET请求报文(给服务器看的)&quot;&gt;&lt;/a&gt;分析GET请求报文(给服务器看的)&lt;/h3&gt;&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>Http协议</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http协议/</id>
    <published>2019-09-01T14:06:53.112Z</published>
    <updated>2019-09-01T14:11:17.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http协议是什么？"><a href="#http协议是什么？" class="headerlink" title="http协议是什么？"></a>http协议是什么？</h3><ul><li>是什么：超文本传输协议（属于应用层协议）</li><li>特点：无状态，现在cookie解决了无状态的问题（早期网页开发时，用cookie解决，现在是cookie和session配合使用）</li><li>作用：规定了服务器和客户端传递信息的规则（统称为报文，分为：请求报文、响应报文。）</li><li>版本：<ul><li>http 1.0 （老版本） ———-  不支持长连接</li><li>http 1.1 （主流版本）———  优点：支持长连接，弊端：同时发送资源的数量过小。</li><li>http 2.0 （最新版） ———-  同时发送资源的数量稍有提升。</li></ul></li><li>报文(请求报文、响应报文)的组成：<ul><li>报文首行</li><li>报文头</li><li>空行（仅仅作为一个分割）</li><li>报文体</li></ul></li></ul><p>### </p><h3 id="分析GET请求报文-给服务器看的"><a href="#分析GET请求报文-给服务器看的" class="headerlink" title="分析GET请求报文(给服务器看的)"></a>分析GET请求报文(给服务器看的)</h3><pre><code>GET http://localhost:3000/meishi HTTP/1.1Host: localhost:3000Connection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36DNT: 1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7空行空行</code></pre><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><pre><code>GET http://localhost:3000/meishi HTTP/1.1    -请求类型 协议名://主机名:端口号/路由关键词 使用协议的版本</code></pre><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><pre><code>Host: localhost:3000      --访问的主机名（地址，仅仅包含主机名+端口号）      --防盗链、广告计费Connection: keep-alive      --告诉服务器，浏览器端支持长连接Upgrade-Insecure-Requests: 1      --告诉服务器，浏览器端支持https协议User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36      --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。DNT: 1      --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3      --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1Accept-Encoding: gzip, deflate, br      --告诉服务器浏览器能支持的文件压缩格式Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7      --告诉服务器，浏览器能够接受的语言</code></pre><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>GET 请求没有报文体</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;http协议是什么？&quot;&gt;&lt;a href=&quot;#http协议是什么？&quot; class=&quot;headerlink&quot; title=&quot;http协议是什么？&quot;&gt;&lt;/a&gt;http协议是什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;是什么：超文本传输协议（属于应用层协议）&lt;/li&gt;
&lt;li&gt;特点
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>mongoose的增删改查</title>
    <link href="http://jiugework.gitee.io/2019/08/31/node/mongoose%E7%9A%84CRUD/"/>
    <id>http://jiugework.gitee.io/2019/08/31/node/mongoose的CRUD/</id>
    <published>2019-08-31T14:32:20.819Z</published>
    <updated>2019-11-22T06:55:01.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ul><li>模型对象.create(文档对象，回调函数)</li><li>模型对象.create(文档对象)<h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4></li><li>模型对象.find(查询条件[,投影])不管有没有数据，都返回一个数组</li><li>模型对象.find(查询对象,{age:0})过滤掉id</li><li><p>模型对象.findOne(查询条件[,投影])找到了返回一个对象，没找到返回null</p><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4></li><li><p>模型对象.updateOne(查询条件,要更新的内容[,配置对象])</p></li><li><p>模型对象.updateMany(查询条件,要更新的内容[,配置对象])<br> 备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateOne或updateMany</p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4></li><li><p>模型对象.deleteOne(查询条件)</p></li><li>模型对象.deleteMany(查询条件)<br>  备注：没有delete方法，会报错！</li></ul><h3 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h3><p><code>模型对象.update({},{$set:{adj_close_price:&#39;0.0&#39;}},{multi:true})</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: <span class="xml"><span class="tag">&lt;<span class="name">boolean</span>&gt;</span>,</span></span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;,</span><br><span class="line">     collation: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>query字段，新增字段，全量查询，所以是{}</li><li>update字段，就是利用$set操作符来 新增字段，并赋值</li><li>后面的四个配置项，multi是必须的，如果不配置true, 默认只有第一列新增了。</li></ul><h3 id="删除uname字段"><a href="#删除uname字段" class="headerlink" title="删除uname字段"></a>删除uname字段</h3><p><code>模型对象.update({},{$unset:{uname:&quot;&quot;}},false,true)</code></p><h3 id="修改字段，把content改为mcontent"><a href="#修改字段，把content改为mcontent" class="headerlink" title="修改字段，把content改为mcontent"></a>修改字段，把content改为mcontent</h3><p><code>db.atest.update({}, {$rename : {&quot;content&quot; : &quot;mcontent&quot;}}, false, true)</code></p><ul><li><p>criteria：查询条件</p></li><li><p>objNew：update对象和一些更新操作符</p></li><li><p>upsert：如果不存在update的记录，是否插入objNew这个新的文档，true为插入，默认为false，不插入。</p></li><li><p>multi：默认是false，只更新找到的第一条记录。如果为true，把按条件查询出来的记录全部更新。</p></li></ul><h3 id="备注：-以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象"><a href="#备注：-以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象" class="headerlink" title="备注： 以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象"></a>备注： 以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Create&quot;&gt;&lt;a href=&quot;#Create&quot; class=&quot;headerlink&quot; title=&quot;Create&quot;&gt;&lt;/a&gt;Create&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模型对象.create(文档对象，回调函数)&lt;/li&gt;
&lt;li&gt;模型对象.create(文档对象
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://jiugework.gitee.io/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>GET请求与POST请求</title>
    <link href="http://jiugework.gitee.io/2019/08/31/node/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/"/>
    <id>http://jiugework.gitee.io/2019/08/31/node/GET请求与POST请求/</id>
    <published>2019-08-31T14:28:02.677Z</published>
    <updated>2019-08-31T15:42:41.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GET请求与POST请求"><a href="#GET请求与POST请求" class="headerlink" title="GET请求与POST请求"></a>GET请求与POST请求</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>HTTP请求，最初设定了八种方法（也称为“动作”）。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。<br>八种方法分别为：OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT<br>这八种方法最终经过“岁月沉淀”后，常用的只有两种，即：GET和POST</p></blockquote><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>含义：从指定的资源获取数据（一种“索取”的感觉）。</li><li>什么时候使用GET请求较为合适？<ul><li>单纯获取数据的时。</li><li>请求中不包含敏感数据时。</li></ul></li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>含义：向指定的资源提交要被处理的数据（一种“交差”的感觉）。</li><li>什么时候使用POST请求较为合适？<ul><li>传送相对敏感数据时。</li><li>请求的结果有持续性的副作用，例如：传递的数据要作为数据源写入数据库时。<br>备注：使用了POST不代表的绝对的安全。</li></ul></li></ul><h3 id="常见的GET请求："><a href="#常见的GET请求：" class="headerlink" title="常见的GET请求："></a>常见的GET请求：</h3><ul><li>浏览器地址栏输入网址时（浏览器请求网页时时GET请求，且不可更改）</li><li>可以请求外部资源的html标签，例如：<img> <a> <link> <script></li><li>发送Ajax时明确指出了使用GET请求</li><li>form表单提交时没有指明方式，默认使用GET</li></ul><h3 id="常见的POST请求："><a href="#常见的POST请求：" class="headerlink" title="常见的POST请求："></a>常见的POST请求：</h3><ul><li>发送Ajax时明确指出了使用POST方式</li><li>使用第三方发送Ajax请求库时明确指出用POST时</li><li>form表单提交时明确指出使用POST方式</li></ul><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p><img src="https://img.jiuge.site/imgbox/20190831/RDV6MlMfYWfB.png?imageslim" alt="mark"></p></script></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GET请求与POST请求&quot;&gt;&lt;a href=&quot;#GET请求与POST请求&quot; class=&quot;headerlink&quot; title=&quot;GET请求与POST请求&quot;&gt;&lt;/a&gt;GET请求与POST请求&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
      <category term="GET" scheme="http://jiugework.gitee.io/tags/GET/"/>
    
      <category term="POST" scheme="http://jiugework.gitee.io/tags/POST/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://jiugework.gitee.io/2019/08/30/node/MongoDB/"/>
    <id>http://jiugework.gitee.io/2019/08/30/node/MongoDB/</id>
    <published>2019-08-30T01:27:29.214Z</published>
    <updated>2019-11-22T06:44:35.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB原生CRUD（增删改查）命令总结"><a href="#MongoDB原生CRUD（增删改查）命令总结" class="headerlink" title="MongoDB原生CRUD（增删改查）命令总结"></a>MongoDB原生CRUD（增删改查）命令总结</h2><p>-C creat：</p><ul><li>db.集合名.insert(文档对象)</li><li>db.集合名.insertOne(文档对象)</li><li>db.集合名.insertMany([文档对象，文档对象])</li></ul><p>-R read：</p><ul><li><p>db.集合名.find(查询条件[,投影])</p><ul><li>举例:db.students.find({age:18}),查找年龄为18的所有信息</li><li><p>举例:db.students.find({age:18,name:’jack’}),查找年龄为18且名字为jack的学生</p><p>常用操作符：</p><ul><li>&lt; , &lt;= , &gt; , &gt;= , !==   对应为： $lt $lte $gt $gte $ne<br> 举例：db.集合名.find({age:{$gte:20}}),年龄是大于等于20的</li><li>逻辑或：使用$in 或 $or<br>  查找年龄为18或20的学生<br>  举例：db.students.find({age:{$in:[18,20]}})<br>  举例：db.students.find({$or:[{age:18},{age:20}]})</li><li>逻辑非：$nin</li><li>正则匹配：<br>  举例：db.students.find({name:/^T/})</li><li>$where能写函数：<br>  db.students.find({$where:function(){<pre><code>return this.name === &apos;zhangsan&apos; &amp;&amp; this.age === 18</code></pre>  }})</li></ul><p>投影：过滤掉不想要的数据，只保留想要展示的数据<br> 举例：db.students.find({},{_id:0,name:0}),过滤掉id和name<br> 举例：db.students.find({},{age:1}),只保留age</p><p>补充：db.集合名.findOne(查询条件[,投影])，默认只要找到一个</p></li></ul></li></ul><p>-U update：</p><ul><li><p>db.集合名.update(查询条件,要更新的内容[,配置对象])</p><p>  //如下会将更新内容替换掉整个文档对象，但_id不受影响</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{age:19})</code></pre><p>  //使用$set修改指定内容，其他数据不变，不过只能匹配一个zhangsan</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}})</code></pre><p>  //修改多个文档对象，匹配多个zhangsan,把所有zhangsan的年龄都替换为19</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}},{multi:true})</code></pre><p>   补充：db.集合名.updateOne(查询条件,要更新的内容[,配置对象])</p><pre><code>db.集合名.updateMany(查询条件,要更新的内容[,配置对象])</code></pre></li></ul><p>-D delete</p><ul><li>db.集合名.remove(查询条件)<pre><code>//删除所有年龄小于等于19的学生举例：db.students.remove({age:{$lte:19}})</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB原生CRUD（增删改查）命令总结&quot;&gt;&lt;a href=&quot;#MongoDB原生CRUD（增删改查）命令总结&quot; class=&quot;headerlink&quot; title=&quot;MongoDB原生CRUD（增删改查）命令总结&quot;&gt;&lt;/a&gt;MongoDB原生CRUD（增删改
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://jiugework.gitee.io/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>包管理工具</title>
    <link href="http://jiugework.gitee.io/2019/08/26/node/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://jiugework.gitee.io/2019/08/26/node/包管理工具/</id>
    <published>2019-08-26T02:18:20.716Z</published>
    <updated>2019-08-31T15:41:10.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><strong>移除</strong></p><p><code>npm remove 包名字</code> 在node_module中删除xxxx包,并且删除该包在package.json中的声助</p><p><strong>其他命令</strong></p><ul><li>npm aduit fix :检测项目依赖中的一些问题,并且尝试着修复。</li><li>npm view  包名字 versions: 查npm仓库中xxx包的所有版本信息</li><li>npm view 包名字 version: 查npm仓库中xxxx包的最新版本</li><li>npm ls 包名字 查看我们所安装xxx包的版本</li></ul><p><strong>关于版本号的说明</strong></p><ul><li><code>&quot;^3.x.x&quot;</code> :<strong>锁定大版本</strong>以后安装包的时候,保证包是3.对x版本,x默认取最新的。</li><li>“~3.1.x”：<strong>锁定小版本</strong>,以后安装包的时候,保证包是3.1.x版本,x默认取最新的。</li><li>“3.1.1”：<strong>锁定完整版本</strong>,以后安装包的时候,保证包必须是3.1.1版本。</li></ul><h2 id="cnpm的简介与使用"><a href="#cnpm的简介与使用" class="headerlink" title="cnpm的简介与使用"></a>cnpm的简介与使用</h2><h3 id="1-国内使用npm存在的问题"><a href="#1-国内使用npm存在的问题" class="headerlink" title="1.国内使用npm存在的问题"></a>1.国内使用npm存在的问题</h3><ul><li>安装npm后，每次我们安装包时，我们的电脑都要和npm服务器进行对话，去npm仓库获取包。</li><li>npm默认的仓库地址为：<a href="http://registry.npmjs.org" target="_blank" rel="noopener">http://registry.npmjs.org</a> </li><li>查看当前npm仓库地址命令：   <code>npm config get registry</code>  提示如下图：</li></ul><p><img src="https://s2.ax1x.com/2019/01/08/FqtKhR.png" alt="Alt text"><br>因为npm的远程服务器在国外，所以有时候难免出现访问过慢，甚至无法访问的情况。<br>为了解决这个问题，我们有以下几个解决办法</p><h3 id="2-使用淘宝的cpm代替npm"><a href="#2-使用淘宝的cpm代替npm" class="headerlink" title="2.使用淘宝的cpm代替npm"></a>2.使用淘宝的cpm代替npm</h3><blockquote><p>淘宝为我们搭建了一个国内的npm服务器，它目前是每隔10分钟将国外npm仓库的所有内容“搬运”回国内的服务器上，这样我们直接访问淘宝的国内服务器就可以了，它的地址是：<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><h4 id="第一种：直接安装cnpm"><a href="#第一种：直接安装cnpm" class="headerlink" title="第一种：直接安装cnpm"></a>第一种：直接安装cnpm</h4><p>安装淘宝提供的cnpm，并更改服务器地址为淘宝的国内地址，<br>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，以后安装直接采用<code>cpm</code>替代<code>npm</code>，<br>例如原生npm命令为：<code>npm install uniq --save</code>，cnpm命令为：<code>cnpm install uniq --save</code></p><h4 id="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"><a href="#第二种：替换npm仓库地址为淘宝镜像地址（推荐）" class="headerlink" title="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"></a>第二种：替换npm仓库地址为淘宝镜像地址（推荐）</h4><p>命令：npm config set registry <a href="https://registry.npm.taobao.org`，" target="_blank" rel="noopener">https://registry.npm.taobao.org`，</a><br>查看是否更改成功：<code>npm config get registry</code>，以后安装时，依然用npm命令，但是实际是从淘宝国内服务器下载的</p><h2 id="yarn的简介与使用"><a href="#yarn的简介与使用" class="headerlink" title="yarn的简介与使用"></a>yarn的简介与使用</h2><blockquote><p>Yarn发布于2016年10月，截至当前2019年1月，gitHub上的Start数量为：34.3k，已经超过npm很多了，<br>yarn使用本地缓存，无需互联网连接就能安装本地已经缓存的依赖项，安装方法：<code>npm install -g yarn</code></p></blockquote><h4 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h4><p>由于yarn的全局安装位置与npm不同，所以要配置yarn的全局安装路径到环境变量中，否则全局安装的包不起作用。<br>具体操作如下：</p><blockquote><p>安装yarn后执行 <code>yarn global dir</code>命令,获取yarn全局安装位置。<br>讲该位置配置到电脑环境变量中</p></blockquote><h3 id="yarn命令与npm命令的对应关系如下："><a href="#yarn命令与npm命令的对应关系如下：" class="headerlink" title="yarn命令与npm命令的对应关系如下："></a>yarn命令与npm命令的对应关系如下：</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目:"></a>初始化项目:</h4><pre><code>yarn init -ynpm init -y</code></pre><h4 id="下载项目的所有声明的依赖"><a href="#下载项目的所有声明的依赖" class="headerlink" title="下载项目的所有声明的依赖:"></a>下载项目的所有声明的依赖:</h4><pre><code>yarnnpm install</code></pre><h4 id="下载指定的运行时依赖包"><a href="#下载指定的运行时依赖包" class="headerlink" title="下载指定的运行时依赖包:"></a>下载指定的运行时依赖包:</h4><pre><code>yarn add webpack@3.2.1npm install webpack@3.2.1 -S</code></pre><h4 id="下载指定的开发时依赖"><a href="#下载指定的开发时依赖" class="headerlink" title="下载指定的开发时依赖:"></a>下载指定的开发时依赖:</h4><pre><code>yarn add webpack@3.2.1 -Dnpm install webpack@3.2.1 -D</code></pre><h4 id="全局下载指定包"><a href="#全局下载指定包" class="headerlink" title="全局下载指定包:"></a>全局下载指定包:</h4><pre><code>yarn global add webpacknpm install webpack -g</code></pre><h4 id="删除依赖包"><a href="#删除依赖包" class="headerlink" title="删除依赖包:"></a>删除依赖包:</h4><pre><code>yarn remove webpacknpm remove webpack -Syarn global remove webpacknpm remove webpack -g</code></pre><h4 id="运行项目中配置的script"><a href="#运行项目中配置的script" class="headerlink" title="运行项目中配置的script:"></a>运行项目中配置的script:</h4><pre><code>yarn run xxxnpm run xxx</code></pre><h4 id="查看某个包的信息"><a href="#查看某个包的信息" class="headerlink" title="查看某个包的信息:"></a>查看某个包的信息:</h4><pre><code>yarn info xxxnpm info xxx</code></pre><h4 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像:"></a>设置淘宝镜像:</h4><pre><code>yarn config set registry https://registry.npm.taobao.orgnpm config set registry https://registry.npm.taobao.org</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;移除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm remove 包名字&lt;/code&gt; 在node_modul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node函数特点</title>
    <link href="http://jiugework.gitee.io/2019/08/25/node/Node%E5%87%BD%E6%95%B0/"/>
    <id>http://jiugework.gitee.io/2019/08/25/node/Node函数/</id>
    <published>2019-08-25T14:55:44.544Z</published>
    <updated>2019-09-01T14:24:59.839Z</updated>
    
    <content type="html"><![CDATA[<p>#模板</p><ul><li><p>Node中任何一个模块(js文件)都被一个外层函数所包裹</p></li><li><p><code>function (exports, require, module, filename, dirname)</code> {}</p></li><li><p><strong>exports</strong>:用于暴露模块</p></li><li><p><strong>require</strong>:用于引入模块</p></li><li><p><strong>module</strong>:用于暴露模块</p></li><li><p><strong>filename</strong>: 当前文件所在的路径(绝对)</p></li><li><p><strong>dirname</strong>: 当前文件所在文件夹的路径(绝对) </p></li></ul><p>  为什么要有这个外层函数(这个外层函数有什么作用?) </p><p>   1,隐藏内部实现。</p><p>   2.支持CommonJs的模块化T Node函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#模板&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node中任何一个模块(js文件)都被一个外层函数所包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;function (exports, require, module, filename, dirname)&lt;/code&gt; {}&lt;
      
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://jiugework.gitee.io/2019/08/25/node/%E6%A8%A1%E6%9D%BF/"/>
    <id>http://jiugework.gitee.io/2019/08/25/node/模板/</id>
    <published>2019-08-25T13:55:48.144Z</published>
    <updated>2019-08-31T14:37:52.380Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
      <category term="generator" scheme="http://jiugework.gitee.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>父子组件传值</title>
    <link href="http://jiugework.gitee.io/2019/08/01/Vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://jiugework.gitee.io/2019/08/01/Vue/父子组件传值/</id>
    <published>2019-08-01T13:27:13.809Z</published>
    <updated>2019-12-10T07:19:43.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一、props-emit"><a href="#方法一、props-emit" class="headerlink" title="方法一、props/$emit"></a>方法一、props/$emit</h2><p><img src="https://img.jiuge.site/imgbox/20191209/aSbYGLBsKmrL.png?imageslim" alt="mark"></p><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ol><li>组件中的所有pzops中的数据,都是通过父组件传递给子组件的 </li><li>props中的数据,都是只读的,无法重新赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;son :parentdata=<span class="string">'message'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span> </span><br><span class="line">    &lt;!-- parentdata作为子组件的接收值，</span><br><span class="line">      message为父组件数组作为传给子组件的值</span><br><span class="line">    简单来讲 把父组件message的值传给子组件son，son通过 props[<span class="string">'parentdata'</span>]接收</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">'hahah '</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      son:&#123;</span><br><span class="line">        props:[<span class="string">'parentdata'</span>],</span><br><span class="line">        <span class="comment">//只可读不可写 可以写成对象形式</span></span><br><span class="line">        template:<span class="string">`&lt;div&gt;&#123;&#123;parentdata&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子传父（通过事件形式）"><a href="#子传父（通过事件形式）" class="headerlink" title="子传父（通过事件形式）"></a>子传父（通过事件形式）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q"</span> @<span class="attr">click</span>=<span class="string">"sendMyDataMsg"</span>&gt;</span>c1+&#123;&#123;c1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendMyDataMsg() &#123;</span><br><span class="line">      console.log(1);</span><br><span class="line">      this.$emit("pushMyMsg",'传值给父组件');</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">c1</span> <span class="attr">:c1</span>=<span class="string">"msg1"</span> @<span class="attr">pushMyMsg</span>=<span class="string">"getSonMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">c1</span>&gt;</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    getSonMsg(e) &#123;</span><br><span class="line">      console.log(13)</span><br><span class="line">      console.log("乀",e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="方法二-emit-on"><a href="#方法二-emit-on" class="headerlink" title="方法二 $emit/$on"></a>方法二 $emit/$on</h2><blockquote><p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。</p><ul><li>具体实现方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> Event=<span class="keyword">new</span> Vue();</span><br><span class="line">Event.$emit(事件名,数据);</span><br><span class="line">Event.$on(事件名,data =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>假设组件有三个，分别是父组件Tset、子组件C1、子组件C2，C2 组件如何获取 Test 或者 C1 组件的数据</p><ol><li>新建一个js文件。bus.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">组件C1</span><br><span class="line"> &lt;button @click.stop=<span class="string">"sendEmit"</span>&gt;发送&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">import bus from '../</span>assets/bus<span class="string">'</span></span><br><span class="line"><span class="string"> data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      msg: "I is C1"</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">sendEmit() &#123;</span></span><br><span class="line"><span class="string">      let that=this;</span></span><br><span class="line"><span class="string">       bus.$emit("giao",this.msg);</span></span><br><span class="line"><span class="string">      console.log("传值")</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">组件C2</span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'../assets/bus'</span></span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">let</span> that=<span class="keyword">this</span>;</span><br><span class="line"> bus.$on(<span class="string">"giao"</span>, arg =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"arg"</span>, arg);<span class="comment">//I is C1</span></span><br><span class="line">        that.msg=arg</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="方法三-Vuex"><a href="#方法三-Vuex" class="headerlink" title="方法三 Vuex"></a>方法三 Vuex</h2><ul><li>state：存储状态（变量）</li><li>getters：对数据获取之前的再次编译，可以理解为state的计算属性。我们在组件中使用 $sotre.getters.fun()</li><li>mutations：修改状态，并且是同步的。在组件中使用$store.commit(‘’,params)。这个和我们组件中的自定义事件类似。</li><li>actions：异步操作。在组件中使用是$store.dispath(‘’)</li><li>modules：store的子模块，为了开发大型项目，方便状态管理而使用的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一、props-emit&quot;&gt;&lt;a href=&quot;#方法一、props-emit&quot; class=&quot;headerlink&quot; title=&quot;方法一、props/$emit&quot;&gt;&lt;/a&gt;方法一、props/$emit&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://im
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="组件传值" scheme="http://jiugework.gitee.io/tags/%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    
      <category term="组件通信" scheme="http://jiugework.gitee.io/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Call</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Call/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Call/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:28:50.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><strong>用法</strong></p><ol><li>调用函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> dr.call() <span class="comment">//play</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Call可以改变函数this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o)</span><br></pre></td></tr></table></figure><p>此时这个函数的this就指向了o这个对象</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line">   <span class="built_in">console</span>.log(x+y);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// play</span></span><br><span class="line"><span class="comment">// &#123;name: "哈哈哈"&#125;</span></span><br><span class="line"><span class="comment">//  3</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      <span class="comment">//把子的this传入到父</span></span><br><span class="line">      <span class="comment">// this指向实例对象</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br></pre></td></tr></table></figure><ul><li><p>继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son. prototype = Father.prototype; <span class="comment">//这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Call&quot;&gt;&lt;a href=&quot;#Call&quot; class=&quot;headerlink&quot; title=&quot;Call&quot;&gt;&lt;/a&gt;Call&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Call" scheme="http://jiugework.gitee.io/tags/Call/"/>
    
  </entry>
  
  <entry>
    <title>Class类</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Class/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Class/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:29:38.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类的本质</strong></p><ol><li>class本质还是function</li><li>类的所有方法都定义在类的prototype属性上</li><li>类创建的实例,里面也有proto-指向类的prototype原型对象</li><li>所以ES6的类它的绝大部分功能, ES5都可以做到,新的class写法只是让对象原型的写法更加清晰、更像面向对编程的语法而已。</li><li>所以ES6的类其实就是语法糖.</li><li>语法糖语法糖就是一种便捷写法.简单理解,有两种方法可以实现同样的功能,但是一种写法更加清晰、方便那么这个方法就是语法糖</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;类的本质&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;class本质还是function&lt;/li&gt;
&lt;li&gt;类的所有方法都定义在类的prototype属性上&lt;/li&gt;
&lt;li&gt;类创建的实例,里面也有proto-指向类的prototype原型对象&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Class" scheme="http://jiugework.gitee.io/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/面向对象/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-08-06T08:59:10.254Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建对象的三中方式"><a href="#创建对象的三中方式" class="headerlink" title="创建对象的三中方式"></a>创建对象的三中方式</h5><ol><li>利用new object()创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>利用 对象字面量创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>通过构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    <span class="keyword">this</span>.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);<span class="comment">//实例化</span></span><br></pre></td></tr></table></figure><h5 id="new在执行会做四件事"><a href="#new在执行会做四件事" class="headerlink" title="new在执行会做四件事"></a>new在执行会做四件事</h5></li><li><p>在内存创建一个空对象</p></li><li>让this指向这个对象</li><li>执行构造函数里面的代码，给这个新对象添加属性以及方法</li><li>返回这个新对象 ）</li></ol><h5 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h5><ul><li><p><strong>实例成员</strong>就是构造函数内部通过this添加的成员，<figure class="highlight plain"><figcaption><span>```sex```   sing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例成员**只能通过实例化的对象来访问</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">         console.log(zxy.name)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>静态成员</strong> 在构造函数本身上添加的的成员就是静态成员</p><ul><li>例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star.age=<span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员</strong>只能通过构造函数来访问</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.sex)<span class="comment">//能访问</span></span><br><span class="line"><span class="built_in">console</span>.log(zxy.sex)<span class="comment">//不能访问</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="prototype构造函数原型"><a href="#prototype构造函数原型" class="headerlink" title="prototype构造函数原型"></a>prototype构造函数原型</h5><blockquote><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。JavaScript规定,<strong>每一个构造函数都有一个prototype属性</strong>,指向另一个对象。注意这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有。<strong>我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.sex=sex;</span><br><span class="line">      <span class="comment">// this.sing=function()&#123;</span></span><br><span class="line">        <span class="comment">//   console.log("唱歌")</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">Star.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);</span><br><span class="line"> <span class="keyword">var</span> cj= <span class="keyword">new</span> Star(<span class="string">'cj'</span>,<span class="string">'男'</span>);</span><br><span class="line">zxy.sing===cj.sing   <span class="comment">//true</span></span><br><span class="line">zxy.sing() <span class="comment">//唱歌</span></span><br></pre></td></tr></table></figure><ol><li><p>原型是什么?</p><p> 一个对象,我们也称为prototype为原型对象</p></li><li><p>原型的作用是什么?</p><p>  共享方法。</p></li></ol><p>一般情况下,我们的公共属性定义到构造函数里面,公共的方法我们放到原型对象身上</p><h5 id="对象原型proto"><a href="#对象原型proto" class="headerlink" title="对象原型proto"></a>对象原型proto</h5><p><strong>对象都会有一个属性_proto</strong>_指向构造函数的prototype原型对象,之所以我们对象可以使用构造函数 prototype原型对象的属性和方法,就是因为对象有proto原型的存在。</p><ul><li><p>proto对象原型和 原型对象prototype是等价的*</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(cj.__proto__===Star.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>方法的查找规则:</p><p>首先先看ldh对象身上是否有sing方法,如果有就执行这个对象上的sing </p><p>如果么有sing这个方法,因为有一proto的存在,就去构造函数原型对象prototype身上去查找 sing这个方法</p><h5 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h5><p><strong>对象原型(proto )</strong>和<strong>构造函数( prototype)</strong>原型对象里面都有一个属性constructor属性, constructor我们称为构造函数，因为它指回构造函数本身。</p><p>作用 </p><p>constructor主要用于记录该对象引用于哪个构造函数,它可以让原型对象重新指向原来的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.proto_);</span><br><span class="line"><span class="built_in">console</span>.log(star.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(ldh. proto_.constructor);</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">star.prototype =&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>: star ,</span><br><span class="line">    sing: function()&#123;</span><br><span class="line">        <span class="built_in">console</span>. log(<span class="string">' 我 歌'</span>);&#125;,</span><br><span class="line">    movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span><span class="number">.1</span>og(<span class="string">'我会演电影);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><h5 id="JavaScript的成员查找机制-规则"><a href="#JavaScript的成员查找机制-规则" class="headerlink" title="JavaScript的成员查找机制(规则)"></a>JavaScript的成员查找机制(规则)</h5><ol><li>当访问一个对象的属性(包括方法)时,首先查找这个<strong>对象自身</strong>有没有该属性。</li><li>如果没有就查找它的原型(也就是proto指向的<strong>prototype原型对象</strong>)。</li><li>如果还没有就查找原型对象的原型(<strong>Object的原型对象</strong>)。</li><li>依此类推一直找到Object为止(<strong>null</strong> )。</li><li>proto对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线。</li></ol><p><img src="/assets/img/原型链.jpg" alt></p><h5 id="给Array添加自定义方法"><a href="#给Array添加自定义方法" class="headerlink" title="给Array添加自定义方法"></a>给Array添加自定义方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.xx=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxx"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> list.xx();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建对象的三中方式&quot;&gt;&lt;a href=&quot;#创建对象的三中方式&quot; class=&quot;headerlink&quot; title=&quot;创建对象的三中方式&quot;&gt;&lt;/a&gt;创建对象的三中方式&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;利用new object()创建对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figur
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="面向对象" scheme="http://jiugework.gitee.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue样式绑定方式</title>
    <link href="http://jiugework.gitee.io/2019/07/22/Vue/%E6%A0%B7%E5%BC%8F/"/>
    <id>http://jiugework.gitee.io/2019/07/22/Vue/样式/</id>
    <published>2019-07-22T12:33:15.236Z</published>
    <updated>2019-07-29T14:25:25.865Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><ul><li>直接传递一个数组 这里的class需要用v-bind绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    .active&#123;</span><br><span class="line">      letter-spacing: 0.5em;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><ul><li>通过三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',flag?'thin':'']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ul><li>把样式放到对象里把key为样式名，把value值绑定到一个bool值上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',&#123;'thin':flag&#125;]"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><ul><li>传入一个对象本质跟第三种方法差不多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:flag,active:true,active:true&#125;"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active',flag?'thin':'']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">'classObj'</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      classObj:&#123;<span class="attr">red</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li><p>直接在元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-weight&apos;:200 &#125;&quot;&gt;变色&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>在data中引用到<code>:style</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :style="&#123;color:'red','font-weight':200 &#125;"&gt;变色&lt;/h1&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript"> <span class="keyword">let</span> vm =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el:<span class="string">'#app'</span>,</span></span><br><span class="line">     data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line"><span class="javascript">        color:<span class="string">'red'</span>,<span class="string">'font-weight'</span>:<span class="number">200</span> </span></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">      </span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三种绑定一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1,styleObj2 ]"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line">        color:'red','font-weight':200 </span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj2:&#123;</span><br><span class="line">        'font-size':'60px'</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直接传递一个数组 这里的class需要用v-bind绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="Vue样式" scheme="http://jiugework.gitee.io/tags/Vue%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
</feed>
