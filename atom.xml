<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>’’Sun--(*^▽^*)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiugework.gitee.io/"/>
  <updated>2019-09-01T14:25:31.309Z</updated>
  <id>http://jiugework.gitee.io/</id>
  
  <author>
    <name>Chen jia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http面试题</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http经典面试题/</id>
    <published>2019-09-01T14:16:02.508Z</published>
    <updated>2019-09-01T14:25:31.309Z</updated>
    
    <content type="html"><![CDATA[<p>问题：从用户输入URl按下回车，一直到用户能看到界面，期间经历了什么？</p><p> 一、DNS解析（缓存）：<br>     1.找浏览器DNS缓存解析域名<br>     2.找本机DNS缓存：ipconfig/displaydns &gt; C:/dns.txt<br>     3.找路由器DNS缓存<br>     4.找运营商DNS缓存（百分之80的DNS查找，到这一步就结束）<br>     5.递归查询，（最不愿意看到的事，查询的是全球13台DNS根服务器中的一个）</p><p> 二、进行TCP（协议）连接，三次握手（根据上一步请求回来的ip地址，去联系服务器）<br>     第一次握手：由浏览器发给服务器，我想和你说话，你能“听见”嘛？<br>     第二次握手：由服务器发给浏览器，我能听得见，你说吧！<br>     第三次握手：由浏览器发给服务器，好，那我就开始说话。</p><p> 三、发送请求（请求报文）</p><p> 四、得到响应（响应报文）</p><p> 五、浏览器开始解析html<br>       –预解析：将所有外部的资源，发请求出去<br>       –解析html，生成DOM树<br>       –解析CSS，生成CSSOM树<br>       –合并成一个render树<br>       –js是否操作了DOM或样式<br>           –有：进行重绘重排（不好，1.尽量避免；2.最小化重绘重排）<br>           –没有：null<br>       –最终展示界面</p><p>  六、断开TCP连接，四次挥手（确保数据的完整性）<br>       第一次挥手：由浏览器发给服务器，我的东西接受完了，你关闭吧。<br>       第二次挥手：由服务器发给浏览器，我还有一些东西没接收完，你等一会，我接收好了我告诉你<br>       第三次挥手：由服务器发给浏览器，我接收完了，你断开吧<br>       第四次挥手：由浏览器发给服务器，好的，那我断开了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：从用户输入URl按下回车，一直到用户能看到界面，期间经历了什么？&lt;/p&gt;
&lt;p&gt; 一、DNS解析（缓存）：&lt;br&gt;     1.找浏览器DNS缓存解析域名&lt;br&gt;     2.找本机DNS缓存：ipconfig/displaydns &amp;gt; C:/dns.txt&lt;b
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>Http状态码</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http状态码/</id>
    <published>2019-09-01T14:14:49.235Z</published>
    <updated>2019-09-01T14:23:15.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Http状态码（服务器给客户端的东西）"><a href="#Http状态码（服务器给客户端的东西）" class="headerlink" title="Http状态码（服务器给客户端的东西）"></a>Http状态码（服务器给客户端的东西）</h3><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li>告诉客户端，当前服务器处理请求的结果</li></ul><h3 id="http状态码的分类"><a href="#http状态码的分类" class="headerlink" title="http状态码的分类"></a>http状态码的分类</h3><ul><li>1xx : 服务器已经收到了本次请求，但是还需要进一步的处理才可以。</li><li>2xx : 服务器已经收到了本次请求，且已经分析、处理等……..最终处理完毕！</li><li>3xx : 服务器已经接收到了请求，还需要其他的资源，或者重定向到其他位置，甚至交给其他服务器处理。</li><li>4xx ：一般指请求的参数或者地址有错误， 出现了服务器无法理解的请求（一般是前端的锅）。</li><li>5xx ：服务器内部错误（不是因为请求地址或者请求参数不当造成的），无法响应用户请求（一般是后端人员的锅）。</li></ul><h3 id="常见的几个状态码"><a href="#常见的几个状态码" class="headerlink" title="常见的几个状态码"></a>常见的几个状态码</h3><ul><li>200 ：成功（最理想状态）</li><li>301 ：重定向，被请求的旧资源永久移除了（不可以访问了），将会跳转到一个新资源，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址；</li><li>302 ：重定向，被请求的旧资源还在（仍然可以访问），但会临时跳转到一个新资源，搜索引擎会抓取新的内容而保存旧的网址。</li><li>304 ：请求资源重定向到缓存中（命中了协商缓存）。</li><li>404 ：资源未找到，一般是客户端请求了不存在的资源。</li><li>500 ：服务器收到了请求，但是服务器内部产生了错误。</li><li>502 ：连接服务器失败（服务器在处理一个请求的时候，或许需要其他的服务器配合，但是联系不上其他的服务器了）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Http状态码（服务器给客户端的东西）&quot;&gt;&lt;a href=&quot;#Http状态码（服务器给客户端的东西）&quot; class=&quot;headerlink&quot; title=&quot;Http状态码（服务器给客户端的东西）&quot;&gt;&lt;/a&gt;Http状态码（服务器给客户端的东西）&lt;/h3&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>响应报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/响应报文/</id>
    <published>2019-09-01T14:13:51.199Z</published>
    <updated>2019-09-01T14:22:17.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析响应报文（给浏览器看的）"><a href="#分析响应报文（给浏览器看的）" class="headerlink" title="分析响应报文（给浏览器看的）"></a>分析响应报文（给浏览器看的）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 27</span><br><span class="line">ETag: W/"1b-q8c2w67PUz7P4t0CNbDw9xqw6bo"</span><br><span class="line">Date: Tue, 23 Jul 2019 06:20:18 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><pre><code>&lt;h2&gt;我是美食界面&lt;/h2&gt;</code></pre><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">协议名/协议版本 状态码</span><br></pre></td></tr></table></figure><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">X-Powered-By: Express</span><br><span class="line">    -服务器所使用的框架</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">    -告诉浏览器解析文件的方式；文件编码方式</span><br><span class="line">Content-Length: 27</span><br><span class="line">    -响应体的长度</span><br><span class="line">ETag: W/"1b-NFYx6TA4AihYceTsWYDlBLJferg"</span><br><span class="line">    -协商缓存（资源唯一标识）</span><br><span class="line">Date: Tue, 23 Jul 2019 06:20:18 GMT</span><br><span class="line">    -日期</span><br><span class="line">Connection: keep-alive</span><br><span class="line">    -告诉浏览器，服务器支持长连接</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>&lt;h2&gt;我是美食界面&lt;/h2&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析响应报文（给浏览器看的）&quot;&gt;&lt;a href=&quot;#分析响应报文（给浏览器看的）&quot; class=&quot;headerlink&quot; title=&quot;分析响应报文（给浏览器看的）&quot;&gt;&lt;/a&gt;分析响应报文（给浏览器看的）&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>POST请求报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/POST%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/POST请求报文/</id>
    <published>2019-09-01T14:12:38.040Z</published>
    <updated>2019-09-01T14:24:10.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析POST请求报文-给服务器看的"><a href="#分析POST请求报文-给服务器看的" class="headerlink" title="分析POST请求报文(给服务器看的)"></a>分析POST请求报文(给服务器看的)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:3000/demo HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 16</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://localhost:63342</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">DNT: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://localhost:63342/node/day04/1.express%E6%9C%8D%E5%8A%A1%E5%99%A8/demo.html?_ijt=tjfnb0cpos62ql8umjmm9v24ve</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie: Webstorm-9af2238=09820128-3adb-43e4-8242-a6f65c9e523a</span><br><span class="line"></span><br><span class="line">name=kobe&amp;age=18</span><br></pre></td></tr></table></figure><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:3000/demo HTTP/1.1</span><br><span class="line">    -</span><br></pre></td></tr></table></figure><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:3000</span><br><span class="line">    --访问的主机名（地址，仅仅包含主机名+端口号）</span><br><span class="line">Connection: keep-alive</span><br><span class="line">    --告诉服务器，浏览器端支持长连接</span><br><span class="line">Content-Length: 16</span><br><span class="line">    --请求体的长度</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">    --用于控制强缓存</span><br><span class="line">Origin: http://localhost:63342</span><br><span class="line">    --当前所处位置（主机位置+端口位置）</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">    --告诉服务器，浏览器端支持https协议</span><br><span class="line">DNT: 1</span><br><span class="line">    --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    --标识该请求是来自于一个form表单，并且以urlencoded形式进行编码</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">    --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">    --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1</span><br><span class="line">Referer: http://localhost:63342/node/day04/1.express%E6%9C%8D%E5%8A%A1%E5%99%A8/demo.html?_ijt=tjfnb0cpos62ql8umjmm9v24ve</span><br><span class="line">    --在当前url下发出去的请求，是一个完整url，也可以做防盗链、同时也可以做广告计费</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">    --告诉服务器浏览器能支持的文件压缩格式</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">    --告诉服务器，浏览器能够接受的语言</span><br><span class="line">Cookie: Webstorm-9af2238=09820128-3adb-43e4-8242-a6f65c9e523a</span><br><span class="line">    --Webstorm帮你“种”的一个cookie</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=kobe&amp;age=18</span><br><span class="line">    --携带过去的数据，以urlencoded进行编码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析POST请求报文-给服务器看的&quot;&gt;&lt;a href=&quot;#分析POST请求报文-给服务器看的&quot; class=&quot;headerlink&quot; title=&quot;分析POST请求报文(给服务器看的)&quot;&gt;&lt;/a&gt;分析POST请求报文(给服务器看的)&lt;/h3&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>GET请求报文</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/GET%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/GET请求报文/</id>
    <published>2019-09-01T14:11:33.220Z</published>
    <updated>2019-09-01T14:20:37.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析GET请求报文-给服务器看的"><a href="#分析GET请求报文-给服务器看的" class="headerlink" title="分析GET请求报文(给服务器看的)"></a>分析GET请求报文(给服务器看的)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:3000/meishi HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">DNT: 1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">空行</span><br><span class="line">空行</span><br></pre></td></tr></table></figure><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:3000/meishi HTTP/1.1 </span><br><span class="line"> //请求类型 协议名://主机名:端口号/路由关键词 使用协议的版本</span><br></pre></td></tr></table></figure></code></pre><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:3000</span><br><span class="line">      --访问的主机名（地址，仅仅包含主机名+端口号）</span><br><span class="line">      --防盗链、广告计费</span><br><span class="line">Connection: keep-alive</span><br><span class="line">      --告诉服务器，浏览器端支持长连接</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">      --告诉服务器，浏览器端支持https协议</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">      --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。</span><br><span class="line">DNT: 1</span><br><span class="line">      --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">      --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">      --告诉服务器浏览器能支持的文件压缩格式</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">      --告诉服务器，浏览器能够接受的语言</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>GET 请求没有报文体</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分析GET请求报文-给服务器看的&quot;&gt;&lt;a href=&quot;#分析GET请求报文-给服务器看的&quot; class=&quot;headerlink&quot; title=&quot;分析GET请求报文(给服务器看的)&quot;&gt;&lt;/a&gt;分析GET请求报文(给服务器看的)&lt;/h3&gt;&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>Http协议</title>
    <link href="http://jiugework.gitee.io/2019/09/01/http/http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://jiugework.gitee.io/2019/09/01/http/http协议/</id>
    <published>2019-09-01T14:06:53.112Z</published>
    <updated>2019-09-01T14:11:17.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http协议是什么？"><a href="#http协议是什么？" class="headerlink" title="http协议是什么？"></a>http协议是什么？</h3><ul><li>是什么：超文本传输协议（属于应用层协议）</li><li>特点：无状态，现在cookie解决了无状态的问题（早期网页开发时，用cookie解决，现在是cookie和session配合使用）</li><li>作用：规定了服务器和客户端传递信息的规则（统称为报文，分为：请求报文、响应报文。）</li><li>版本：<ul><li>http 1.0 （老版本） ———-  不支持长连接</li><li>http 1.1 （主流版本）———  优点：支持长连接，弊端：同时发送资源的数量过小。</li><li>http 2.0 （最新版） ———-  同时发送资源的数量稍有提升。</li></ul></li><li>报文(请求报文、响应报文)的组成：<ul><li>报文首行</li><li>报文头</li><li>空行（仅仅作为一个分割）</li><li>报文体</li></ul></li></ul><p>### </p><h3 id="分析GET请求报文-给服务器看的"><a href="#分析GET请求报文-给服务器看的" class="headerlink" title="分析GET请求报文(给服务器看的)"></a>分析GET请求报文(给服务器看的)</h3><pre><code>GET http://localhost:3000/meishi HTTP/1.1Host: localhost:3000Connection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36DNT: 1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7空行空行</code></pre><h3 id="报文首行"><a href="#报文首行" class="headerlink" title="报文首行"></a>报文首行</h3><pre><code>GET http://localhost:3000/meishi HTTP/1.1    -请求类型 协议名://主机名:端口号/路由关键词 使用协议的版本</code></pre><h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><pre><code>Host: localhost:3000      --访问的主机名（地址，仅仅包含主机名+端口号）      --防盗链、广告计费Connection: keep-alive      --告诉服务器，浏览器端支持长连接Upgrade-Insecure-Requests: 1      --告诉服务器，浏览器端支持https协议User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36      --用户代理，告知服务器你的浏览器内核以及品牌，早期的时候用于判断用户的浏览器是拿一个品牌，现在不可用了。DNT: 1      --禁止跟踪，告知服务器禁止跟踪，并不是写了该字段服务器就一定遵守。Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3      --告知服务器浏览器能接受的文件类型，q是资源的优先级，取值范围是0-1,1的权限最高，默认是1Accept-Encoding: gzip, deflate, br      --告诉服务器浏览器能支持的文件压缩格式Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7      --告诉服务器，浏览器能够接受的语言</code></pre><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h3 id="报文体"><a href="#报文体" class="headerlink" title="报文体"></a>报文体</h3><pre><code>GET 请求没有报文体</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;http协议是什么？&quot;&gt;&lt;a href=&quot;#http协议是什么？&quot; class=&quot;headerlink&quot; title=&quot;http协议是什么？&quot;&gt;&lt;/a&gt;http协议是什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;是什么：超文本传输协议（属于应用层协议）&lt;/li&gt;
&lt;li&gt;特点
      
    
    </summary>
    
      <category term="HTTP" scheme="http://jiugework.gitee.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>mongoose的增删改查</title>
    <link href="http://jiugework.gitee.io/2019/08/31/node/mongoose%E7%9A%84CRUD/"/>
    <id>http://jiugework.gitee.io/2019/08/31/node/mongoose的CRUD/</id>
    <published>2019-08-31T14:32:20.819Z</published>
    <updated>2019-08-31T15:46:59.356Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ul><li>模型对象.create(文档对象，回调函数)</li><li><p>模型对象.create(文档对象)</p><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4></li><li><p>模型对象.find(查询条件[,投影])不管有没有数据，都返回一个数组</p></li><li><p>模型对象.findOne(查询条件[,投影])找到了返回一个对象，没找到返回null</p><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4></li><li><p>模型对象.updateOne(查询条件,要更新的内容[,配置对象])</p></li><li><p>模型对象.updateMany(查询条件,要更新的内容[,配置对象])<br> 备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateOne或updateMany</p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4></li><li><p>模型对象.deleteOne(查询条件)</p></li><li>模型对象.deleteMany(查询条件)<br>  备注：没有delete方法，会报错！</li></ul><p>备注： 以上所有方法，如果没有指定回调函数，则返回值是一个Promise对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Create&quot;&gt;&lt;a href=&quot;#Create&quot; class=&quot;headerlink&quot; title=&quot;Create&quot;&gt;&lt;/a&gt;Create&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模型对象.create(文档对象，回调函数)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型对象.create(文
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://jiugework.gitee.io/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>GET请求与POST请求</title>
    <link href="http://jiugework.gitee.io/2019/08/31/node/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/"/>
    <id>http://jiugework.gitee.io/2019/08/31/node/GET请求与POST请求/</id>
    <published>2019-08-31T14:28:02.677Z</published>
    <updated>2019-08-31T15:42:41.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GET请求与POST请求"><a href="#GET请求与POST请求" class="headerlink" title="GET请求与POST请求"></a>GET请求与POST请求</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>HTTP请求，最初设定了八种方法（也称为“动作”）。这八种方法本质上没有任何区别。只是让请求，更加有语义而已。<br>八种方法分别为：OPTIONS、HEAD、GET、POST、PUT、DELETE、TRACE、CONNECT<br>这八种方法最终经过“岁月沉淀”后，常用的只有两种，即：GET和POST</p></blockquote><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>含义：从指定的资源获取数据（一种“索取”的感觉）。</li><li>什么时候使用GET请求较为合适？<ul><li>单纯获取数据的时。</li><li>请求中不包含敏感数据时。</li></ul></li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>含义：向指定的资源提交要被处理的数据（一种“交差”的感觉）。</li><li>什么时候使用POST请求较为合适？<ul><li>传送相对敏感数据时。</li><li>请求的结果有持续性的副作用，例如：传递的数据要作为数据源写入数据库时。<br>备注：使用了POST不代表的绝对的安全。</li></ul></li></ul><h3 id="常见的GET请求："><a href="#常见的GET请求：" class="headerlink" title="常见的GET请求："></a>常见的GET请求：</h3><ul><li>浏览器地址栏输入网址时（浏览器请求网页时时GET请求，且不可更改）</li><li>可以请求外部资源的html标签，例如：<img> <a> <link> <script></li><li>发送Ajax时明确指出了使用GET请求</li><li>form表单提交时没有指明方式，默认使用GET</li></ul><h3 id="常见的POST请求："><a href="#常见的POST请求：" class="headerlink" title="常见的POST请求："></a>常见的POST请求：</h3><ul><li>发送Ajax时明确指出了使用POST方式</li><li>使用第三方发送Ajax请求库时明确指出用POST时</li><li>form表单提交时明确指出使用POST方式</li></ul><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p><img src="https://img.jiuge.site/imgbox/20190831/RDV6MlMfYWfB.png?imageslim" alt="mark"></p></script></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GET请求与POST请求&quot;&gt;&lt;a href=&quot;#GET请求与POST请求&quot; class=&quot;headerlink&quot; title=&quot;GET请求与POST请求&quot;&gt;&lt;/a&gt;GET请求与POST请求&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
      <category term="GET" scheme="http://jiugework.gitee.io/tags/GET/"/>
    
      <category term="POST" scheme="http://jiugework.gitee.io/tags/POST/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://jiugework.gitee.io/2019/08/30/node/MongoDB/"/>
    <id>http://jiugework.gitee.io/2019/08/30/node/MongoDB/</id>
    <published>2019-08-30T01:27:29.214Z</published>
    <updated>2019-08-31T15:45:18.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB原生CRUD（增删改查）命令总结"><a href="#MongoDB原生CRUD（增删改查）命令总结" class="headerlink" title="MongoDB原生CRUD（增删改查）命令总结"></a>MongoDB原生CRUD（增删改查）命令总结</h2><p>-C creat：</p><ul><li>db.集合名.insert(文档对象)</li><li>db.集合名.insertOne(文档对象)</li><li>db.集合名.insertMany([文档对象，文档对象])</li></ul><p>-R read：</p><ul><li><p>db.集合名.find(查询条件[,投影])</p><ul><li>举例:db.students.find({age:18}),查找年龄为18的所有信息</li><li><p>举例:db.students.find({age:18,name:’jack’}),查找年龄为18且名字为jack的学生</p><p>常用操作符：</p><ul><li>&lt; , &lt;= , &gt; , &gt;= , !==   对应为： $lt $lte $gt $gte $ne<br> 举例：db.集合名.find({age:{$gte:20}}),年龄是大于等于20的</li><li>逻辑或：使用$in 或 $or<br>  查找年龄为18或20的学生<br>  举例：db.students.find({age:{$in:[18,20]}})<br>  举例：db.students.find({$or:[{age:18},{age:20}]})</li><li>逻辑非：$nin</li><li>正则匹配：<br>  举例：db.students.find({name:/^T/})</li><li>$where能写函数：<br>  db.students.find({$where:function(){<pre><code>return this.name === &apos;zhangsan&apos; &amp;&amp; this.age === 18</code></pre>  }})</li></ul><p>投影：过滤掉不想要的数据，只保留想要展示的数据<br> 举例：db.students.find({},{_id:0,name:0}),过滤掉id和name<br> 举例：db.students.find({},{age:1}),只保留age</p><p>补充：db.集合名.findOne(查询条件[,投影])，默认只要找到一个</p></li></ul></li></ul><p>-U update：</p><ul><li><p>db.集合名.update(查询条件,要更新的内容[,配置对象])</p><p>  //如下会将更新内容替换掉整个文档对象，但_id不受影响</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{age:19})</code></pre><p>  //使用$set修改指定内容，其他数据不变，不过只能匹配一个zhangsan</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}})</code></pre><p>  //修改多个文档对象，匹配多个zhangsan,把所有zhangsan的年龄都替换为19</p><pre><code>举例：db.students.update({name:&apos;zhangsan&apos;},{$set:{age:19}},{multi:true})</code></pre><p>   补充：db.集合名.updateOne(查询条件,要更新的内容[,配置对象])</p><pre><code>db.集合名.updateMany(查询条件,要更新的内容[,配置对象])</code></pre></li></ul><p>-D delete</p><ul><li>db.集合名.remove(查询条件)<pre><code>//删除所有年龄小于等于19的学生举例：db.students.remove({age:{$lte:19}})</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB原生CRUD（增删改查）命令总结&quot;&gt;&lt;a href=&quot;#MongoDB原生CRUD（增删改查）命令总结&quot; class=&quot;headerlink&quot; title=&quot;MongoDB原生CRUD（增删改查）命令总结&quot;&gt;&lt;/a&gt;MongoDB原生CRUD（增删改
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://jiugework.gitee.io/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>包管理工具</title>
    <link href="http://jiugework.gitee.io/2019/08/26/node/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://jiugework.gitee.io/2019/08/26/node/包管理工具/</id>
    <published>2019-08-26T02:18:20.716Z</published>
    <updated>2019-08-31T15:41:10.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><strong>移除</strong></p><p><code>npm remove 包名字</code> 在node_module中删除xxxx包,并且删除该包在package.json中的声助</p><p><strong>其他命令</strong></p><ul><li>npm aduit fix :检测项目依赖中的一些问题,并且尝试着修复。</li><li>npm view  包名字 versions: 查npm仓库中xxx包的所有版本信息</li><li>npm view 包名字 version: 查npm仓库中xxxx包的最新版本</li><li>npm ls 包名字 查看我们所安装xxx包的版本</li></ul><p><strong>关于版本号的说明</strong></p><ul><li><code>&quot;^3.x.x&quot;</code> :<strong>锁定大版本</strong>以后安装包的时候,保证包是3.对x版本,x默认取最新的。</li><li>“~3.1.x”：<strong>锁定小版本</strong>,以后安装包的时候,保证包是3.1.x版本,x默认取最新的。</li><li>“3.1.1”：<strong>锁定完整版本</strong>,以后安装包的时候,保证包必须是3.1.1版本。</li></ul><h2 id="cnpm的简介与使用"><a href="#cnpm的简介与使用" class="headerlink" title="cnpm的简介与使用"></a>cnpm的简介与使用</h2><h3 id="1-国内使用npm存在的问题"><a href="#1-国内使用npm存在的问题" class="headerlink" title="1.国内使用npm存在的问题"></a>1.国内使用npm存在的问题</h3><ul><li>安装npm后，每次我们安装包时，我们的电脑都要和npm服务器进行对话，去npm仓库获取包。</li><li>npm默认的仓库地址为：<a href="http://registry.npmjs.org" target="_blank" rel="noopener">http://registry.npmjs.org</a> </li><li>查看当前npm仓库地址命令：   <code>npm config get registry</code>  提示如下图：</li></ul><p><img src="https://s2.ax1x.com/2019/01/08/FqtKhR.png" alt="Alt text"><br>因为npm的远程服务器在国外，所以有时候难免出现访问过慢，甚至无法访问的情况。<br>为了解决这个问题，我们有以下几个解决办法</p><h3 id="2-使用淘宝的cpm代替npm"><a href="#2-使用淘宝的cpm代替npm" class="headerlink" title="2.使用淘宝的cpm代替npm"></a>2.使用淘宝的cpm代替npm</h3><blockquote><p>淘宝为我们搭建了一个国内的npm服务器，它目前是每隔10分钟将国外npm仓库的所有内容“搬运”回国内的服务器上，这样我们直接访问淘宝的国内服务器就可以了，它的地址是：<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><h4 id="第一种：直接安装cnpm"><a href="#第一种：直接安装cnpm" class="headerlink" title="第一种：直接安装cnpm"></a>第一种：直接安装cnpm</h4><p>安装淘宝提供的cnpm，并更改服务器地址为淘宝的国内地址，<br>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，以后安装直接采用<code>cpm</code>替代<code>npm</code>，<br>例如原生npm命令为：<code>npm install uniq --save</code>，cnpm命令为：<code>cnpm install uniq --save</code></p><h4 id="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"><a href="#第二种：替换npm仓库地址为淘宝镜像地址（推荐）" class="headerlink" title="第二种：替换npm仓库地址为淘宝镜像地址（推荐）"></a>第二种：替换npm仓库地址为淘宝镜像地址（推荐）</h4><p>命令：npm config set registry <a href="https://registry.npm.taobao.org`，" target="_blank" rel="noopener">https://registry.npm.taobao.org`，</a><br>查看是否更改成功：<code>npm config get registry</code>，以后安装时，依然用npm命令，但是实际是从淘宝国内服务器下载的</p><h2 id="yarn的简介与使用"><a href="#yarn的简介与使用" class="headerlink" title="yarn的简介与使用"></a>yarn的简介与使用</h2><blockquote><p>Yarn发布于2016年10月，截至当前2019年1月，gitHub上的Start数量为：34.3k，已经超过npm很多了，<br>yarn使用本地缓存，无需互联网连接就能安装本地已经缓存的依赖项，安装方法：<code>npm install -g yarn</code></p></blockquote><h4 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h4><p>由于yarn的全局安装位置与npm不同，所以要配置yarn的全局安装路径到环境变量中，否则全局安装的包不起作用。<br>具体操作如下：</p><blockquote><p>安装yarn后执行 <code>yarn global dir</code>命令,获取yarn全局安装位置。<br>讲该位置配置到电脑环境变量中</p></blockquote><h3 id="yarn命令与npm命令的对应关系如下："><a href="#yarn命令与npm命令的对应关系如下：" class="headerlink" title="yarn命令与npm命令的对应关系如下："></a>yarn命令与npm命令的对应关系如下：</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目:"></a>初始化项目:</h4><pre><code>yarn init -ynpm init -y</code></pre><h4 id="下载项目的所有声明的依赖"><a href="#下载项目的所有声明的依赖" class="headerlink" title="下载项目的所有声明的依赖:"></a>下载项目的所有声明的依赖:</h4><pre><code>yarnnpm install</code></pre><h4 id="下载指定的运行时依赖包"><a href="#下载指定的运行时依赖包" class="headerlink" title="下载指定的运行时依赖包:"></a>下载指定的运行时依赖包:</h4><pre><code>yarn add webpack@3.2.1npm install webpack@3.2.1 -S</code></pre><h4 id="下载指定的开发时依赖"><a href="#下载指定的开发时依赖" class="headerlink" title="下载指定的开发时依赖:"></a>下载指定的开发时依赖:</h4><pre><code>yarn add webpack@3.2.1 -Dnpm install webpack@3.2.1 -D</code></pre><h4 id="全局下载指定包"><a href="#全局下载指定包" class="headerlink" title="全局下载指定包:"></a>全局下载指定包:</h4><pre><code>yarn global add webpacknpm install webpack -g</code></pre><h4 id="删除依赖包"><a href="#删除依赖包" class="headerlink" title="删除依赖包:"></a>删除依赖包:</h4><pre><code>yarn remove webpacknpm remove webpack -Syarn global remove webpacknpm remove webpack -g</code></pre><h4 id="运行项目中配置的script"><a href="#运行项目中配置的script" class="headerlink" title="运行项目中配置的script:"></a>运行项目中配置的script:</h4><pre><code>yarn run xxxnpm run xxx</code></pre><h4 id="查看某个包的信息"><a href="#查看某个包的信息" class="headerlink" title="查看某个包的信息:"></a>查看某个包的信息:</h4><pre><code>yarn info xxxnpm info xxx</code></pre><h4 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像:"></a>设置淘宝镜像:</h4><pre><code>yarn config set registry https://registry.npm.taobao.orgnpm config set registry https://registry.npm.taobao.org</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;移除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm remove 包名字&lt;/code&gt; 在node_modul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node函数特点</title>
    <link href="http://jiugework.gitee.io/2019/08/25/node/Node%E5%87%BD%E6%95%B0/"/>
    <id>http://jiugework.gitee.io/2019/08/25/node/Node函数/</id>
    <published>2019-08-25T14:55:44.544Z</published>
    <updated>2019-09-01T14:24:59.839Z</updated>
    
    <content type="html"><![CDATA[<p>#模板</p><ul><li><p>Node中任何一个模块(js文件)都被一个外层函数所包裹</p></li><li><p><code>function (exports, require, module, filename, dirname)</code> {}</p></li><li><p><strong>exports</strong>:用于暴露模块</p></li><li><p><strong>require</strong>:用于引入模块</p></li><li><p><strong>module</strong>:用于暴露模块</p></li><li><p><strong>filename</strong>: 当前文件所在的路径(绝对)</p></li><li><p><strong>dirname</strong>: 当前文件所在文件夹的路径(绝对) </p></li></ul><p>  为什么要有这个外层函数(这个外层函数有什么作用?) </p><p>   1,隐藏内部实现。</p><p>   2.支持CommonJs的模块化T Node函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#模板&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node中任何一个模块(js文件)都被一个外层函数所包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;function (exports, require, module, filename, dirname)&lt;/code&gt; {}&lt;
      
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://jiugework.gitee.io/2019/08/25/node/%E6%A8%A1%E6%9D%BF/"/>
    <id>http://jiugework.gitee.io/2019/08/25/node/模板/</id>
    <published>2019-08-25T13:55:48.144Z</published>
    <updated>2019-08-31T14:37:52.380Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Node" scheme="http://jiugework.gitee.io/categories/Node/"/>
    
    
      <category term="generator" scheme="http://jiugework.gitee.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>周报</title>
    <link href="http://jiugework.gitee.io/2019/08/09/work/%E5%91%A8%E6%8A%A5/"/>
    <id>http://jiugework.gitee.io/2019/08/09/work/周报/</id>
    <published>2019-08-09T06:16:23.370Z</published>
    <updated>2019-09-06T06:22:36.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="周报"><a href="#周报" class="headerlink" title="周报"></a>周报</h2><h3 id="2019-08-19—-2019-08-23"><a href="#2019-08-19—-2019-08-23" class="headerlink" title="2019-08-19—-2019-08-23"></a>2019-08-19—-2019-08-23</h3><h5 id="教师端"><a href="#教师端" class="headerlink" title="教师端"></a>教师端</h5><ol><li>性别选择问题渲染</li><li>校区选择,判断一个校区时候直接进入。</li><li>配置修改小程序后台配置老师帮appid,上传到体验版</li><li>修改课程详情接口<h4 id="教务端"><a href="#教务端" class="headerlink" title="教务端"></a>教务端</h4></li><li>个人中心资料页面，资料修改头像上传</li><li>校区切换</li><li>获取消息</li><li>首页页面修改</li></ol><hr><h3 id="2019年8月26"><a href="#2019年8月26" class="headerlink" title="2019年8月26"></a>2019年8月26</h3><h4 id="教务端-1"><a href="#教务端-1" class="headerlink" title="教务端"></a>教务端</h4><ol><li>课程详情页面。获取详情内容</li><li>课堂播报tab静态页面，课堂播报接口。</li><li>课堂播报详情、点赞、评论功能。</li><li>课程打卡状态处理，打卡页面重写，打卡详情重写。</li><li>打卡详情接口、学生选择列表静态</li></ol><hr><h3 id="2019年9月2日1"><a href="#2019年9月2日1" class="headerlink" title="2019年9月2日1"></a>2019年9月2日1</h3><h4 id="教务端-2"><a href="#教务端-2" class="headerlink" title="教务端"></a>教务端</h4><ol><li>班级考勤页面提示、打考勤记录接口对接。</li><li>拍照记录静态板块设计、获取拍照记录</li><li>拍照记录功能实现：删除、新增</li><li>教务端课程页面排课的显示<h4 id="老师端"><a href="#老师端" class="headerlink" title="老师端"></a>老师端</h4></li><li>页面缺少的静态图片补充、公司资料页面完善</li></ol><h4 id="老师端-1"><a href="#老师端-1" class="headerlink" title="老师端"></a>老师端</h4><ol><li>家委会发布通知消息字数限制、阅读消息页面优化</li><li>个人中心字体调整、发布动态字数解除限制。</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;周报&quot;&gt;&lt;a href=&quot;#周报&quot; class=&quot;headerlink&quot; title=&quot;周报&quot;&gt;&lt;/a&gt;周报&lt;/h2&gt;&lt;h3 id=&quot;2019-08-19—-2019-08-23&quot;&gt;&lt;a href=&quot;#2019-08-19—-2019-08-23&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Call</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Call/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Call/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:28:50.385Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><strong>用法</strong></p><ol><li>调用函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> dr.call() <span class="comment">//play</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Call可以改变函数this的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o)</span><br></pre></td></tr></table></figure><p>此时这个函数的this就指向了o这个对象</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dr</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"play"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//指向o</span></span><br><span class="line">   <span class="built_in">console</span>.log(x+y);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> o=&#123;</span><br><span class="line">   name:<span class="string">'哈哈哈'</span></span><br><span class="line"> &#125;</span><br><span class="line"> dr.call(o,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// play</span></span><br><span class="line"><span class="comment">// &#123;name: "哈哈哈"&#125;</span></span><br><span class="line"><span class="comment">//  3</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      <span class="comment">//把子的this传入到父</span></span><br><span class="line">      <span class="comment">// this指向实例对象</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br></pre></td></tr></table></figure><ul><li><p>继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son. prototype = Father.prototype; <span class="comment">//这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    Father.prototype.money=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="built_in">console</span>.log(<span class="string">"钱"</span>)&#125;;</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex</span><br><span class="line">      Father.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">    &#125;;</span><br><span class="line">    Son.prototype=<span class="keyword">new</span> Father();  </span><br><span class="line">    <span class="comment">//如果利用对象的形式修改来原型对象，别忘了利用 constructor指回原来的对象</span></span><br><span class="line">    Son.prototype.constructor=Son</span><br><span class="line">    Son.prototype.play=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> zs = <span class="keyword">new</span> Son(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">'nan'</span>);</span><br><span class="line">    zs.money();</span><br><span class="line">    zs.play();</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br><span class="line">    <span class="built_in">console</span>.log(Father);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Call&quot;&gt;&lt;a href=&quot;#Call&quot; class=&quot;headerlink&quot; title=&quot;Call&quot;&gt;&lt;/a&gt;Call&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Call" scheme="http://jiugework.gitee.io/tags/Call/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/面向对象/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-08-06T08:59:10.254Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建对象的三中方式"><a href="#创建对象的三中方式" class="headerlink" title="创建对象的三中方式"></a>创建对象的三中方式</h5><ol><li>利用new object()创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>利用 对象字面量创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>通过构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    <span class="keyword">this</span>.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);<span class="comment">//实例化</span></span><br></pre></td></tr></table></figure><h5 id="new在执行会做四件事"><a href="#new在执行会做四件事" class="headerlink" title="new在执行会做四件事"></a>new在执行会做四件事</h5></li><li><p>在内存创建一个空对象</p></li><li>让this指向这个对象</li><li>执行构造函数里面的代码，给这个新对象添加属性以及方法</li><li>返回这个新对象 ）</li></ol><h5 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h5><ul><li><p><strong>实例成员</strong>就是构造函数内部通过this添加的成员，<figure class="highlight plain"><figcaption><span>```sex```   sing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **实例成员**只能通过实例化的对象来访问</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">         console.log(zxy.name)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>静态成员</strong> 在构造函数本身上添加的的成员就是静态成员</p><ul><li>例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star.age=<span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员</strong>只能通过构造函数来访问</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.sex)<span class="comment">//能访问</span></span><br><span class="line"><span class="built_in">console</span>.log(zxy.sex)<span class="comment">//不能访问</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="prototype构造函数原型"><a href="#prototype构造函数原型" class="headerlink" title="prototype构造函数原型"></a>prototype构造函数原型</h5><blockquote><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong>。JavaScript规定,<strong>每一个构造函数都有一个prototype属性</strong>,指向另一个对象。注意这个prototype就是一个对象,这个对象的所有属性和方法,都会被构造函数所拥有。<strong>我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法</strong>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,sex</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.sex=sex;</span><br><span class="line">      <span class="comment">// this.sing=function()&#123;</span></span><br><span class="line">        <span class="comment">//   console.log("唱歌")</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">Star.prototype.sing=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"唱歌"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">var</span> zxy= <span class="keyword">new</span> Star(<span class="string">'张学友'</span>,<span class="string">'男'</span>);</span><br><span class="line"> <span class="keyword">var</span> cj= <span class="keyword">new</span> Star(<span class="string">'cj'</span>,<span class="string">'男'</span>);</span><br><span class="line">zxy.sing===cj.sing   <span class="comment">//true</span></span><br><span class="line">zxy.sing() <span class="comment">//唱歌</span></span><br></pre></td></tr></table></figure><ol><li><p>原型是什么?</p><p> 一个对象,我们也称为prototype为原型对象</p></li><li><p>原型的作用是什么?</p><p>  共享方法。</p></li></ol><p>一般情况下,我们的公共属性定义到构造函数里面,公共的方法我们放到原型对象身上</p><h5 id="对象原型proto"><a href="#对象原型proto" class="headerlink" title="对象原型proto"></a>对象原型proto</h5><p><strong>对象都会有一个属性_proto</strong>_指向构造函数的prototype原型对象,之所以我们对象可以使用构造函数 prototype原型对象的属性和方法,就是因为对象有proto原型的存在。</p><ul><li><p>proto对象原型和 原型对象prototype是等价的*</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(cj.__proto__===Star.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>方法的查找规则:</p><p>首先先看ldh对象身上是否有sing方法,如果有就执行这个对象上的sing </p><p>如果么有sing这个方法,因为有一proto的存在,就去构造函数原型对象prototype身上去查找 sing这个方法</p><h5 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h5><p><strong>对象原型(proto )</strong>和<strong>构造函数( prototype)</strong>原型对象里面都有一个属性constructor属性, constructor我们称为构造函数，因为它指回构造函数本身。</p><p>作用 </p><p>constructor主要用于记录该对象引用于哪个构造函数,它可以让原型对象重新指向原来的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.proto_);</span><br><span class="line"><span class="built_in">console</span>.log(star.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(ldh. proto_.constructor);</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">star.prototype =&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>: star ,</span><br><span class="line">    sing: function()&#123;</span><br><span class="line">        <span class="built_in">console</span>. log(<span class="string">' 我 歌'</span>);&#125;,</span><br><span class="line">    movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span><span class="number">.1</span>og(<span class="string">'我会演电影);</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><h5 id="JavaScript的成员查找机制-规则"><a href="#JavaScript的成员查找机制-规则" class="headerlink" title="JavaScript的成员查找机制(规则)"></a>JavaScript的成员查找机制(规则)</h5><ol><li>当访问一个对象的属性(包括方法)时,首先查找这个<strong>对象自身</strong>有没有该属性。</li><li>如果没有就查找它的原型(也就是proto指向的<strong>prototype原型对象</strong>)。</li><li>如果还没有就查找原型对象的原型(<strong>Object的原型对象</strong>)。</li><li>依此类推一直找到Object为止(<strong>null</strong> )。</li><li>proto对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线。</li></ol><p><img src="/assets/img/原型链.jpg" alt></p><h5 id="给Array添加自定义方法"><a href="#给Array添加自定义方法" class="headerlink" title="给Array添加自定义方法"></a>给Array添加自定义方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.xx=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"xxxxxx"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> list.xx();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建对象的三中方式&quot;&gt;&lt;a href=&quot;#创建对象的三中方式&quot; class=&quot;headerlink&quot; title=&quot;创建对象的三中方式&quot;&gt;&lt;/a&gt;创建对象的三中方式&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;利用new object()创建对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figur
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="面向对象" scheme="http://jiugework.gitee.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Class类</title>
    <link href="http://jiugework.gitee.io/2019/07/28/js/Class/"/>
    <id>http://jiugework.gitee.io/2019/07/28/js/Class/</id>
    <published>2019-07-28T01:26:53.000Z</published>
    <updated>2019-07-28T01:29:38.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类的本质</strong></p><ol><li>class本质还是function</li><li>类的所有方法都定义在类的prototype属性上</li><li>类创建的实例,里面也有proto-指向类的prototype原型对象</li><li>所以ES6的类它的绝大部分功能, ES5都可以做到,新的class写法只是让对象原型的写法更加清晰、更像面向对编程的语法而已。</li><li>所以ES6的类其实就是语法糖.</li><li>语法糖语法糖就是一种便捷写法.简单理解,有两种方法可以实现同样的功能,但是一种写法更加清晰、方便那么这个方法就是语法糖</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;类的本质&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;class本质还是function&lt;/li&gt;
&lt;li&gt;类的所有方法都定义在类的prototype属性上&lt;/li&gt;
&lt;li&gt;类创建的实例,里面也有proto-指向类的prototype原型对象&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Class" scheme="http://jiugework.gitee.io/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>Vue样式绑定方式</title>
    <link href="http://jiugework.gitee.io/2019/07/22/Vue/%E6%A0%B7%E5%BC%8F/"/>
    <id>http://jiugework.gitee.io/2019/07/22/Vue/样式/</id>
    <published>2019-07-22T12:33:15.236Z</published>
    <updated>2019-07-29T14:25:25.865Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><ul><li>直接传递一个数组 这里的class需要用v-bind绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    .active&#123;</span><br><span class="line">      letter-spacing: 0.5em;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><ul><li>通过三元表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',flag?'thin':'']"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ul><li>把样式放到对象里把key为样式名，把value值绑定到一个bool值上</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red','active',&#123;'thin':flag&#125;]"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><ul><li>传入一个对象本质跟第三种方法差不多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:flag,active:true,active:true&#125;"</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :class="['red','active',flag?'thin':'']"&gt;这是一个很大很大的H1，打到你无法想象&lt;/h1&gt;2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">'classObj'</span>&gt;</span>这是一个很大很大的H1，打到你无法想象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      flag:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      classObj:&#123;<span class="attr">red</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>,<span class="attr">active</span>:<span class="literal">true</span>&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li><p>直接在元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-weight&apos;:200 &#125;&quot;&gt;变色&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>在data中引用到<code>:style</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h1 :style="&#123;color:'red','font-weight':200 &#125;"&gt;变色&lt;/h1&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript"> <span class="keyword">let</span> vm =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el:<span class="string">'#app'</span>,</span></span><br><span class="line">     data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line"><span class="javascript">        color:<span class="string">'red'</span>,<span class="string">'font-weight'</span>:<span class="number">200</span> </span></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">      </span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三种绑定一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1,styleObj2 ]"</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> data:&#123;</span><br><span class="line">      styleObj1:&#123;</span><br><span class="line">        color:'red','font-weight':200 </span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj2:&#123;</span><br><span class="line">        'font-size':'60px'</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直接传递一个数组 这里的class需要用v-bind绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="Vue样式" scheme="http://jiugework.gitee.io/tags/Vue%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vue指令</title>
    <link href="http://jiugework.gitee.io/2019/07/21/Vue/Vue%E6%8C%87%E4%BB%A4/"/>
    <id>http://jiugework.gitee.io/2019/07/21/Vue/Vue指令/</id>
    <published>2019-07-21T15:09:49.263Z</published>
    <updated>2019-07-22T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="V-for"><a href="#V-for" class="headerlink" title="V-for"></a>V-for</h4><blockquote><p>组件中使用v-for需要绑定key</p></blockquote><ul><li><p>in后面可以放 数组，对象数组，对象，数字</p></li><li><p>循环普通数组</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;(item,i) in list &quot;&gt;&#123;&#123;item&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li><p>迭代数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-for=&quot;count in 10&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>可以渲染出带有标签的文本</li></ul><h4 id="v-if跟v-show"><a href="#v-if跟v-show" class="headerlink" title="v-if跟v-show"></a>v-if跟v-show</h4><ul><li>show控制显示隐藏需要频繁切换建议使用</li><li>if控制是否渲染页面是否存在这个节点</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>可以解决插值表达式闪烁问题</li></ul><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul><li>缩写 是“:”</li><li>Vue的属性绑定机制</li><li>v-bind只能实现数据的单项绑定，只能从M绑定到V，无法实现数据的双向绑定</li></ul><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li>Vue提供的事件绑定机制</li><li>缩写是“@” </li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>只能在表单元素中使用</p></blockquote><ul><li><p>实现双向数据绑定</p></li><li><p>使用v-model可以实现表单元素和model中数据的双向数据绑定</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" v-model:value="msg" &gt;</span></span><br></pre></td></tr></table></figure><p>​    或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"msg"</span> &gt;</span><br></pre></td></tr></table></figure><ul><li><p>案例</p></li><li><p>正式开发中尽量少用eval()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span> <span class="attr">bu</span>&gt;</span></span><br><span class="line">    =</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span> @<span class="attr">focus</span>=<span class="string">"comp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      n1: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      n2: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      opt: <span class="string">'-'</span>,</span></span><br><span class="line"><span class="javascript">      result: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      list: [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      comp() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> result=<span class="keyword">this</span>.n1+<span class="keyword">this</span>.opt+<span class="keyword">this</span>.n2</span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.result= <span class="built_in">eval</span>(result)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// switch (this.opt) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '+':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) + Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '-':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) - Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '/':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) / Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   case '*':</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.result = Number(this.n1) * Number(this.n2)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   default:</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     break;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li>.stop阻止冒泡（ 里–》外）</li><li>.prevent阻止默认事件（）</li><li>.capture添加事件监听器时使用事件捕获模式（外–&gt;里）</li><li>.self只当事件在该元素（比如不是子元素）触发是触发回调(自己触发自己，)<ul><li>只会阻止自己冒泡，并不会阻止其他的冒泡</li></ul></li><li>.once事件只触发一次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;v-cloak&quot;&gt;&lt;a href=&quot;#v-cloak&quot; class=&quot;headerlink&quot; title=&quot;v-cloak&quot;&gt;&lt;/a&gt;v-cloak&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以解决插值表达式闪烁问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;V-for&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Vue" scheme="http://jiugework.gitee.io/categories/Vue/"/>
    
    
      <category term="指令" scheme="http://jiugework.gitee.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数组中常用的方法</title>
    <link href="http://jiugework.gitee.io/2019/07/19/js/%E6%95%B0%E7%BB%84/"/>
    <id>http://jiugework.gitee.io/2019/07/19/js/数组/</id>
    <published>2019-07-19T13:15:26.048Z</published>
    <updated>2019-08-31T15:48:13.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发中数组的使用场景非常多, 这里就简单整理总结一些常用的方法;从改变原有数据的方法、不改变原有数组的方法以及数据遍历的方法三方面总结。</p></blockquote><h2 id="改变原有数组的方法"><a href="#改变原有数组的方法" class="headerlink" title="改变原有数组的方法"></a>改变原有数组的方法</h2><h3>splice() 添加/删除数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> item = a.splice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="comment">// 从0开始截取到第三个位置</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [4,5,6,7]</span></span><br><span class="line"><span class="keyword">let</span> item1 = a.splice(<span class="number">0</span>,<span class="number">3</span>,<span class="string">'添加'</span>); <span class="comment">// [4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ['添加',7]</span></span><br><span class="line"><span class="comment">// 从数组下标0开始，删除3个元素，并添加元素'添加'</span></span><br></pre></td></tr></table></figure><p></p><h3>sort() 数组排序</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">8</span>];</span><br><span class="line"> <span class="comment">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a-b;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [1,3,4,4,8,10,20,25];</span></span><br><span class="line"> <span class="comment">// 降序</span></span><br><span class="line"> array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> b-a;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array); <span class="comment">// [25,20,10,8,4,4,3,1];</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>pop() 删除一个数组中的最后的一个元素</h3><p></p><p></p><h3>shift() 删除数组的第一个元素</h3><p></p><p></p><h3>push() 向数组的末尾添加元素</h3><p></p><p></p><h3>unshift()向数组开头添加元素</h3><p></p><p></p><h3>reverse()</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  a =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  a.pop();  <span class="comment">// 3, 返回被删除的元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [1,2]</span></span><br><span class="line">  a.shift(); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// [2]</span></span><br><span class="line">  a.push(<span class="string">"末尾添加"</span>);  <span class="comment">// 2 ,返回数组长度</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) ; [<span class="number">2</span>,<span class="string">"末尾添加"</span>]</span><br><span class="line">  a.unshift(<span class="string">"开头添加"</span>); <span class="comment">// 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//["开头添加", 2, "末尾添加"]</span></span><br><span class="line">  a.reverse();   <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// ["末尾添加", 2, "开头添加"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>copyWithin() 指定位置的成员复制到其他位置</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'zhang'</span>, <span class="string">'wang'</span>, <span class="string">'zhou'</span>, <span class="string">'wu'</span>, <span class="string">'zheng'</span>];</span><br><span class="line"> <span class="comment">// 1位置开始被替换, 2位置开始读取要替换的  5位置前面停止替换</span></span><br><span class="line"> a.copyWithin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"> <span class="comment">// ["zhang", "zhou", "wu", "zheng", "zheng"]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6: fill() 填充数组</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>以上是9种会改变原数组的方法, 接下来是6种常用的不会改变原数组的方法</p></blockquote><h2 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h2><p></p><h3>join() 数组转字符串</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a= [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line"> <span class="keyword">let</span> str2=a.join(<span class="string">'+'</span>); <span class="comment">// 'hello+world'</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>cancat 合并两个或多个数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">  <span class="comment">//连接两个数组</span></span><br><span class="line">  <span class="keyword">let</span> newVal=a.concat(b); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES6扩展运算符…合并数组<br></h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> <span class="keyword">let</span> b = [ <span class="number">4</span>,...a, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"> <span class="built_in">console</span>.log(a,b);</span><br><span class="line"> <span class="comment">//[2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>indexOf() 查找数组是否存在某个元素，返回下标</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'啦啦'</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="literal">NaN</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦'</span>));  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">'啦啦'</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>ES7 includes() 查找数组是否包含某个元素 返回布尔</h3><p></p><p></p><h3>indexOf方法不能识别NaN</h3><p></p><p></p><h3>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">'OB'</span>,<span class="string">'Koro1'</span>,<span class="number">1</span>,<span class="literal">NaN</span>];</span><br><span class="line"> a.includes(<span class="literal">NaN</span>); <span class="comment">// true 识别NaN</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">100</span>); <span class="comment">// false 超过数组长度 不搜索</span></span><br><span class="line"> a.includes(<span class="string">'Koro1'</span>,<span class="number">-3</span>);  <span class="comment">// true 从倒数第三个元素开始搜索</span></span><br></pre></td></tr></table></figure><p></p><p></p><h3>slice() 浅拷贝数组的元素</h3><p></p><blockquote><p>字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [&#123;<span class="attr">name</span>: <span class="string">'OBKoro1'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'zhangsan'</span>&#125;];</span><br><span class="line"> <span class="keyword">let</span> b = a.slice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(b, a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"OBKoro1"&#125;]  [&#123;"name":"OBKoro1"&#125;]</span></span><br><span class="line"> a[<span class="number">0</span>].name=<span class="string">'改变原数组'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(b,a);</span><br><span class="line"> <span class="comment">// [&#123;"name":"改变原数组"&#125;] [&#123;"name":"改变原数组"&#125;]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发中数组的使用场景非常多, 这里就简单整理总结一些常用的方法;从改变原有数据的方法、不改变原有数组的方法以及数据遍历的方法三方面总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;改变原有数组的方法&quot;&gt;&lt;a href=&quot;#改变原有数组的方
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://jiugework.gitee.io/categories/JavaScript/"/>
    
    
      <category term="数组" scheme="http://jiugework.gitee.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Array" scheme="http://jiugework.gitee.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>常用CSS样式</title>
    <link href="http://jiugework.gitee.io/2019/07/16/css/css1/"/>
    <id>http://jiugework.gitee.io/2019/07/16/css/css1/</id>
    <published>2019-07-16T09:21:34.109Z</published>
    <updated>2019-08-31T15:48:02.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS超出部分显示省略号"><a href="#CSS超出部分显示省略号" class="headerlink" title="CSS超出部分显示省略号"></a>CSS超出部分显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单行 */</span></span><br><span class="line"><span class="selector-class">.overflow</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行 */</span></span><br><span class="line"><span class="selector-class">.more_overflow</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line"><span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>; <span class="comment">/* 显示行数 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## <span class="selector-tag">css</span>元素垂直居中</span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.verticalcenter</span>&#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="banner自适应屏幕代码"><a href="#banner自适应屏幕代码" class="headerlink" title="banner自适应屏幕代码"></a>banner自适应屏幕代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;    </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">3000px</span>;<span class="comment">/*图片宽度*/</span>           </span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">1500px</span>;<span class="comment">/*图片宽度的一半*/</span>       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS超出部分显示省略号&quot;&gt;&lt;a href=&quot;#CSS超出部分显示省略号&quot; class=&quot;headerlink&quot; title=&quot;CSS超出部分显示省略号&quot;&gt;&lt;/a&gt;CSS超出部分显示省略号&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="Css" scheme="http://jiugework.gitee.io/categories/Css/"/>
    
    
      <category term="常用CSS" scheme="http://jiugework.gitee.io/tags/%E5%B8%B8%E7%94%A8CSS/"/>
    
  </entry>
  
</feed>
